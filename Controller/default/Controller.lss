
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00000f1a  00000fae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800168  00800168  000010b6  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000347  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f74  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e06  00000000  00000000  00003471  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000159d  00000000  00000000  00004277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00005814  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c4  00000000  00000000  00005a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000887  00000000  00000000  00005f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000067df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 b1 03 	jmp	0x762	; 0x762 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a8 e6       	ldi	r26, 0x68	; 104
  64:	b1 e0       	ldi	r27, 0x01	; 1
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ea e1       	ldi	r30, 0x1A	; 26
  78:	ff e0       	ldi	r31, 0x0F	; 15
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
  86:	0e 94 a7 02 	call	0x54e	; 0x54e <main>
  8a:	0c 94 8b 07 	jmp	0xf16	; 0xf16 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  a4:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  a6:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  ac:	11 ba       	out	0x11, r1	; 17
}
  ae:	08 95       	ret

000000b0 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  b0:	87 e4       	ldi	r24, 0x47	; 71
  b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  b4:	87 e8       	ldi	r24, 0x87	; 135
  b6:	86 b9       	out	0x06, r24	; 6
}
  b8:	08 95       	ret

000000ba <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  ba:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	89 bf       	out	0x39, r24	; 57
	sei();
  c4:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  c6:	80 ea       	ldi	r24, 0xA0	; 160
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	99 bd       	out	0x29, r25	; 41
  cc:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  ce:	1d bc       	out	0x2d, r1	; 45
  d0:	1c bc       	out	0x2c, r1	; 44

}
  d2:	08 95       	ret

000000d4 <ledOFF>:
}



void ledOFF(){
	PORTB = 0x00;
  d4:	18 ba       	out	0x18, r1	; 24
}
  d6:	08 95       	ret

000000d8 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  d8:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  de:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  e0:	24 b1       	in	r18, 0x04	; 4
  e2:	35 b1       	in	r19, 0x05	; 5
}
  e4:	c9 01       	movw	r24, r18
  e6:	08 95       	ret

000000e8 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
  e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
  ec:	9c 01       	movw	r18, r24
  ee:	90 93 79 01 	sts	0x0179, r25
  f2:	80 93 78 01 	sts	0x0178, r24
		if (adc_value > 30){
  f6:	8f 31       	cpi	r24, 0x1F	; 31
  f8:	91 05       	cpc	r25, r1
  fa:	28 f1       	brcs	.+74     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
 100:	2d 33       	cpi	r18, 0x3D	; 61
 102:	31 05       	cpc	r19, r1
 104:	00 f1       	brcs	.+64     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
 10a:	2b 35       	cpi	r18, 0x5B	; 91
 10c:	31 05       	cpc	r19, r1
 10e:	d8 f0       	brcs	.+54     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
 114:	29 37       	cpi	r18, 0x79	; 121
 116:	31 05       	cpc	r19, r1
 118:	b0 f0       	brcs	.+44     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
 11e:	27 39       	cpi	r18, 0x97	; 151
 120:	31 05       	cpc	r19, r1
 122:	88 f0       	brcs	.+34     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
 128:	25 3b       	cpi	r18, 0xB5	; 181
 12a:	31 05       	cpc	r19, r1
 12c:	60 f0       	brcs	.+24     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
 132:	23 3d       	cpi	r18, 0xD3	; 211
 134:	31 05       	cpc	r19, r1
 136:	38 f0       	brcs	.+14     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
 13c:	21 3f       	cpi	r18, 0xF1	; 241
 13e:	31 05       	cpc	r19, r1
 140:	10 f0       	brcs	.+4      	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
 146:	20 3f       	cpi	r18, 0xF0	; 240
 148:	31 05       	cpc	r19, r1
 14a:	10 f0       	brcs	.+4      	; 0x150 <analogLEDTest+0x68>
			PORTB = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret

00000152 <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while((PINA & 0x02) && !(UCSRA & (1 << UDRE)) ) ;
 152:	c9 9b       	sbis	0x19, 1	; 25
 154:	02 c0       	rjmp	.+4      	; 0x15a <midi_Transmit+0x8>
 156:	5d 9b       	sbis	0x0b, 5	; 11
 158:	fc cf       	rjmp	.-8      	; 0x152 <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 15a:	8c b9       	out	0x0c, r24	; 12
}
 15c:	08 95       	ret

0000015e <midiTransitTest>:
	start_addr = 0;
	
}

void midiTransitTest(){
	midi_Transmit(144);
 15e:	80 e9       	ldi	r24, 0x90	; 144
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(67);
 166:	83 e4       	ldi	r24, 0x43	; 67
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 176:	88 e8       	ldi	r24, 0x88	; 136
 178:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	24 e6       	ldi	r18, 0x64	; 100
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	f9 01       	movw	r30, r18
 180:	31 97       	sbiw	r30, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 184:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 186:	d9 f7       	brne	.-10     	; 0x17e <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(67);
 190:	83 e4       	ldi	r24, 0x43	; 67
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 198:	84 e6       	ldi	r24, 0x64	; 100
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 1a0:	88 e8       	ldi	r24, 0x88	; 136
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	24 e6       	ldi	r18, 0x64	; 100
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	f9 01       	movw	r30, r18
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b0:	d9 f7       	brne	.-10     	; 0x1a8 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
 1b2:	80 e9       	ldi	r24, 0x90	; 144
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(98);
 1ba:	82 e6       	ldi	r24, 0x62	; 98
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 1c2:	84 e6       	ldi	r24, 0x64	; 100
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 1ca:	88 e8       	ldi	r24, 0x88	; 136
 1cc:	93 e1       	ldi	r25, 0x13	; 19
 1ce:	24 e6       	ldi	r18, 0x64	; 100
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	d9 f7       	brne	.-10     	; 0x1d2 <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(98);
 1e4:	82 e6       	ldi	r24, 0x62	; 98
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 1ec:	84 e6       	ldi	r24, 0x64	; 100
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 1f4:	88 e8       	ldi	r24, 0x88	; 136
 1f6:	93 e1       	ldi	r25, 0x13	; 19
 1f8:	24 e6       	ldi	r18, 0x64	; 100
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	f9 01       	movw	r30, r18
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 202:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 204:	d9 f7       	brne	.-10     	; 0x1fc <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
 206:	80 e9       	ldi	r24, 0x90	; 144
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(60);
 20e:	8c e3       	ldi	r24, 0x3C	; 60
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 216:	84 e6       	ldi	r24, 0x64	; 100
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 21e:	88 e8       	ldi	r24, 0x88	; 136
 220:	93 e1       	ldi	r25, 0x13	; 19
 222:	24 e6       	ldi	r18, 0x64	; 100
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	f9 01       	movw	r30, r18
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 22c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22e:	d9 f7       	brne	.-10     	; 0x226 <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(60);
 238:	8c e3       	ldi	r24, 0x3C	; 60
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 240:	84 e6       	ldi	r24, 0x64	; 100
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 248:	88 e8       	ldi	r24, 0x88	; 136
 24a:	93 e1       	ldi	r25, 0x13	; 19
 24c:	24 e6       	ldi	r18, 0x64	; 100
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	f9 01       	movw	r30, r18
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 256:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 258:	d9 f7       	brne	.-10     	; 0x250 <midiTransitTest+0xf2>
	_delay_ms(500);

}
 25a:	08 95       	ret

0000025c <playSongMod>:
	}
	start_addr = 0;
	
}

void playSongMod(){
 25c:	cf 92       	push	r12
 25e:	df 92       	push	r13
 260:	ef 92       	push	r14
 262:	ff 92       	push	r15
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	8b c0       	rjmp	.+278    	; 0x384 <playSongMod+0x128>
	
	while(start_addr < stop_addr){
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
	}
	start_addr = 0;
	
}

void playSongMod(){
 272:	c9 01       	movw	r24, r18
 274:	84 0f       	add	r24, r20
 276:	95 1f       	adc	r25, r21
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 278:	e1 99       	sbic	0x1c, 1	; 28
 27a:	fe cf       	rjmp	.-4      	; 0x278 <playSongMod+0x1c>
	/* Set up address register */
	EEAR = uiAddress;
 27c:	9f bb       	out	0x1f, r25	; 31
 27e:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 280:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 282:	8d b3       	in	r24, 0x1d	; 29
	while(start_addr < stop_addr){
		

		for(int i = 0; i < 5; i++){

			midiData[i] = EEPROM_read(start_addr);
 284:	f9 01       	movw	r30, r18
 286:	e6 58       	subi	r30, 0x86	; 134
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	80 83       	st	Z, r24
			start_addr++;
			if(i==4){
 28c:	24 30       	cpi	r18, 0x04	; 4
 28e:	31 05       	cpc	r19, r1
 290:	11 f4       	brne	.+4      	; 0x296 <playSongMod+0x3a>
				TCNT1 = 0;
 292:	1d bc       	out	0x2d, r1	; 45
 294:	1c bc       	out	0x2c, r1	; 44
void playSongMod(){
	
	while(start_addr < stop_addr){
		

		for(int i = 0; i < 5; i++){
 296:	2f 5f       	subi	r18, 0xFF	; 255
 298:	3f 4f       	sbci	r19, 0xFF	; 255
 29a:	25 30       	cpi	r18, 0x05	; 5
 29c:	31 05       	cpc	r19, r1
 29e:	49 f7       	brne	.-46     	; 0x272 <playSongMod+0x16>
 2a0:	4b 5f       	subi	r20, 0xFB	; 251
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255
 2a4:	50 93 75 01 	sts	0x0175, r21
 2a8:	40 93 74 01 	sts	0x0174, r20
			}
		}

		uint16_t lsb = midiData[3];
		uint16_t msb = midiData[4];
		uint16_t timeInterval = lsb + (0xFF00 & (msb << 8) );
 2ac:	d0 91 7e 01 	lds	r29, 0x017E
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	80 91 7d 01 	lds	r24, 0x017D
 2b6:	6e 01       	movw	r12, r28
 2b8:	c8 0e       	add	r12, r24
 2ba:	d1 1c       	adc	r13, r1
		float speedMod;
		if(ReadADC() > 0 && ReadADC() < 180){
 2bc:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2c0:	89 2b       	or	r24, r25
 2c2:	81 f0       	breq	.+32     	; 0x2e4 <playSongMod+0x88>
 2c4:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2c8:	84 3b       	cpi	r24, 0xB4	; 180
 2ca:	91 05       	cpc	r25, r1
 2cc:	58 f4       	brcc	.+22     	; 0x2e4 <playSongMod+0x88>
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ef 2e       	mov	r14, r31
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ff 2e       	mov	r15, r31
 2d8:	f0 e4       	ldi	r31, 0x40	; 64
 2da:	0f 2f       	mov	r16, r31
 2dc:	f0 e4       	ldi	r31, 0x40	; 64
 2de:	1f 2f       	mov	r17, r31
 2e0:	f0 2d       	mov	r31, r0
 2e2:	1f c0       	rjmp	.+62     	; 0x322 <playSongMod+0xc6>
			speedMod = 3;
		}else if(ReadADC() > 180 && ReadADC() < 240){
 2e4:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2e8:	85 3b       	cpi	r24, 0xB5	; 181
 2ea:	91 05       	cpc	r25, r1
 2ec:	80 f0       	brcs	.+32     	; 0x30e <playSongMod+0xb2>
 2ee:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2f2:	80 3f       	cpi	r24, 0xF0	; 240
 2f4:	91 05       	cpc	r25, r1
 2f6:	58 f4       	brcc	.+22     	; 0x30e <playSongMod+0xb2>
 2f8:	0f 2e       	mov	r0, r31
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ef 2e       	mov	r14, r31
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	ff 2e       	mov	r15, r31
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	0f 2f       	mov	r16, r31
 306:	ff e3       	ldi	r31, 0x3F	; 63
 308:	1f 2f       	mov	r17, r31
 30a:	f0 2d       	mov	r31, r0
 30c:	0a c0       	rjmp	.+20     	; 0x322 <playSongMod+0xc6>
 30e:	0f 2e       	mov	r0, r31
 310:	fd ec       	ldi	r31, 0xCD	; 205
 312:	ef 2e       	mov	r14, r31
 314:	fc ec       	ldi	r31, 0xCC	; 204
 316:	ff 2e       	mov	r15, r31
 318:	fc ec       	ldi	r31, 0xCC	; 204
 31a:	0f 2f       	mov	r16, r31
 31c:	fd e3       	ldi	r31, 0x3D	; 61
 31e:	1f 2f       	mov	r17, r31
 320:	f0 2d       	mov	r31, r0
		}
		else{
			speedMod = .1;
		}

		if(start_addr != 5){
 322:	80 91 74 01 	lds	r24, 0x0174
 326:	90 91 75 01 	lds	r25, 0x0175
 32a:	05 97       	sbiw	r24, 0x05	; 5
 32c:	b9 f0       	breq	.+46     	; 0x35c <playSongMod+0x100>
			while(TCNT1 < timeInterval*speedMod);
 32e:	b6 01       	movw	r22, r12
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 338:	a8 01       	movw	r20, r16
 33a:	97 01       	movw	r18, r14
 33c:	0e 94 bc 03 	call	0x778	; 0x778 <__mulsf3>
 340:	7b 01       	movw	r14, r22
 342:	8c 01       	movw	r16, r24
 344:	6c b5       	in	r22, 0x2c	; 44
 346:	7d b5       	in	r23, 0x2d	; 45
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__floatunsisf>
 350:	a8 01       	movw	r20, r16
 352:	97 01       	movw	r18, r14
 354:	0e 94 b6 04 	call	0x96c	; 0x96c <__ltsf2>
 358:	87 fd       	sbrc	r24, 7
 35a:	f4 cf       	rjmp	.-24     	; 0x344 <playSongMod+0xe8>
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
		}


		
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 360:	f8 01       	movw	r30, r16
 362:	e6 58       	subi	r30, 0x86	; 134
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	80 81       	ld	r24, Z
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
			if(i==1){
 36e:	01 30       	cpi	r16, 0x01	; 1
 370:	11 05       	cpc	r17, r1
 372:	19 f4       	brne	.+6      	; 0x37a <playSongMod+0x11e>
				PORTB = midiData[i];
 374:	80 91 7b 01 	lds	r24, 0x017B
 378:	88 bb       	out	0x18, r24	; 24
			while(TCNT1 < timeInterval*speedMod);
		}


		
		for(int i = 0; i < 3; i++){
 37a:	0f 5f       	subi	r16, 0xFF	; 255
 37c:	1f 4f       	sbci	r17, 0xFF	; 255
 37e:	03 30       	cpi	r16, 0x03	; 3
 380:	11 05       	cpc	r17, r1
 382:	71 f7       	brne	.-36     	; 0x360 <playSongMod+0x104>
	
}

void playSongMod(){
	
	while(start_addr < stop_addr){
 384:	40 91 74 01 	lds	r20, 0x0174
 388:	50 91 75 01 	lds	r21, 0x0175
 38c:	80 91 76 01 	lds	r24, 0x0176
 390:	90 91 77 01 	lds	r25, 0x0177
 394:	48 17       	cp	r20, r24
 396:	59 07       	cpc	r21, r25
 398:	08 f4       	brcc	.+2      	; 0x39c <playSongMod+0x140>
 39a:	69 cf       	rjmp	.-302    	; 0x26e <playSongMod+0x12>
			if(i==1){
				PORTB = midiData[i];
			}
		}
	}
	start_addr = 0;
 39c:	10 92 75 01 	sts	0x0175, r1
 3a0:	10 92 74 01 	sts	0x0174, r1
	
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	ff 90       	pop	r15
 3ae:	ef 90       	pop	r14
 3b0:	df 90       	pop	r13
 3b2:	cf 90       	pop	r12
 3b4:	08 95       	ret

000003b6 <modify>:
	playSong();
}


void modify(){
	playSongMod();
 3b6:	0e 94 2e 01 	call	0x25c	; 0x25c <playSongMod>
}
 3ba:	08 95       	ret

000003bc <playSong>:
	}
	
	
}

void playSong(){
 3bc:	0f 93       	push	r16
 3be:	1f 93       	push	r17
 3c0:	cf 93       	push	r28
 3c2:	df 93       	push	r29
 3c4:	42 c0       	rjmp	.+132    	; 0x44a <playSong+0x8e>
	
	while(start_addr < stop_addr && (PINA & 0x02) ){
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	
}

void playSong(){
 3ca:	ca 01       	movw	r24, r20
 3cc:	82 0f       	add	r24, r18
 3ce:	93 1f       	adc	r25, r19
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 3d0:	e1 99       	sbic	0x1c, 1	; 28
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <playSong+0x14>
	/* Set up address register */
	EEAR = uiAddress;
 3d4:	9f bb       	out	0x1f, r25	; 31
 3d6:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 3d8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 3da:	8d b3       	in	r24, 0x1d	; 29
	while(start_addr < stop_addr && (PINA & 0x02) ){
		

		for(int i = 0; i < 5; i++){

			midiData[i] = EEPROM_read(start_addr);
 3dc:	fa 01       	movw	r30, r20
 3de:	e6 58       	subi	r30, 0x86	; 134
 3e0:	fe 4f       	sbci	r31, 0xFE	; 254
 3e2:	80 83       	st	Z, r24
			start_addr++;
			if(i==4){
 3e4:	44 30       	cpi	r20, 0x04	; 4
 3e6:	51 05       	cpc	r21, r1
 3e8:	11 f4       	brne	.+4      	; 0x3ee <playSong+0x32>
				TCNT1 = 0;
 3ea:	1d bc       	out	0x2d, r1	; 45
 3ec:	1c bc       	out	0x2c, r1	; 44
void playSong(){
	
	while(start_addr < stop_addr && (PINA & 0x02) ){
		

		for(int i = 0; i < 5; i++){
 3ee:	4f 5f       	subi	r20, 0xFF	; 255
 3f0:	5f 4f       	sbci	r21, 0xFF	; 255
 3f2:	45 30       	cpi	r20, 0x05	; 5
 3f4:	51 05       	cpc	r21, r1
 3f6:	49 f7       	brne	.-46     	; 0x3ca <playSong+0xe>
 3f8:	2b 5f       	subi	r18, 0xFB	; 251
 3fa:	3f 4f       	sbci	r19, 0xFF	; 255
 3fc:	30 93 75 01 	sts	0x0175, r19
 400:	20 93 74 01 	sts	0x0174, r18
			}
		}

		uint16_t lsb = midiData[3];
		uint16_t msb = midiData[4];
		uint16_t timeInterval = lsb + (0xFF00 & (msb << 8) );
 404:	10 91 7e 01 	lds	r17, 0x017E
 408:	00 e0       	ldi	r16, 0x00	; 0
 40a:	80 91 7d 01 	lds	r24, 0x017D
 40e:	a8 01       	movw	r20, r16
 410:	48 0f       	add	r20, r24
 412:	51 1d       	adc	r21, r1
		
		if(start_addr != 5){
 414:	25 30       	cpi	r18, 0x05	; 5
 416:	31 05       	cpc	r19, r1
 418:	29 f0       	breq	.+10     	; 0x424 <playSong+0x68>
			while(TCNT1 < timeInterval);
 41a:	8c b5       	in	r24, 0x2c	; 44
 41c:	9d b5       	in	r25, 0x2d	; 45
 41e:	84 17       	cp	r24, r20
 420:	95 07       	cpc	r25, r21
 422:	d8 f3       	brcs	.-10     	; 0x41a <playSong+0x5e>
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 428:	fe 01       	movw	r30, r28
 42a:	e6 58       	subi	r30, 0x86	; 134
 42c:	fe 4f       	sbci	r31, 0xFE	; 254
 42e:	80 81       	ld	r24, Z
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
			if(i==1){
 436:	c1 30       	cpi	r28, 0x01	; 1
 438:	d1 05       	cpc	r29, r1
 43a:	19 f4       	brne	.+6      	; 0x442 <playSong+0x86>
				PORTB = midiData[i];
 43c:	80 91 7b 01 	lds	r24, 0x017B
 440:	88 bb       	out	0x18, r24	; 24
		
		if(start_addr != 5){
			while(TCNT1 < timeInterval);
		}
		
		for(int i = 0; i < 3; i++){
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	c3 30       	cpi	r28, 0x03	; 3
 446:	d1 05       	cpc	r29, r1
 448:	79 f7       	brne	.-34     	; 0x428 <playSong+0x6c>
	
}

void playSong(){
	
	while(start_addr < stop_addr && (PINA & 0x02) ){
 44a:	20 91 74 01 	lds	r18, 0x0174
 44e:	30 91 75 01 	lds	r19, 0x0175
 452:	80 91 76 01 	lds	r24, 0x0176
 456:	90 91 77 01 	lds	r25, 0x0177
 45a:	28 17       	cp	r18, r24
 45c:	39 07       	cpc	r19, r25
 45e:	10 f4       	brcc	.+4      	; 0x464 <playSong+0xa8>
 460:	c9 99       	sbic	0x19, 1	; 25
 462:	b1 cf       	rjmp	.-158    	; 0x3c6 <playSong+0xa>
				PORTB = midiData[i];
			}		
		}
		
	}
	start_addr = 0;
 464:	10 92 75 01 	sts	0x0175, r1
 468:	10 92 74 01 	sts	0x0174, r1
	
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <playBack>:
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 476:	0e 94 de 01 	call	0x3bc	; 0x3bc <playSong>
}
 47a:	08 95       	ret

0000047c <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 47c:	ca 9b       	sbis	0x19, 2	; 25
 47e:	02 c0       	rjmp	.+4      	; 0x484 <midi_Receive+0x8>
 480:	5f 9b       	sbis	0x0b, 7	; 11
 482:	fc cf       	rjmp	.-8      	; 0x47c <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 484:	8c b1       	in	r24, 0x0c	; 12
}
 486:	08 95       	ret

00000488 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 488:	01 c0       	rjmp	.+2      	; 0x48c <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 48a:	8c b1       	in	r24, 0x0c	; 12
 48c:	5f 99       	sbic	0x0b, 7	; 11
 48e:	fd cf       	rjmp	.-6      	; 0x48a <midi_Flush+0x2>
}
 490:	08 95       	ret

00000492 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 492:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 494:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 496:	08 95       	ret

00000498 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 498:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 49a:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 49c:	8c b5       	in	r24, 0x2c	; 44
 49e:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 4a0:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 4a2:	08 95       	ret

000004a4 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 4a4:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 4a6:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 4a8:	9d bd       	out	0x2d, r25	; 45
 4aa:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 4ac:	2f bf       	out	0x3f, r18	; 63
}
 4ae:	08 95       	ret

000004b0 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 4b0:	e1 99       	sbic	0x1c, 1	; 28
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 4b4:	9f bb       	out	0x1f, r25	; 31
 4b6:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 4b8:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 4ba:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 4bc:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 4be:	08 95       	ret

000004c0 <writeSong2>:
	PORTB = EEPROM_read(9);
	_delay_ms(500);
}


void writeSong2(){
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 4c8:	ca 9b       	sbis	0x19, 2	; 25
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <writeSong2+0x10>
 4cc:	5f 9b       	sbis	0x0b, 7	; 11
 4ce:	fc cf       	rjmp	.-8      	; 0x4c8 <writeSong2+0x8>

	/* get and return data from buffer */
	return UDR;
 4d0:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 4d2:	f9 01       	movw	r30, r18
 4d4:	e6 58       	subi	r30, 0x86	; 134
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	80 83       	st	Z, r24
		if(i==0){
 4da:	21 15       	cp	r18, r1
 4dc:	31 05       	cpc	r19, r1
 4de:	39 f4       	brne	.+14     	; 0x4ee <writeSong2+0x2e>
			 lsb = TCNT1&0xFF;
 4e0:	8c b5       	in	r24, 0x2c	; 44
 4e2:	9d b5       	in	r25, 0x2d	; 45
 4e4:	48 2f       	mov	r20, r24
			 msb = (TCNT1>>8);
 4e6:	8c b5       	in	r24, 0x2c	; 44
 4e8:	9d b5       	in	r25, 0x2d	; 45
			 TCNT1 = 0;
 4ea:	1d bc       	out	0x2d, r1	; 45
 4ec:	1c bc       	out	0x2c, r1	; 44


void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
 4ee:	2f 5f       	subi	r18, 0xFF	; 255
 4f0:	3f 4f       	sbci	r19, 0xFF	; 255
 4f2:	23 30       	cpi	r18, 0x03	; 3
 4f4:	31 05       	cpc	r19, r1
 4f6:	44 f3       	brlt	.-48     	; 0x4c8 <writeSong2+0x8>
			 lsb = TCNT1&0xFF;
			 msb = (TCNT1>>8);
			 TCNT1 = 0;
		}
	}
	midiData[3]= lsb;
 4f8:	40 93 7d 01 	sts	0x017D, r20
	midiData[4]= msb;
 4fc:	90 93 7e 01 	sts	0x017E, r25
	PORTB = midiData[1];
 500:	80 91 7b 01 	lds	r24, 0x017B
 504:	88 bb       	out	0x18, r24	; 24
	// unsigned char lsb = (0xFF & ((interval << 8) >> 8));
	// unsigned char msb = (0xFF & ((interval >> 8)));
	// midiData[3] = lsb;
	// midiData[4] = msb;

	stop_addr = eeprom_address;
 506:	80 91 72 01 	lds	r24, 0x0172
 50a:	90 91 73 01 	lds	r25, 0x0173
 50e:	90 93 77 01 	sts	0x0177, r25
 512:	80 93 76 01 	sts	0x0176, r24
 516:	ca e7       	ldi	r28, 0x7A	; 122
 518:	d1 e0       	ldi	r29, 0x01	; 1
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 51a:	80 91 72 01 	lds	r24, 0x0172
 51e:	90 91 73 01 	lds	r25, 0x0173
 522:	69 91       	ld	r22, Y+
 524:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
		eeprom_address++;		
 528:	80 91 72 01 	lds	r24, 0x0172
 52c:	90 91 73 01 	lds	r25, 0x0173
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	90 93 73 01 	sts	0x0173, r25
 536:	80 93 72 01 	sts	0x0172, r24
	// unsigned char msb = (0xFF & ((interval >> 8)));
	// midiData[3] = lsb;
	// midiData[4] = msb;

	stop_addr = eeprom_address;
	for(int j= 0; j < 5; j++){
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	cf 37       	cpi	r28, 0x7F	; 127
 53e:	d8 07       	cpc	r29, r24
 540:	61 f7       	brne	.-40     	; 0x51a <writeSong2+0x5a>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
	
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 548:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeSong2>
	//midiTransitTest();
}
 54c:	08 95       	ret

0000054e <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
 54e:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
 550:	8f ef       	ldi	r24, 0xFF	; 255
 552:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 554:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 556:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 558:	17 e0       	ldi	r17, 0x07	; 7
 55a:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 55c:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 55e:	0e 94 5d 00 	call	0xba	; 0xba <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 562:	87 e4       	ldi	r24, 0x47	; 71
 564:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 566:	87 e8       	ldi	r24, 0x87	; 135
 568:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 56a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 56c:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 56e:	88 e1       	ldi	r24, 0x18	; 24
 570:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 572:	86 e8       	ldi	r24, 0x86	; 134
 574:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
 576:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
 578:	99 b3       	in	r25, 0x19	; 25
 57a:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
 57c:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
 57e:	82 ff       	sbrs	r24, 2
 580:	05 c0       	rjmp	.+10     	; 0x58c <main+0x3e>
 582:	99 23       	and	r25, r25
 584:	69 f4       	brne	.+26     	; 0x5a0 <main+0x52>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 586:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeSong2>
 58a:	f5 cf       	rjmp	.-22     	; 0x576 <main+0x28>
		uint8_t play = PINA & 0x02;
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		} else if(play && !rec){
 58c:	99 23       	and	r25, r25
 58e:	41 f0       	breq	.+16     	; 0x5a0 <main+0x52>
			if (mod){ // Modify Mode
 590:	20 ff       	sbrs	r18, 0
 592:	03 c0       	rjmp	.+6      	; 0x59a <main+0x4c>
	playSong();
}


void modify(){
	playSongMod();
 594:	0e 94 2e 01 	call	0x25c	; 0x25c <playSongMod>
 598:	ee cf       	rjmp	.-36     	; 0x576 <main+0x28>
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 59a:	0e 94 de 01 	call	0x3bc	; 0x3bc <playSong>
 59e:	eb cf       	rjmp	.-42     	; 0x576 <main+0x28>
}



void ledOFF(){
	PORTB = 0x00;
 5a0:	18 ba       	out	0x18, r1	; 24
			}else{
				playBack();
			}	
		} else {
			ledOFF();
			eeprom_address = 0x00;
 5a2:	10 92 73 01 	sts	0x0173, r1
 5a6:	10 92 72 01 	sts	0x0172, r1
 5aa:	01 c0       	rjmp	.+2      	; 0x5ae <main+0x60>
}

/* flushs the buffer of the midi */
void midi_Flush(void){ 
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 5ac:	8c b1       	in	r24, 0x0c	; 12
 5ae:	5f 99       	sbic	0x0b, 7	; 11
 5b0:	fd cf       	rjmp	.-6      	; 0x5ac <main+0x5e>
 5b2:	e1 cf       	rjmp	.-62     	; 0x576 <main+0x28>

000005b4 <eeprom_test>:




void eeprom_test(){
	EEPROM_write(1, 1);
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(2, 2);
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	62 e0       	ldi	r22, 0x02	; 2
 5c4:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(3, 3);
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	63 e0       	ldi	r22, 0x03	; 3
 5ce:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(4, 4);
 5d2:	84 e0       	ldi	r24, 0x04	; 4
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	64 e0       	ldi	r22, 0x04	; 4
 5d8:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(5, 5);
 5dc:	85 e0       	ldi	r24, 0x05	; 5
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	65 e0       	ldi	r22, 0x05	; 5
 5e2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(6, 6);
 5e6:	86 e0       	ldi	r24, 0x06	; 6
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	66 e0       	ldi	r22, 0x06	; 6
 5ec:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(7, 7);
 5f0:	87 e0       	ldi	r24, 0x07	; 7
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	67 e0       	ldi	r22, 0x07	; 7
 5f6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(8, 8);
 5fa:	88 e0       	ldi	r24, 0x08	; 8
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	68 e0       	ldi	r22, 0x08	; 8
 600:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	EEPROM_write(9, 9);
 604:	89 e0       	ldi	r24, 0x09	; 9
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	69 e0       	ldi	r22, 0x09	; 9
 60a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_write>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 60e:	e1 99       	sbic	0x1c, 1	; 28
 610:	fe cf       	rjmp	.-4      	; 0x60e <eeprom_test+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	9f bb       	out	0x1f, r25	; 31
 618:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 61a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 61c:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(5, 5);
	EEPROM_write(6, 6);
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
 61e:	88 bb       	out	0x18, r24	; 24
 620:	88 e8       	ldi	r24, 0x88	; 136
 622:	93 e1       	ldi	r25, 0x13	; 19
 624:	24 e6       	ldi	r18, 0x64	; 100
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	f9 01       	movw	r30, r18
 62a:	31 97       	sbiw	r30, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <eeprom_test+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 62e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 630:	d9 f7       	brne	.-10     	; 0x628 <eeprom_test+0x74>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 632:	e1 99       	sbic	0x1c, 1	; 28
 634:	fe cf       	rjmp	.-4      	; 0x632 <eeprom_test+0x7e>
	/* Set up address register */
	EEAR = uiAddress;
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	9f bb       	out	0x1f, r25	; 31
 63c:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 63e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 640:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
 642:	88 bb       	out	0x18, r24	; 24
 644:	88 e8       	ldi	r24, 0x88	; 136
 646:	93 e1       	ldi	r25, 0x13	; 19
 648:	24 e6       	ldi	r18, 0x64	; 100
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	f9 01       	movw	r30, r18
 64e:	31 97       	sbiw	r30, 0x01	; 1
 650:	f1 f7       	brne	.-4      	; 0x64e <eeprom_test+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 652:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 654:	d9 f7       	brne	.-10     	; 0x64c <eeprom_test+0x98>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 656:	e1 99       	sbic	0x1c, 1	; 28
 658:	fe cf       	rjmp	.-4      	; 0x656 <eeprom_test+0xa2>
	/* Set up address register */
	EEAR = uiAddress;
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	9f bb       	out	0x1f, r25	; 31
 660:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 662:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 664:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
 666:	88 bb       	out	0x18, r24	; 24
 668:	88 e8       	ldi	r24, 0x88	; 136
 66a:	93 e1       	ldi	r25, 0x13	; 19
 66c:	24 e6       	ldi	r18, 0x64	; 100
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	f9 01       	movw	r30, r18
 672:	31 97       	sbiw	r30, 0x01	; 1
 674:	f1 f7       	brne	.-4      	; 0x672 <eeprom_test+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 676:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 678:	d9 f7       	brne	.-10     	; 0x670 <eeprom_test+0xbc>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 67a:	e1 99       	sbic	0x1c, 1	; 28
 67c:	fe cf       	rjmp	.-4      	; 0x67a <eeprom_test+0xc6>
	/* Set up address register */
	EEAR = uiAddress;
 67e:	84 e0       	ldi	r24, 0x04	; 4
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	9f bb       	out	0x1f, r25	; 31
 684:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 686:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 688:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
 68a:	88 bb       	out	0x18, r24	; 24
 68c:	88 e8       	ldi	r24, 0x88	; 136
 68e:	93 e1       	ldi	r25, 0x13	; 19
 690:	24 e6       	ldi	r18, 0x64	; 100
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	f9 01       	movw	r30, r18
 696:	31 97       	sbiw	r30, 0x01	; 1
 698:	f1 f7       	brne	.-4      	; 0x696 <eeprom_test+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 69a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 69c:	d9 f7       	brne	.-10     	; 0x694 <eeprom_test+0xe0>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 69e:	e1 99       	sbic	0x1c, 1	; 28
 6a0:	fe cf       	rjmp	.-4      	; 0x69e <eeprom_test+0xea>
	/* Set up address register */
	EEAR = uiAddress;
 6a2:	85 e0       	ldi	r24, 0x05	; 5
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	9f bb       	out	0x1f, r25	; 31
 6a8:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 6aa:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 6ac:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
 6ae:	88 bb       	out	0x18, r24	; 24
 6b0:	88 e8       	ldi	r24, 0x88	; 136
 6b2:	93 e1       	ldi	r25, 0x13	; 19
 6b4:	24 e6       	ldi	r18, 0x64	; 100
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	f9 01       	movw	r30, r18
 6ba:	31 97       	sbiw	r30, 0x01	; 1
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <eeprom_test+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6c0:	d9 f7       	brne	.-10     	; 0x6b8 <eeprom_test+0x104>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 6c2:	e1 99       	sbic	0x1c, 1	; 28
 6c4:	fe cf       	rjmp	.-4      	; 0x6c2 <eeprom_test+0x10e>
	/* Set up address register */
	EEAR = uiAddress;
 6c6:	86 e0       	ldi	r24, 0x06	; 6
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	9f bb       	out	0x1f, r25	; 31
 6cc:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 6ce:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 6d0:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
 6d2:	88 bb       	out	0x18, r24	; 24
 6d4:	88 e8       	ldi	r24, 0x88	; 136
 6d6:	93 e1       	ldi	r25, 0x13	; 19
 6d8:	24 e6       	ldi	r18, 0x64	; 100
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	f9 01       	movw	r30, r18
 6de:	31 97       	sbiw	r30, 0x01	; 1
 6e0:	f1 f7       	brne	.-4      	; 0x6de <eeprom_test+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6e4:	d9 f7       	brne	.-10     	; 0x6dc <eeprom_test+0x128>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 6e6:	e1 99       	sbic	0x1c, 1	; 28
 6e8:	fe cf       	rjmp	.-4      	; 0x6e6 <eeprom_test+0x132>
	/* Set up address register */
	EEAR = uiAddress;
 6ea:	87 e0       	ldi	r24, 0x07	; 7
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	9f bb       	out	0x1f, r25	; 31
 6f0:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 6f2:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 6f4:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
 6f6:	88 bb       	out	0x18, r24	; 24
 6f8:	88 e8       	ldi	r24, 0x88	; 136
 6fa:	93 e1       	ldi	r25, 0x13	; 19
 6fc:	24 e6       	ldi	r18, 0x64	; 100
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	f9 01       	movw	r30, r18
 702:	31 97       	sbiw	r30, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <eeprom_test+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 706:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 708:	d9 f7       	brne	.-10     	; 0x700 <eeprom_test+0x14c>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 70a:	e1 99       	sbic	0x1c, 1	; 28
 70c:	fe cf       	rjmp	.-4      	; 0x70a <eeprom_test+0x156>
	/* Set up address register */
	EEAR = uiAddress;
 70e:	88 e0       	ldi	r24, 0x08	; 8
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	9f bb       	out	0x1f, r25	; 31
 714:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 716:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 718:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
 71a:	88 bb       	out	0x18, r24	; 24
 71c:	88 e8       	ldi	r24, 0x88	; 136
 71e:	93 e1       	ldi	r25, 0x13	; 19
 720:	24 e6       	ldi	r18, 0x64	; 100
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	f9 01       	movw	r30, r18
 726:	31 97       	sbiw	r30, 0x01	; 1
 728:	f1 f7       	brne	.-4      	; 0x726 <eeprom_test+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 72a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 72c:	d9 f7       	brne	.-10     	; 0x724 <eeprom_test+0x170>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 72e:	e1 99       	sbic	0x1c, 1	; 28
 730:	fe cf       	rjmp	.-4      	; 0x72e <eeprom_test+0x17a>
	/* Set up address register */
	EEAR = uiAddress;
 732:	89 e0       	ldi	r24, 0x09	; 9
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	9f bb       	out	0x1f, r25	; 31
 738:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 73a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 73c:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
	_delay_ms(500);
	PORTB = EEPROM_read(9);
 73e:	88 bb       	out	0x18, r24	; 24
 740:	88 e8       	ldi	r24, 0x88	; 136
 742:	93 e1       	ldi	r25, 0x13	; 19
 744:	24 e6       	ldi	r18, 0x64	; 100
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	f9 01       	movw	r30, r18
 74a:	31 97       	sbiw	r30, 0x01	; 1
 74c:	f1 f7       	brne	.-4      	; 0x74a <eeprom_test+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 74e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 750:	d9 f7       	brne	.-10     	; 0x748 <eeprom_test+0x194>
	_delay_ms(500);
}
 752:	08 95       	ret

00000754 <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 754:	e1 99       	sbic	0x1c, 1	; 28
 756:	fe cf       	rjmp	.-4      	; 0x754 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 758:	9f bb       	out	0x1f, r25	; 31
 75a:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 75c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 75e:	8d b3       	in	r24, 0x1d	; 29
}
 760:	08 95       	ret

00000762 <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 762:	1f 92       	push	r1
 764:	0f 92       	push	r0
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	0f 92       	push	r0
 76a:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 76c:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
 76e:	0f 90       	pop	r0
 770:	0f be       	out	0x3f, r0	; 63
 772:	0f 90       	pop	r0
 774:	1f 90       	pop	r1
 776:	18 95       	reti

00000778 <__mulsf3>:
 778:	a0 e2       	ldi	r26, 0x20	; 32
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	e2 ec       	ldi	r30, 0xC2	; 194
 77e:	f3 e0       	ldi	r31, 0x03	; 3
 780:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__prologue_saves__>
 784:	69 83       	std	Y+1, r22	; 0x01
 786:	7a 83       	std	Y+2, r23	; 0x02
 788:	8b 83       	std	Y+3, r24	; 0x03
 78a:	9c 83       	std	Y+4, r25	; 0x04
 78c:	2d 83       	std	Y+5, r18	; 0x05
 78e:	3e 83       	std	Y+6, r19	; 0x06
 790:	4f 83       	std	Y+7, r20	; 0x07
 792:	58 87       	std	Y+8, r21	; 0x08
 794:	ce 01       	movw	r24, r28
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	be 01       	movw	r22, r28
 79a:	67 5f       	subi	r22, 0xF7	; 247
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	0e 94 83 06 	call	0xd06	; 0xd06 <__unpack_f>
 7a2:	ce 01       	movw	r24, r28
 7a4:	05 96       	adiw	r24, 0x05	; 5
 7a6:	be 01       	movw	r22, r28
 7a8:	6f 5e       	subi	r22, 0xEF	; 239
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	0e 94 83 06 	call	0xd06	; 0xd06 <__unpack_f>
 7b0:	99 85       	ldd	r25, Y+9	; 0x09
 7b2:	92 30       	cpi	r25, 0x02	; 2
 7b4:	88 f0       	brcs	.+34     	; 0x7d8 <__mulsf3+0x60>
 7b6:	89 89       	ldd	r24, Y+17	; 0x11
 7b8:	82 30       	cpi	r24, 0x02	; 2
 7ba:	c8 f0       	brcs	.+50     	; 0x7ee <__mulsf3+0x76>
 7bc:	94 30       	cpi	r25, 0x04	; 4
 7be:	19 f4       	brne	.+6      	; 0x7c6 <__mulsf3+0x4e>
 7c0:	82 30       	cpi	r24, 0x02	; 2
 7c2:	51 f4       	brne	.+20     	; 0x7d8 <__mulsf3+0x60>
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <__mulsf3+0x56>
 7c6:	84 30       	cpi	r24, 0x04	; 4
 7c8:	29 f4       	brne	.+10     	; 0x7d4 <__mulsf3+0x5c>
 7ca:	92 30       	cpi	r25, 0x02	; 2
 7cc:	81 f4       	brne	.+32     	; 0x7ee <__mulsf3+0x76>
 7ce:	80 e6       	ldi	r24, 0x60	; 96
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	c6 c0       	rjmp	.+396    	; 0x960 <__stack+0x101>
 7d4:	92 30       	cpi	r25, 0x02	; 2
 7d6:	49 f4       	brne	.+18     	; 0x7ea <__mulsf3+0x72>
 7d8:	20 e0       	ldi	r18, 0x00	; 0
 7da:	9a 85       	ldd	r25, Y+10	; 0x0a
 7dc:	8a 89       	ldd	r24, Y+18	; 0x12
 7de:	98 13       	cpse	r25, r24
 7e0:	21 e0       	ldi	r18, 0x01	; 1
 7e2:	2a 87       	std	Y+10, r18	; 0x0a
 7e4:	ce 01       	movw	r24, r28
 7e6:	09 96       	adiw	r24, 0x09	; 9
 7e8:	bb c0       	rjmp	.+374    	; 0x960 <__stack+0x101>
 7ea:	82 30       	cpi	r24, 0x02	; 2
 7ec:	49 f4       	brne	.+18     	; 0x800 <__mulsf3+0x88>
 7ee:	20 e0       	ldi	r18, 0x00	; 0
 7f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 7f2:	8a 89       	ldd	r24, Y+18	; 0x12
 7f4:	98 13       	cpse	r25, r24
 7f6:	21 e0       	ldi	r18, 0x01	; 1
 7f8:	2a 8b       	std	Y+18, r18	; 0x12
 7fa:	ce 01       	movw	r24, r28
 7fc:	41 96       	adiw	r24, 0x11	; 17
 7fe:	b0 c0       	rjmp	.+352    	; 0x960 <__stack+0x101>
 800:	2d 84       	ldd	r2, Y+13	; 0x0d
 802:	3e 84       	ldd	r3, Y+14	; 0x0e
 804:	4f 84       	ldd	r4, Y+15	; 0x0f
 806:	58 88       	ldd	r5, Y+16	; 0x10
 808:	6d 88       	ldd	r6, Y+21	; 0x15
 80a:	7e 88       	ldd	r7, Y+22	; 0x16
 80c:	8f 88       	ldd	r8, Y+23	; 0x17
 80e:	98 8c       	ldd	r9, Y+24	; 0x18
 810:	ee 24       	eor	r14, r14
 812:	ff 24       	eor	r15, r15
 814:	87 01       	movw	r16, r14
 816:	aa 24       	eor	r10, r10
 818:	bb 24       	eor	r11, r11
 81a:	65 01       	movw	r12, r10
 81c:	40 e0       	ldi	r20, 0x00	; 0
 81e:	50 e0       	ldi	r21, 0x00	; 0
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	e0 e0       	ldi	r30, 0x00	; 0
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	c1 01       	movw	r24, r2
 82a:	81 70       	andi	r24, 0x01	; 1
 82c:	90 70       	andi	r25, 0x00	; 0
 82e:	89 2b       	or	r24, r25
 830:	e9 f0       	breq	.+58     	; 0x86c <__stack+0xd>
 832:	e6 0c       	add	r14, r6
 834:	f7 1c       	adc	r15, r7
 836:	08 1d       	adc	r16, r8
 838:	19 1d       	adc	r17, r9
 83a:	9a 01       	movw	r18, r20
 83c:	ab 01       	movw	r20, r22
 83e:	2a 0d       	add	r18, r10
 840:	3b 1d       	adc	r19, r11
 842:	4c 1d       	adc	r20, r12
 844:	5d 1d       	adc	r21, r13
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	a0 e0       	ldi	r26, 0x00	; 0
 84c:	b0 e0       	ldi	r27, 0x00	; 0
 84e:	e6 14       	cp	r14, r6
 850:	f7 04       	cpc	r15, r7
 852:	08 05       	cpc	r16, r8
 854:	19 05       	cpc	r17, r9
 856:	20 f4       	brcc	.+8      	; 0x860 <__stack+0x1>
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	a0 e0       	ldi	r26, 0x00	; 0
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	ba 01       	movw	r22, r20
 862:	a9 01       	movw	r20, r18
 864:	48 0f       	add	r20, r24
 866:	59 1f       	adc	r21, r25
 868:	6a 1f       	adc	r22, r26
 86a:	7b 1f       	adc	r23, r27
 86c:	aa 0c       	add	r10, r10
 86e:	bb 1c       	adc	r11, r11
 870:	cc 1c       	adc	r12, r12
 872:	dd 1c       	adc	r13, r13
 874:	97 fe       	sbrs	r9, 7
 876:	08 c0       	rjmp	.+16     	; 0x888 <__stack+0x29>
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	a0 e0       	ldi	r26, 0x00	; 0
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	a8 2a       	or	r10, r24
 882:	b9 2a       	or	r11, r25
 884:	ca 2a       	or	r12, r26
 886:	db 2a       	or	r13, r27
 888:	31 96       	adiw	r30, 0x01	; 1
 88a:	e0 32       	cpi	r30, 0x20	; 32
 88c:	f1 05       	cpc	r31, r1
 88e:	49 f0       	breq	.+18     	; 0x8a2 <__stack+0x43>
 890:	66 0c       	add	r6, r6
 892:	77 1c       	adc	r7, r7
 894:	88 1c       	adc	r8, r8
 896:	99 1c       	adc	r9, r9
 898:	56 94       	lsr	r5
 89a:	47 94       	ror	r4
 89c:	37 94       	ror	r3
 89e:	27 94       	ror	r2
 8a0:	c3 cf       	rjmp	.-122    	; 0x828 <__mulsf3+0xb0>
 8a2:	fa 85       	ldd	r31, Y+10	; 0x0a
 8a4:	ea 89       	ldd	r30, Y+18	; 0x12
 8a6:	2b 89       	ldd	r18, Y+19	; 0x13
 8a8:	3c 89       	ldd	r19, Y+20	; 0x14
 8aa:	8b 85       	ldd	r24, Y+11	; 0x0b
 8ac:	9c 85       	ldd	r25, Y+12	; 0x0c
 8ae:	28 0f       	add	r18, r24
 8b0:	39 1f       	adc	r19, r25
 8b2:	2e 5f       	subi	r18, 0xFE	; 254
 8b4:	3f 4f       	sbci	r19, 0xFF	; 255
 8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <__stack+0x87>
 8b8:	ca 01       	movw	r24, r20
 8ba:	81 70       	andi	r24, 0x01	; 1
 8bc:	90 70       	andi	r25, 0x00	; 0
 8be:	89 2b       	or	r24, r25
 8c0:	61 f0       	breq	.+24     	; 0x8da <__stack+0x7b>
 8c2:	16 95       	lsr	r17
 8c4:	07 95       	ror	r16
 8c6:	f7 94       	ror	r15
 8c8:	e7 94       	ror	r14
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	a0 e0       	ldi	r26, 0x00	; 0
 8d0:	b0 e8       	ldi	r27, 0x80	; 128
 8d2:	e8 2a       	or	r14, r24
 8d4:	f9 2a       	or	r15, r25
 8d6:	0a 2b       	or	r16, r26
 8d8:	1b 2b       	or	r17, r27
 8da:	76 95       	lsr	r23
 8dc:	67 95       	ror	r22
 8de:	57 95       	ror	r21
 8e0:	47 95       	ror	r20
 8e2:	2f 5f       	subi	r18, 0xFF	; 255
 8e4:	3f 4f       	sbci	r19, 0xFF	; 255
 8e6:	77 fd       	sbrc	r23, 7
 8e8:	e7 cf       	rjmp	.-50     	; 0x8b8 <__stack+0x59>
 8ea:	0c c0       	rjmp	.+24     	; 0x904 <__stack+0xa5>
 8ec:	44 0f       	add	r20, r20
 8ee:	55 1f       	adc	r21, r21
 8f0:	66 1f       	adc	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	17 fd       	sbrc	r17, 7
 8f6:	41 60       	ori	r20, 0x01	; 1
 8f8:	ee 0c       	add	r14, r14
 8fa:	ff 1c       	adc	r15, r15
 8fc:	00 1f       	adc	r16, r16
 8fe:	11 1f       	adc	r17, r17
 900:	21 50       	subi	r18, 0x01	; 1
 902:	30 40       	sbci	r19, 0x00	; 0
 904:	40 30       	cpi	r20, 0x00	; 0
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	59 07       	cpc	r21, r25
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	69 07       	cpc	r22, r25
 90e:	90 e4       	ldi	r25, 0x40	; 64
 910:	79 07       	cpc	r23, r25
 912:	60 f3       	brcs	.-40     	; 0x8ec <__stack+0x8d>
 914:	2b 8f       	std	Y+27, r18	; 0x1b
 916:	3c 8f       	std	Y+28, r19	; 0x1c
 918:	db 01       	movw	r26, r22
 91a:	ca 01       	movw	r24, r20
 91c:	8f 77       	andi	r24, 0x7F	; 127
 91e:	90 70       	andi	r25, 0x00	; 0
 920:	a0 70       	andi	r26, 0x00	; 0
 922:	b0 70       	andi	r27, 0x00	; 0
 924:	80 34       	cpi	r24, 0x40	; 64
 926:	91 05       	cpc	r25, r1
 928:	a1 05       	cpc	r26, r1
 92a:	b1 05       	cpc	r27, r1
 92c:	61 f4       	brne	.+24     	; 0x946 <__stack+0xe7>
 92e:	47 fd       	sbrc	r20, 7
 930:	0a c0       	rjmp	.+20     	; 0x946 <__stack+0xe7>
 932:	e1 14       	cp	r14, r1
 934:	f1 04       	cpc	r15, r1
 936:	01 05       	cpc	r16, r1
 938:	11 05       	cpc	r17, r1
 93a:	29 f0       	breq	.+10     	; 0x946 <__stack+0xe7>
 93c:	40 5c       	subi	r20, 0xC0	; 192
 93e:	5f 4f       	sbci	r21, 0xFF	; 255
 940:	6f 4f       	sbci	r22, 0xFF	; 255
 942:	7f 4f       	sbci	r23, 0xFF	; 255
 944:	40 78       	andi	r20, 0x80	; 128
 946:	1a 8e       	std	Y+26, r1	; 0x1a
 948:	fe 17       	cp	r31, r30
 94a:	11 f0       	breq	.+4      	; 0x950 <__stack+0xf1>
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	8a 8f       	std	Y+26, r24	; 0x1a
 950:	4d 8f       	std	Y+29, r20	; 0x1d
 952:	5e 8f       	std	Y+30, r21	; 0x1e
 954:	6f 8f       	std	Y+31, r22	; 0x1f
 956:	78 a3       	std	Y+32, r23	; 0x20
 958:	83 e0       	ldi	r24, 0x03	; 3
 95a:	89 8f       	std	Y+25, r24	; 0x19
 95c:	ce 01       	movw	r24, r28
 95e:	49 96       	adiw	r24, 0x19	; 25
 960:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__pack_f>
 964:	a0 96       	adiw	r28, 0x20	; 32
 966:	e2 e1       	ldi	r30, 0x12	; 18
 968:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__epilogue_restores__>

0000096c <__ltsf2>:
 96c:	a8 e1       	ldi	r26, 0x18	; 24
 96e:	b0 e0       	ldi	r27, 0x00	; 0
 970:	ec eb       	ldi	r30, 0xBC	; 188
 972:	f4 e0       	ldi	r31, 0x04	; 4
 974:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__prologue_saves__+0x18>
 978:	69 83       	std	Y+1, r22	; 0x01
 97a:	7a 83       	std	Y+2, r23	; 0x02
 97c:	8b 83       	std	Y+3, r24	; 0x03
 97e:	9c 83       	std	Y+4, r25	; 0x04
 980:	2d 83       	std	Y+5, r18	; 0x05
 982:	3e 83       	std	Y+6, r19	; 0x06
 984:	4f 83       	std	Y+7, r20	; 0x07
 986:	58 87       	std	Y+8, r21	; 0x08
 988:	89 e0       	ldi	r24, 0x09	; 9
 98a:	e8 2e       	mov	r14, r24
 98c:	f1 2c       	mov	r15, r1
 98e:	ec 0e       	add	r14, r28
 990:	fd 1e       	adc	r15, r29
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	b7 01       	movw	r22, r14
 998:	0e 94 83 06 	call	0xd06	; 0xd06 <__unpack_f>
 99c:	8e 01       	movw	r16, r28
 99e:	0f 5e       	subi	r16, 0xEF	; 239
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	ce 01       	movw	r24, r28
 9a4:	05 96       	adiw	r24, 0x05	; 5
 9a6:	b8 01       	movw	r22, r16
 9a8:	0e 94 83 06 	call	0xd06	; 0xd06 <__unpack_f>
 9ac:	89 85       	ldd	r24, Y+9	; 0x09
 9ae:	82 30       	cpi	r24, 0x02	; 2
 9b0:	40 f0       	brcs	.+16     	; 0x9c2 <__ltsf2+0x56>
 9b2:	89 89       	ldd	r24, Y+17	; 0x11
 9b4:	82 30       	cpi	r24, 0x02	; 2
 9b6:	28 f0       	brcs	.+10     	; 0x9c2 <__ltsf2+0x56>
 9b8:	c7 01       	movw	r24, r14
 9ba:	b8 01       	movw	r22, r16
 9bc:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <__fpcmp_parts_f>
 9c0:	01 c0       	rjmp	.+2      	; 0x9c4 <__ltsf2+0x58>
 9c2:	81 e0       	ldi	r24, 0x01	; 1
 9c4:	68 96       	adiw	r28, 0x18	; 24
 9c6:	e6 e0       	ldi	r30, 0x06	; 6
 9c8:	0c 94 7c 07 	jmp	0xef8	; 0xef8 <__epilogue_restores__+0x18>

000009cc <__floatunsisf>:
 9cc:	a8 e0       	ldi	r26, 0x08	; 8
 9ce:	b0 e0       	ldi	r27, 0x00	; 0
 9d0:	ec ee       	ldi	r30, 0xEC	; 236
 9d2:	f4 e0       	ldi	r31, 0x04	; 4
 9d4:	0c 94 5c 07 	jmp	0xeb8	; 0xeb8 <__prologue_saves__+0x10>
 9d8:	7b 01       	movw	r14, r22
 9da:	8c 01       	movw	r16, r24
 9dc:	61 15       	cp	r22, r1
 9de:	71 05       	cpc	r23, r1
 9e0:	81 05       	cpc	r24, r1
 9e2:	91 05       	cpc	r25, r1
 9e4:	19 f4       	brne	.+6      	; 0x9ec <__floatunsisf+0x20>
 9e6:	82 e0       	ldi	r24, 0x02	; 2
 9e8:	89 83       	std	Y+1, r24	; 0x01
 9ea:	60 c0       	rjmp	.+192    	; 0xaac <__floatunsisf+0xe0>
 9ec:	83 e0       	ldi	r24, 0x03	; 3
 9ee:	89 83       	std	Y+1, r24	; 0x01
 9f0:	8e e1       	ldi	r24, 0x1E	; 30
 9f2:	c8 2e       	mov	r12, r24
 9f4:	d1 2c       	mov	r13, r1
 9f6:	dc 82       	std	Y+4, r13	; 0x04
 9f8:	cb 82       	std	Y+3, r12	; 0x03
 9fa:	ed 82       	std	Y+5, r14	; 0x05
 9fc:	fe 82       	std	Y+6, r15	; 0x06
 9fe:	0f 83       	std	Y+7, r16	; 0x07
 a00:	18 87       	std	Y+8, r17	; 0x08
 a02:	c8 01       	movw	r24, r16
 a04:	b7 01       	movw	r22, r14
 a06:	0e 94 5f 05 	call	0xabe	; 0xabe <__clzsi2>
 a0a:	fc 01       	movw	r30, r24
 a0c:	31 97       	sbiw	r30, 0x01	; 1
 a0e:	f7 ff       	sbrs	r31, 7
 a10:	3b c0       	rjmp	.+118    	; 0xa88 <__floatunsisf+0xbc>
 a12:	22 27       	eor	r18, r18
 a14:	33 27       	eor	r19, r19
 a16:	2e 1b       	sub	r18, r30
 a18:	3f 0b       	sbc	r19, r31
 a1a:	57 01       	movw	r10, r14
 a1c:	68 01       	movw	r12, r16
 a1e:	02 2e       	mov	r0, r18
 a20:	04 c0       	rjmp	.+8      	; 0xa2a <__floatunsisf+0x5e>
 a22:	d6 94       	lsr	r13
 a24:	c7 94       	ror	r12
 a26:	b7 94       	ror	r11
 a28:	a7 94       	ror	r10
 a2a:	0a 94       	dec	r0
 a2c:	d2 f7       	brpl	.-12     	; 0xa22 <__floatunsisf+0x56>
 a2e:	40 e0       	ldi	r20, 0x00	; 0
 a30:	50 e0       	ldi	r21, 0x00	; 0
 a32:	60 e0       	ldi	r22, 0x00	; 0
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	81 e0       	ldi	r24, 0x01	; 1
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	a0 e0       	ldi	r26, 0x00	; 0
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__floatunsisf+0x7c>
 a40:	88 0f       	add	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	aa 1f       	adc	r26, r26
 a46:	bb 1f       	adc	r27, r27
 a48:	2a 95       	dec	r18
 a4a:	d2 f7       	brpl	.-12     	; 0xa40 <__floatunsisf+0x74>
 a4c:	01 97       	sbiw	r24, 0x01	; 1
 a4e:	a1 09       	sbc	r26, r1
 a50:	b1 09       	sbc	r27, r1
 a52:	8e 21       	and	r24, r14
 a54:	9f 21       	and	r25, r15
 a56:	a0 23       	and	r26, r16
 a58:	b1 23       	and	r27, r17
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	a1 05       	cpc	r26, r1
 a5e:	b1 05       	cpc	r27, r1
 a60:	21 f0       	breq	.+8      	; 0xa6a <__floatunsisf+0x9e>
 a62:	41 e0       	ldi	r20, 0x01	; 1
 a64:	50 e0       	ldi	r21, 0x00	; 0
 a66:	60 e0       	ldi	r22, 0x00	; 0
 a68:	70 e0       	ldi	r23, 0x00	; 0
 a6a:	4a 29       	or	r20, r10
 a6c:	5b 29       	or	r21, r11
 a6e:	6c 29       	or	r22, r12
 a70:	7d 29       	or	r23, r13
 a72:	4d 83       	std	Y+5, r20	; 0x05
 a74:	5e 83       	std	Y+6, r21	; 0x06
 a76:	6f 83       	std	Y+7, r22	; 0x07
 a78:	78 87       	std	Y+8, r23	; 0x08
 a7a:	8e e1       	ldi	r24, 0x1E	; 30
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	8e 1b       	sub	r24, r30
 a80:	9f 0b       	sbc	r25, r31
 a82:	9c 83       	std	Y+4, r25	; 0x04
 a84:	8b 83       	std	Y+3, r24	; 0x03
 a86:	12 c0       	rjmp	.+36     	; 0xaac <__floatunsisf+0xe0>
 a88:	30 97       	sbiw	r30, 0x00	; 0
 a8a:	81 f0       	breq	.+32     	; 0xaac <__floatunsisf+0xe0>
 a8c:	0e 2e       	mov	r0, r30
 a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__floatunsisf+0xcc>
 a90:	ee 0c       	add	r14, r14
 a92:	ff 1c       	adc	r15, r15
 a94:	00 1f       	adc	r16, r16
 a96:	11 1f       	adc	r17, r17
 a98:	0a 94       	dec	r0
 a9a:	d2 f7       	brpl	.-12     	; 0xa90 <__floatunsisf+0xc4>
 a9c:	ed 82       	std	Y+5, r14	; 0x05
 a9e:	fe 82       	std	Y+6, r15	; 0x06
 aa0:	0f 83       	std	Y+7, r16	; 0x07
 aa2:	18 87       	std	Y+8, r17	; 0x08
 aa4:	ce 1a       	sub	r12, r30
 aa6:	df 0a       	sbc	r13, r31
 aa8:	dc 82       	std	Y+4, r13	; 0x04
 aaa:	cb 82       	std	Y+3, r12	; 0x03
 aac:	1a 82       	std	Y+2, r1	; 0x02
 aae:	ce 01       	movw	r24, r28
 ab0:	01 96       	adiw	r24, 0x01	; 1
 ab2:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__pack_f>
 ab6:	28 96       	adiw	r28, 0x08	; 8
 ab8:	ea e0       	ldi	r30, 0x0A	; 10
 aba:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__epilogue_restores__+0x10>

00000abe <__clzsi2>:
 abe:	ef 92       	push	r14
 ac0:	ff 92       	push	r15
 ac2:	0f 93       	push	r16
 ac4:	1f 93       	push	r17
 ac6:	7b 01       	movw	r14, r22
 ac8:	8c 01       	movw	r16, r24
 aca:	80 e0       	ldi	r24, 0x00	; 0
 acc:	e8 16       	cp	r14, r24
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	f8 06       	cpc	r15, r24
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	08 07       	cpc	r16, r24
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	18 07       	cpc	r17, r24
 ada:	88 f4       	brcc	.+34     	; 0xafe <__clzsi2+0x40>
 adc:	8f ef       	ldi	r24, 0xFF	; 255
 ade:	e8 16       	cp	r14, r24
 ae0:	f1 04       	cpc	r15, r1
 ae2:	01 05       	cpc	r16, r1
 ae4:	11 05       	cpc	r17, r1
 ae6:	31 f0       	breq	.+12     	; 0xaf4 <__clzsi2+0x36>
 ae8:	28 f0       	brcs	.+10     	; 0xaf4 <__clzsi2+0x36>
 aea:	88 e0       	ldi	r24, 0x08	; 8
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	a0 e0       	ldi	r26, 0x00	; 0
 af0:	b0 e0       	ldi	r27, 0x00	; 0
 af2:	17 c0       	rjmp	.+46     	; 0xb22 <__clzsi2+0x64>
 af4:	80 e0       	ldi	r24, 0x00	; 0
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	a0 e0       	ldi	r26, 0x00	; 0
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	12 c0       	rjmp	.+36     	; 0xb22 <__clzsi2+0x64>
 afe:	80 e0       	ldi	r24, 0x00	; 0
 b00:	e8 16       	cp	r14, r24
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	f8 06       	cpc	r15, r24
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	08 07       	cpc	r16, r24
 b0a:	81 e0       	ldi	r24, 0x01	; 1
 b0c:	18 07       	cpc	r17, r24
 b0e:	28 f0       	brcs	.+10     	; 0xb1a <__clzsi2+0x5c>
 b10:	88 e1       	ldi	r24, 0x18	; 24
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	a0 e0       	ldi	r26, 0x00	; 0
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x64>
 b1a:	80 e1       	ldi	r24, 0x10	; 16
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	a0 e0       	ldi	r26, 0x00	; 0
 b20:	b0 e0       	ldi	r27, 0x00	; 0
 b22:	20 e2       	ldi	r18, 0x20	; 32
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	40 e0       	ldi	r20, 0x00	; 0
 b28:	50 e0       	ldi	r21, 0x00	; 0
 b2a:	28 1b       	sub	r18, r24
 b2c:	39 0b       	sbc	r19, r25
 b2e:	4a 0b       	sbc	r20, r26
 b30:	5b 0b       	sbc	r21, r27
 b32:	04 c0       	rjmp	.+8      	; 0xb3c <__clzsi2+0x7e>
 b34:	16 95       	lsr	r17
 b36:	07 95       	ror	r16
 b38:	f7 94       	ror	r15
 b3a:	e7 94       	ror	r14
 b3c:	8a 95       	dec	r24
 b3e:	d2 f7       	brpl	.-12     	; 0xb34 <__clzsi2+0x76>
 b40:	f7 01       	movw	r30, r14
 b42:	e8 59       	subi	r30, 0x98	; 152
 b44:	ff 4f       	sbci	r31, 0xFF	; 255
 b46:	80 81       	ld	r24, Z
 b48:	28 1b       	sub	r18, r24
 b4a:	31 09       	sbc	r19, r1
 b4c:	41 09       	sbc	r20, r1
 b4e:	51 09       	sbc	r21, r1
 b50:	c9 01       	movw	r24, r18
 b52:	1f 91       	pop	r17
 b54:	0f 91       	pop	r16
 b56:	ff 90       	pop	r15
 b58:	ef 90       	pop	r14
 b5a:	08 95       	ret

00000b5c <__pack_f>:
 b5c:	df 92       	push	r13
 b5e:	ef 92       	push	r14
 b60:	ff 92       	push	r15
 b62:	0f 93       	push	r16
 b64:	1f 93       	push	r17
 b66:	fc 01       	movw	r30, r24
 b68:	e4 80       	ldd	r14, Z+4	; 0x04
 b6a:	f5 80       	ldd	r15, Z+5	; 0x05
 b6c:	06 81       	ldd	r16, Z+6	; 0x06
 b6e:	17 81       	ldd	r17, Z+7	; 0x07
 b70:	d1 80       	ldd	r13, Z+1	; 0x01
 b72:	80 81       	ld	r24, Z
 b74:	82 30       	cpi	r24, 0x02	; 2
 b76:	48 f4       	brcc	.+18     	; 0xb8a <__pack_f+0x2e>
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	a0 e1       	ldi	r26, 0x10	; 16
 b7e:	b0 e0       	ldi	r27, 0x00	; 0
 b80:	e8 2a       	or	r14, r24
 b82:	f9 2a       	or	r15, r25
 b84:	0a 2b       	or	r16, r26
 b86:	1b 2b       	or	r17, r27
 b88:	a5 c0       	rjmp	.+330    	; 0xcd4 <__pack_f+0x178>
 b8a:	84 30       	cpi	r24, 0x04	; 4
 b8c:	09 f4       	brne	.+2      	; 0xb90 <__pack_f+0x34>
 b8e:	9f c0       	rjmp	.+318    	; 0xcce <__pack_f+0x172>
 b90:	82 30       	cpi	r24, 0x02	; 2
 b92:	21 f4       	brne	.+8      	; 0xb9c <__pack_f+0x40>
 b94:	ee 24       	eor	r14, r14
 b96:	ff 24       	eor	r15, r15
 b98:	87 01       	movw	r16, r14
 b9a:	05 c0       	rjmp	.+10     	; 0xba6 <__pack_f+0x4a>
 b9c:	e1 14       	cp	r14, r1
 b9e:	f1 04       	cpc	r15, r1
 ba0:	01 05       	cpc	r16, r1
 ba2:	11 05       	cpc	r17, r1
 ba4:	19 f4       	brne	.+6      	; 0xbac <__pack_f+0x50>
 ba6:	e0 e0       	ldi	r30, 0x00	; 0
 ba8:	f0 e0       	ldi	r31, 0x00	; 0
 baa:	96 c0       	rjmp	.+300    	; 0xcd8 <__pack_f+0x17c>
 bac:	62 81       	ldd	r22, Z+2	; 0x02
 bae:	73 81       	ldd	r23, Z+3	; 0x03
 bb0:	9f ef       	ldi	r25, 0xFF	; 255
 bb2:	62 38       	cpi	r22, 0x82	; 130
 bb4:	79 07       	cpc	r23, r25
 bb6:	0c f0       	brlt	.+2      	; 0xbba <__pack_f+0x5e>
 bb8:	5b c0       	rjmp	.+182    	; 0xc70 <__pack_f+0x114>
 bba:	22 e8       	ldi	r18, 0x82	; 130
 bbc:	3f ef       	ldi	r19, 0xFF	; 255
 bbe:	26 1b       	sub	r18, r22
 bc0:	37 0b       	sbc	r19, r23
 bc2:	2a 31       	cpi	r18, 0x1A	; 26
 bc4:	31 05       	cpc	r19, r1
 bc6:	2c f0       	brlt	.+10     	; 0xbd2 <__pack_f+0x76>
 bc8:	20 e0       	ldi	r18, 0x00	; 0
 bca:	30 e0       	ldi	r19, 0x00	; 0
 bcc:	40 e0       	ldi	r20, 0x00	; 0
 bce:	50 e0       	ldi	r21, 0x00	; 0
 bd0:	2a c0       	rjmp	.+84     	; 0xc26 <__pack_f+0xca>
 bd2:	b8 01       	movw	r22, r16
 bd4:	a7 01       	movw	r20, r14
 bd6:	02 2e       	mov	r0, r18
 bd8:	04 c0       	rjmp	.+8      	; 0xbe2 <__pack_f+0x86>
 bda:	76 95       	lsr	r23
 bdc:	67 95       	ror	r22
 bde:	57 95       	ror	r21
 be0:	47 95       	ror	r20
 be2:	0a 94       	dec	r0
 be4:	d2 f7       	brpl	.-12     	; 0xbda <__pack_f+0x7e>
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	a0 e0       	ldi	r26, 0x00	; 0
 bec:	b0 e0       	ldi	r27, 0x00	; 0
 bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x9c>
 bf0:	88 0f       	add	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	aa 1f       	adc	r26, r26
 bf6:	bb 1f       	adc	r27, r27
 bf8:	2a 95       	dec	r18
 bfa:	d2 f7       	brpl	.-12     	; 0xbf0 <__pack_f+0x94>
 bfc:	01 97       	sbiw	r24, 0x01	; 1
 bfe:	a1 09       	sbc	r26, r1
 c00:	b1 09       	sbc	r27, r1
 c02:	8e 21       	and	r24, r14
 c04:	9f 21       	and	r25, r15
 c06:	a0 23       	and	r26, r16
 c08:	b1 23       	and	r27, r17
 c0a:	00 97       	sbiw	r24, 0x00	; 0
 c0c:	a1 05       	cpc	r26, r1
 c0e:	b1 05       	cpc	r27, r1
 c10:	21 f0       	breq	.+8      	; 0xc1a <__pack_f+0xbe>
 c12:	81 e0       	ldi	r24, 0x01	; 1
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	a0 e0       	ldi	r26, 0x00	; 0
 c18:	b0 e0       	ldi	r27, 0x00	; 0
 c1a:	9a 01       	movw	r18, r20
 c1c:	ab 01       	movw	r20, r22
 c1e:	28 2b       	or	r18, r24
 c20:	39 2b       	or	r19, r25
 c22:	4a 2b       	or	r20, r26
 c24:	5b 2b       	or	r21, r27
 c26:	da 01       	movw	r26, r20
 c28:	c9 01       	movw	r24, r18
 c2a:	8f 77       	andi	r24, 0x7F	; 127
 c2c:	90 70       	andi	r25, 0x00	; 0
 c2e:	a0 70       	andi	r26, 0x00	; 0
 c30:	b0 70       	andi	r27, 0x00	; 0
 c32:	80 34       	cpi	r24, 0x40	; 64
 c34:	91 05       	cpc	r25, r1
 c36:	a1 05       	cpc	r26, r1
 c38:	b1 05       	cpc	r27, r1
 c3a:	39 f4       	brne	.+14     	; 0xc4a <__pack_f+0xee>
 c3c:	27 ff       	sbrs	r18, 7
 c3e:	09 c0       	rjmp	.+18     	; 0xc52 <__pack_f+0xf6>
 c40:	20 5c       	subi	r18, 0xC0	; 192
 c42:	3f 4f       	sbci	r19, 0xFF	; 255
 c44:	4f 4f       	sbci	r20, 0xFF	; 255
 c46:	5f 4f       	sbci	r21, 0xFF	; 255
 c48:	04 c0       	rjmp	.+8      	; 0xc52 <__pack_f+0xf6>
 c4a:	21 5c       	subi	r18, 0xC1	; 193
 c4c:	3f 4f       	sbci	r19, 0xFF	; 255
 c4e:	4f 4f       	sbci	r20, 0xFF	; 255
 c50:	5f 4f       	sbci	r21, 0xFF	; 255
 c52:	e0 e0       	ldi	r30, 0x00	; 0
 c54:	f0 e0       	ldi	r31, 0x00	; 0
 c56:	20 30       	cpi	r18, 0x00	; 0
 c58:	a0 e0       	ldi	r26, 0x00	; 0
 c5a:	3a 07       	cpc	r19, r26
 c5c:	a0 e0       	ldi	r26, 0x00	; 0
 c5e:	4a 07       	cpc	r20, r26
 c60:	a0 e4       	ldi	r26, 0x40	; 64
 c62:	5a 07       	cpc	r21, r26
 c64:	10 f0       	brcs	.+4      	; 0xc6a <__pack_f+0x10e>
 c66:	e1 e0       	ldi	r30, 0x01	; 1
 c68:	f0 e0       	ldi	r31, 0x00	; 0
 c6a:	79 01       	movw	r14, r18
 c6c:	8a 01       	movw	r16, r20
 c6e:	27 c0       	rjmp	.+78     	; 0xcbe <__pack_f+0x162>
 c70:	60 38       	cpi	r22, 0x80	; 128
 c72:	71 05       	cpc	r23, r1
 c74:	64 f5       	brge	.+88     	; 0xcce <__pack_f+0x172>
 c76:	fb 01       	movw	r30, r22
 c78:	e1 58       	subi	r30, 0x81	; 129
 c7a:	ff 4f       	sbci	r31, 0xFF	; 255
 c7c:	d8 01       	movw	r26, r16
 c7e:	c7 01       	movw	r24, r14
 c80:	8f 77       	andi	r24, 0x7F	; 127
 c82:	90 70       	andi	r25, 0x00	; 0
 c84:	a0 70       	andi	r26, 0x00	; 0
 c86:	b0 70       	andi	r27, 0x00	; 0
 c88:	80 34       	cpi	r24, 0x40	; 64
 c8a:	91 05       	cpc	r25, r1
 c8c:	a1 05       	cpc	r26, r1
 c8e:	b1 05       	cpc	r27, r1
 c90:	39 f4       	brne	.+14     	; 0xca0 <__pack_f+0x144>
 c92:	e7 fe       	sbrs	r14, 7
 c94:	0d c0       	rjmp	.+26     	; 0xcb0 <__pack_f+0x154>
 c96:	80 e4       	ldi	r24, 0x40	; 64
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	a0 e0       	ldi	r26, 0x00	; 0
 c9c:	b0 e0       	ldi	r27, 0x00	; 0
 c9e:	04 c0       	rjmp	.+8      	; 0xca8 <__pack_f+0x14c>
 ca0:	8f e3       	ldi	r24, 0x3F	; 63
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	a0 e0       	ldi	r26, 0x00	; 0
 ca6:	b0 e0       	ldi	r27, 0x00	; 0
 ca8:	e8 0e       	add	r14, r24
 caa:	f9 1e       	adc	r15, r25
 cac:	0a 1f       	adc	r16, r26
 cae:	1b 1f       	adc	r17, r27
 cb0:	17 ff       	sbrs	r17, 7
 cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x162>
 cb4:	16 95       	lsr	r17
 cb6:	07 95       	ror	r16
 cb8:	f7 94       	ror	r15
 cba:	e7 94       	ror	r14
 cbc:	31 96       	adiw	r30, 0x01	; 1
 cbe:	87 e0       	ldi	r24, 0x07	; 7
 cc0:	16 95       	lsr	r17
 cc2:	07 95       	ror	r16
 cc4:	f7 94       	ror	r15
 cc6:	e7 94       	ror	r14
 cc8:	8a 95       	dec	r24
 cca:	d1 f7       	brne	.-12     	; 0xcc0 <__pack_f+0x164>
 ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <__pack_f+0x17c>
 cce:	ee 24       	eor	r14, r14
 cd0:	ff 24       	eor	r15, r15
 cd2:	87 01       	movw	r16, r14
 cd4:	ef ef       	ldi	r30, 0xFF	; 255
 cd6:	f0 e0       	ldi	r31, 0x00	; 0
 cd8:	6e 2f       	mov	r22, r30
 cda:	67 95       	ror	r22
 cdc:	66 27       	eor	r22, r22
 cde:	67 95       	ror	r22
 ce0:	90 2f       	mov	r25, r16
 ce2:	9f 77       	andi	r25, 0x7F	; 127
 ce4:	d7 94       	ror	r13
 ce6:	dd 24       	eor	r13, r13
 ce8:	d7 94       	ror	r13
 cea:	8e 2f       	mov	r24, r30
 cec:	86 95       	lsr	r24
 cee:	49 2f       	mov	r20, r25
 cf0:	46 2b       	or	r20, r22
 cf2:	58 2f       	mov	r21, r24
 cf4:	5d 29       	or	r21, r13
 cf6:	b7 01       	movw	r22, r14
 cf8:	ca 01       	movw	r24, r20
 cfa:	1f 91       	pop	r17
 cfc:	0f 91       	pop	r16
 cfe:	ff 90       	pop	r15
 d00:	ef 90       	pop	r14
 d02:	df 90       	pop	r13
 d04:	08 95       	ret

00000d06 <__unpack_f>:
 d06:	fc 01       	movw	r30, r24
 d08:	db 01       	movw	r26, r22
 d0a:	40 81       	ld	r20, Z
 d0c:	51 81       	ldd	r21, Z+1	; 0x01
 d0e:	22 81       	ldd	r18, Z+2	; 0x02
 d10:	62 2f       	mov	r22, r18
 d12:	6f 77       	andi	r22, 0x7F	; 127
 d14:	70 e0       	ldi	r23, 0x00	; 0
 d16:	22 1f       	adc	r18, r18
 d18:	22 27       	eor	r18, r18
 d1a:	22 1f       	adc	r18, r18
 d1c:	93 81       	ldd	r25, Z+3	; 0x03
 d1e:	89 2f       	mov	r24, r25
 d20:	88 0f       	add	r24, r24
 d22:	82 2b       	or	r24, r18
 d24:	28 2f       	mov	r18, r24
 d26:	30 e0       	ldi	r19, 0x00	; 0
 d28:	99 1f       	adc	r25, r25
 d2a:	99 27       	eor	r25, r25
 d2c:	99 1f       	adc	r25, r25
 d2e:	11 96       	adiw	r26, 0x01	; 1
 d30:	9c 93       	st	X, r25
 d32:	11 97       	sbiw	r26, 0x01	; 1
 d34:	21 15       	cp	r18, r1
 d36:	31 05       	cpc	r19, r1
 d38:	a9 f5       	brne	.+106    	; 0xda4 <__unpack_f+0x9e>
 d3a:	41 15       	cp	r20, r1
 d3c:	51 05       	cpc	r21, r1
 d3e:	61 05       	cpc	r22, r1
 d40:	71 05       	cpc	r23, r1
 d42:	11 f4       	brne	.+4      	; 0xd48 <__unpack_f+0x42>
 d44:	82 e0       	ldi	r24, 0x02	; 2
 d46:	37 c0       	rjmp	.+110    	; 0xdb6 <__unpack_f+0xb0>
 d48:	82 e8       	ldi	r24, 0x82	; 130
 d4a:	9f ef       	ldi	r25, 0xFF	; 255
 d4c:	13 96       	adiw	r26, 0x03	; 3
 d4e:	9c 93       	st	X, r25
 d50:	8e 93       	st	-X, r24
 d52:	12 97       	sbiw	r26, 0x02	; 2
 d54:	9a 01       	movw	r18, r20
 d56:	ab 01       	movw	r20, r22
 d58:	67 e0       	ldi	r22, 0x07	; 7
 d5a:	22 0f       	add	r18, r18
 d5c:	33 1f       	adc	r19, r19
 d5e:	44 1f       	adc	r20, r20
 d60:	55 1f       	adc	r21, r21
 d62:	6a 95       	dec	r22
 d64:	d1 f7       	brne	.-12     	; 0xd5a <__unpack_f+0x54>
 d66:	83 e0       	ldi	r24, 0x03	; 3
 d68:	8c 93       	st	X, r24
 d6a:	0d c0       	rjmp	.+26     	; 0xd86 <__unpack_f+0x80>
 d6c:	22 0f       	add	r18, r18
 d6e:	33 1f       	adc	r19, r19
 d70:	44 1f       	adc	r20, r20
 d72:	55 1f       	adc	r21, r21
 d74:	12 96       	adiw	r26, 0x02	; 2
 d76:	8d 91       	ld	r24, X+
 d78:	9c 91       	ld	r25, X
 d7a:	13 97       	sbiw	r26, 0x03	; 3
 d7c:	01 97       	sbiw	r24, 0x01	; 1
 d7e:	13 96       	adiw	r26, 0x03	; 3
 d80:	9c 93       	st	X, r25
 d82:	8e 93       	st	-X, r24
 d84:	12 97       	sbiw	r26, 0x02	; 2
 d86:	20 30       	cpi	r18, 0x00	; 0
 d88:	80 e0       	ldi	r24, 0x00	; 0
 d8a:	38 07       	cpc	r19, r24
 d8c:	80 e0       	ldi	r24, 0x00	; 0
 d8e:	48 07       	cpc	r20, r24
 d90:	80 e4       	ldi	r24, 0x40	; 64
 d92:	58 07       	cpc	r21, r24
 d94:	58 f3       	brcs	.-42     	; 0xd6c <__unpack_f+0x66>
 d96:	14 96       	adiw	r26, 0x04	; 4
 d98:	2d 93       	st	X+, r18
 d9a:	3d 93       	st	X+, r19
 d9c:	4d 93       	st	X+, r20
 d9e:	5c 93       	st	X, r21
 da0:	17 97       	sbiw	r26, 0x07	; 7
 da2:	08 95       	ret
 da4:	2f 3f       	cpi	r18, 0xFF	; 255
 da6:	31 05       	cpc	r19, r1
 da8:	79 f4       	brne	.+30     	; 0xdc8 <__unpack_f+0xc2>
 daa:	41 15       	cp	r20, r1
 dac:	51 05       	cpc	r21, r1
 dae:	61 05       	cpc	r22, r1
 db0:	71 05       	cpc	r23, r1
 db2:	19 f4       	brne	.+6      	; 0xdba <__unpack_f+0xb4>
 db4:	84 e0       	ldi	r24, 0x04	; 4
 db6:	8c 93       	st	X, r24
 db8:	08 95       	ret
 dba:	64 ff       	sbrs	r22, 4
 dbc:	03 c0       	rjmp	.+6      	; 0xdc4 <__unpack_f+0xbe>
 dbe:	81 e0       	ldi	r24, 0x01	; 1
 dc0:	8c 93       	st	X, r24
 dc2:	12 c0       	rjmp	.+36     	; 0xde8 <__unpack_f+0xe2>
 dc4:	1c 92       	st	X, r1
 dc6:	10 c0       	rjmp	.+32     	; 0xde8 <__unpack_f+0xe2>
 dc8:	2f 57       	subi	r18, 0x7F	; 127
 dca:	30 40       	sbci	r19, 0x00	; 0
 dcc:	13 96       	adiw	r26, 0x03	; 3
 dce:	3c 93       	st	X, r19
 dd0:	2e 93       	st	-X, r18
 dd2:	12 97       	sbiw	r26, 0x02	; 2
 dd4:	83 e0       	ldi	r24, 0x03	; 3
 dd6:	8c 93       	st	X, r24
 dd8:	87 e0       	ldi	r24, 0x07	; 7
 dda:	44 0f       	add	r20, r20
 ddc:	55 1f       	adc	r21, r21
 dde:	66 1f       	adc	r22, r22
 de0:	77 1f       	adc	r23, r23
 de2:	8a 95       	dec	r24
 de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0xd4>
 de6:	70 64       	ori	r23, 0x40	; 64
 de8:	14 96       	adiw	r26, 0x04	; 4
 dea:	4d 93       	st	X+, r20
 dec:	5d 93       	st	X+, r21
 dee:	6d 93       	st	X+, r22
 df0:	7c 93       	st	X, r23
 df2:	17 97       	sbiw	r26, 0x07	; 7
 df4:	08 95       	ret

00000df6 <__fpcmp_parts_f>:
 df6:	1f 93       	push	r17
 df8:	dc 01       	movw	r26, r24
 dfa:	fb 01       	movw	r30, r22
 dfc:	9c 91       	ld	r25, X
 dfe:	92 30       	cpi	r25, 0x02	; 2
 e00:	08 f4       	brcc	.+2      	; 0xe04 <__fpcmp_parts_f+0xe>
 e02:	47 c0       	rjmp	.+142    	; 0xe92 <__fpcmp_parts_f+0x9c>
 e04:	80 81       	ld	r24, Z
 e06:	82 30       	cpi	r24, 0x02	; 2
 e08:	08 f4       	brcc	.+2      	; 0xe0c <__fpcmp_parts_f+0x16>
 e0a:	43 c0       	rjmp	.+134    	; 0xe92 <__fpcmp_parts_f+0x9c>
 e0c:	94 30       	cpi	r25, 0x04	; 4
 e0e:	51 f4       	brne	.+20     	; 0xe24 <__fpcmp_parts_f+0x2e>
 e10:	11 96       	adiw	r26, 0x01	; 1
 e12:	1c 91       	ld	r17, X
 e14:	84 30       	cpi	r24, 0x04	; 4
 e16:	99 f5       	brne	.+102    	; 0xe7e <__fpcmp_parts_f+0x88>
 e18:	81 81       	ldd	r24, Z+1	; 0x01
 e1a:	68 2f       	mov	r22, r24
 e1c:	70 e0       	ldi	r23, 0x00	; 0
 e1e:	61 1b       	sub	r22, r17
 e20:	71 09       	sbc	r23, r1
 e22:	3f c0       	rjmp	.+126    	; 0xea2 <__fpcmp_parts_f+0xac>
 e24:	84 30       	cpi	r24, 0x04	; 4
 e26:	21 f0       	breq	.+8      	; 0xe30 <__fpcmp_parts_f+0x3a>
 e28:	92 30       	cpi	r25, 0x02	; 2
 e2a:	31 f4       	brne	.+12     	; 0xe38 <__fpcmp_parts_f+0x42>
 e2c:	82 30       	cpi	r24, 0x02	; 2
 e2e:	b9 f1       	breq	.+110    	; 0xe9e <__fpcmp_parts_f+0xa8>
 e30:	81 81       	ldd	r24, Z+1	; 0x01
 e32:	88 23       	and	r24, r24
 e34:	89 f1       	breq	.+98     	; 0xe98 <__fpcmp_parts_f+0xa2>
 e36:	2d c0       	rjmp	.+90     	; 0xe92 <__fpcmp_parts_f+0x9c>
 e38:	11 96       	adiw	r26, 0x01	; 1
 e3a:	1c 91       	ld	r17, X
 e3c:	11 97       	sbiw	r26, 0x01	; 1
 e3e:	82 30       	cpi	r24, 0x02	; 2
 e40:	f1 f0       	breq	.+60     	; 0xe7e <__fpcmp_parts_f+0x88>
 e42:	81 81       	ldd	r24, Z+1	; 0x01
 e44:	18 17       	cp	r17, r24
 e46:	d9 f4       	brne	.+54     	; 0xe7e <__fpcmp_parts_f+0x88>
 e48:	12 96       	adiw	r26, 0x02	; 2
 e4a:	2d 91       	ld	r18, X+
 e4c:	3c 91       	ld	r19, X
 e4e:	13 97       	sbiw	r26, 0x03	; 3
 e50:	82 81       	ldd	r24, Z+2	; 0x02
 e52:	93 81       	ldd	r25, Z+3	; 0x03
 e54:	82 17       	cp	r24, r18
 e56:	93 07       	cpc	r25, r19
 e58:	94 f0       	brlt	.+36     	; 0xe7e <__fpcmp_parts_f+0x88>
 e5a:	28 17       	cp	r18, r24
 e5c:	39 07       	cpc	r19, r25
 e5e:	bc f0       	brlt	.+46     	; 0xe8e <__fpcmp_parts_f+0x98>
 e60:	14 96       	adiw	r26, 0x04	; 4
 e62:	8d 91       	ld	r24, X+
 e64:	9d 91       	ld	r25, X+
 e66:	0d 90       	ld	r0, X+
 e68:	bc 91       	ld	r27, X
 e6a:	a0 2d       	mov	r26, r0
 e6c:	24 81       	ldd	r18, Z+4	; 0x04
 e6e:	35 81       	ldd	r19, Z+5	; 0x05
 e70:	46 81       	ldd	r20, Z+6	; 0x06
 e72:	57 81       	ldd	r21, Z+7	; 0x07
 e74:	28 17       	cp	r18, r24
 e76:	39 07       	cpc	r19, r25
 e78:	4a 07       	cpc	r20, r26
 e7a:	5b 07       	cpc	r21, r27
 e7c:	18 f4       	brcc	.+6      	; 0xe84 <__fpcmp_parts_f+0x8e>
 e7e:	11 23       	and	r17, r17
 e80:	41 f0       	breq	.+16     	; 0xe92 <__fpcmp_parts_f+0x9c>
 e82:	0a c0       	rjmp	.+20     	; 0xe98 <__fpcmp_parts_f+0xa2>
 e84:	82 17       	cp	r24, r18
 e86:	93 07       	cpc	r25, r19
 e88:	a4 07       	cpc	r26, r20
 e8a:	b5 07       	cpc	r27, r21
 e8c:	40 f4       	brcc	.+16     	; 0xe9e <__fpcmp_parts_f+0xa8>
 e8e:	11 23       	and	r17, r17
 e90:	19 f0       	breq	.+6      	; 0xe98 <__fpcmp_parts_f+0xa2>
 e92:	61 e0       	ldi	r22, 0x01	; 1
 e94:	70 e0       	ldi	r23, 0x00	; 0
 e96:	05 c0       	rjmp	.+10     	; 0xea2 <__fpcmp_parts_f+0xac>
 e98:	6f ef       	ldi	r22, 0xFF	; 255
 e9a:	7f ef       	ldi	r23, 0xFF	; 255
 e9c:	02 c0       	rjmp	.+4      	; 0xea2 <__fpcmp_parts_f+0xac>
 e9e:	60 e0       	ldi	r22, 0x00	; 0
 ea0:	70 e0       	ldi	r23, 0x00	; 0
 ea2:	cb 01       	movw	r24, r22
 ea4:	1f 91       	pop	r17
 ea6:	08 95       	ret

00000ea8 <__prologue_saves__>:
 ea8:	2f 92       	push	r2
 eaa:	3f 92       	push	r3
 eac:	4f 92       	push	r4
 eae:	5f 92       	push	r5
 eb0:	6f 92       	push	r6
 eb2:	7f 92       	push	r7
 eb4:	8f 92       	push	r8
 eb6:	9f 92       	push	r9
 eb8:	af 92       	push	r10
 eba:	bf 92       	push	r11
 ebc:	cf 92       	push	r12
 ebe:	df 92       	push	r13
 ec0:	ef 92       	push	r14
 ec2:	ff 92       	push	r15
 ec4:	0f 93       	push	r16
 ec6:	1f 93       	push	r17
 ec8:	cf 93       	push	r28
 eca:	df 93       	push	r29
 ecc:	cd b7       	in	r28, 0x3d	; 61
 ece:	de b7       	in	r29, 0x3e	; 62
 ed0:	ca 1b       	sub	r28, r26
 ed2:	db 0b       	sbc	r29, r27
 ed4:	0f b6       	in	r0, 0x3f	; 63
 ed6:	f8 94       	cli
 ed8:	de bf       	out	0x3e, r29	; 62
 eda:	0f be       	out	0x3f, r0	; 63
 edc:	cd bf       	out	0x3d, r28	; 61
 ede:	09 94       	ijmp

00000ee0 <__epilogue_restores__>:
 ee0:	2a 88       	ldd	r2, Y+18	; 0x12
 ee2:	39 88       	ldd	r3, Y+17	; 0x11
 ee4:	48 88       	ldd	r4, Y+16	; 0x10
 ee6:	5f 84       	ldd	r5, Y+15	; 0x0f
 ee8:	6e 84       	ldd	r6, Y+14	; 0x0e
 eea:	7d 84       	ldd	r7, Y+13	; 0x0d
 eec:	8c 84       	ldd	r8, Y+12	; 0x0c
 eee:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef0:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef2:	b9 84       	ldd	r11, Y+9	; 0x09
 ef4:	c8 84       	ldd	r12, Y+8	; 0x08
 ef6:	df 80       	ldd	r13, Y+7	; 0x07
 ef8:	ee 80       	ldd	r14, Y+6	; 0x06
 efa:	fd 80       	ldd	r15, Y+5	; 0x05
 efc:	0c 81       	ldd	r16, Y+4	; 0x04
 efe:	1b 81       	ldd	r17, Y+3	; 0x03
 f00:	aa 81       	ldd	r26, Y+2	; 0x02
 f02:	b9 81       	ldd	r27, Y+1	; 0x01
 f04:	ce 0f       	add	r28, r30
 f06:	d1 1d       	adc	r29, r1
 f08:	0f b6       	in	r0, 0x3f	; 63
 f0a:	f8 94       	cli
 f0c:	de bf       	out	0x3e, r29	; 62
 f0e:	0f be       	out	0x3f, r0	; 63
 f10:	cd bf       	out	0x3d, r28	; 61
 f12:	ed 01       	movw	r28, r26
 f14:	08 95       	ret

00000f16 <_exit>:
 f16:	f8 94       	cli

00000f18 <__stop_program>:
 f18:	ff cf       	rjmp	.-2      	; 0xf18 <__stop_program>
