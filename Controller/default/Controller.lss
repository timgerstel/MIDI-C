
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000012c6  0000135a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800168  00800168  00001462  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00001462  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ed  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002aa9  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001569  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000019b3  00000000  00000000  00005a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  000073d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000562  00000000  00000000  00007724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bdb  00000000  00000000  00007c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00008861  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ec       	ldi	r30, 0xC6	; 198
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 8b 01 	call	0x316	; 0x316 <main>
      8a:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <record>:
/***** Main Methods *****/

void record(){
	 //writeSong2();
	//midiTransitTest();
}
      92:	08 95       	ret

00000094 <modify>:
}


void modify(){
	//analogLEDTest();
}
      94:	08 95       	ret

00000096 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      96:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      98:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9e:	86 e8       	ldi	r24, 0x86	; 134
      a0:	80 bd       	out	0x20, r24	; 32
}
      a2:	08 95       	ret

000000a4 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a4:	8f ef       	ldi	r24, 0xFF	; 255
      a6:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a8:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      aa:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      ac:	87 e0       	ldi	r24, 0x07	; 7
      ae:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      b0:	11 ba       	out	0x11, r1	; 17
}
      b2:	08 95       	ret

000000b4 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b4:	87 e4       	ldi	r24, 0x47	; 71
      b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b8:	87 e8       	ldi	r24, 0x87	; 135
      ba:	86 b9       	out	0x06, r24	; 6
}
      bc:	08 95       	ret

000000be <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
      be:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      c0:	85 e0       	ldi	r24, 0x05	; 5
      c2:	8e bd       	out	0x2e, r24	; 46
	//TIMSK = (1 << OCIE1B);
	//sei();
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	//OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
	TCNT1 = 0;
      c4:	1d bc       	out	0x2d, r1	; 45
      c6:	1c bc       	out	0x2c, r1	; 44

}
      c8:	08 95       	ret

000000ca <playTimer>:
	}
	
}

void playTimer(){
	while((TIFR & (1<<OCF1A)) == 0);// wait till the timer overflow flag is SET
      ca:	08 b6       	in	r0, 0x38	; 56
      cc:	04 fe       	sbrs	r0, 4
      ce:	fd cf       	rjmp	.-6      	; 0xca <playTimer>
		PORTB ^= 0xFF;
      d0:	88 b3       	in	r24, 0x18	; 24
      d2:	80 95       	com	r24
      d4:	88 bb       	out	0x18, r24	; 24
		TCNT1 = 0; 
      d6:	1d bc       	out	0x2d, r1	; 45
      d8:	1c bc       	out	0x2c, r1	; 44
		TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
      da:	88 b7       	in	r24, 0x38	; 56
      dc:	80 61       	ori	r24, 0x10	; 16
      de:	88 bf       	out	0x38, r24	; 56
}
      e0:	08 95       	ret

000000e2 <wait>:

}


void wait(int time)
{
      e2:	af 92       	push	r10
      e4:	bf 92       	push	r11
      e6:	cf 92       	push	r12
      e8:	df 92       	push	r13
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
   _delay_ms(time);
      f2:	aa 27       	eor	r26, r26
      f4:	97 fd       	sbrc	r25, 7
      f6:	a0 95       	com	r26
      f8:	ba 2f       	mov	r27, r26
      fa:	bc 01       	movw	r22, r24
      fc:	cd 01       	movw	r24, r26
      fe:	0e 94 0a 06 	call	0xc14	; 0xc14 <__floatsisf>
     102:	5b 01       	movw	r10, r22
     104:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     106:	20 e0       	ldi	r18, 0x00	; 0
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	4a e7       	ldi	r20, 0x7A	; 122
     10c:	54 e4       	ldi	r21, 0x44	; 68
     10e:	0e 94 80 04 	call	0x900	; 0x900 <__mulsf3>
     112:	7b 01       	movw	r14, r22
     114:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5f e3       	ldi	r21, 0x3F	; 63
     11e:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ltsf2>
     122:	88 23       	and	r24, r24
     124:	1c f4       	brge	.+6      	; 0x12c <wait+0x4a>
     126:	61 e0       	ldi	r22, 0x01	; 1
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	24 c0       	rjmp	.+72     	; 0x174 <wait+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     12c:	c8 01       	movw	r24, r16
     12e:	b7 01       	movw	r22, r14
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	3f ef       	ldi	r19, 0xFF	; 255
     134:	4f e7       	ldi	r20, 0x7F	; 127
     136:	57 e4       	ldi	r21, 0x47	; 71
     138:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__gtsf2>
     13c:	18 16       	cp	r1, r24
     13e:	b4 f4       	brge	.+44     	; 0x16c <wait+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     140:	c6 01       	movw	r24, r12
     142:	b5 01       	movw	r22, r10
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	40 e2       	ldi	r20, 0x20	; 32
     14a:	51 e4       	ldi	r21, 0x41	; 65
     14c:	0e 94 80 04 	call	0x900	; 0x900 <__mulsf3>
     150:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     154:	84 e6       	ldi	r24, 0x64	; 100
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	05 c0       	rjmp	.+10     	; 0x164 <wait+0x82>
     15a:	fc 01       	movw	r30, r24
     15c:	31 97       	sbiw	r30, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <wait+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     160:	61 50       	subi	r22, 0x01	; 1
     162:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     164:	61 15       	cp	r22, r1
     166:	71 05       	cpc	r23, r1
     168:	c1 f7       	brne	.-16     	; 0x15a <wait+0x78>
     16a:	07 c0       	rjmp	.+14     	; 0x17a <wait+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     16c:	c8 01       	movw	r24, r16
     16e:	b7 01       	movw	r22, r14
     170:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
     174:	cb 01       	movw	r24, r22
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <wait+0x94>
}
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	df 90       	pop	r13
     184:	cf 90       	pop	r12
     186:	bf 90       	pop	r11
     188:	af 90       	pop	r10
     18a:	08 95       	ret

0000018c <ledOFF>:

void ledOFF(){
	PORTB = 0x00;
     18c:	18 ba       	out	0x18, r1	; 24
}
     18e:	08 95       	ret

00000190 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
     190:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
     192:	34 9b       	sbis	0x06, 4	; 6
     194:	fe cf       	rjmp	.-4      	; 0x192 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
     196:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
     198:	24 b1       	in	r18, 0x04	; 4
     19a:	35 b1       	in	r19, 0x05	; 5
}
     19c:	c9 01       	movw	r24, r18
     19e:	08 95       	ret

000001a0 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
     1a0:	0e 94 c8 00 	call	0x190	; 0x190 <ReadADC>
     1a4:	9c 01       	movw	r18, r24
     1a6:	90 93 77 01 	sts	0x0177, r25
     1aa:	80 93 76 01 	sts	0x0176, r24
		if (adc_value > 30){
     1ae:	8f 31       	cpi	r24, 0x1F	; 31
     1b0:	91 05       	cpc	r25, r1
     1b2:	28 f1       	brcs	.+74     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     1b8:	2d 33       	cpi	r18, 0x3D	; 61
     1ba:	31 05       	cpc	r19, r1
     1bc:	00 f1       	brcs	.+64     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     1c2:	2b 35       	cpi	r18, 0x5B	; 91
     1c4:	31 05       	cpc	r19, r1
     1c6:	d8 f0       	brcs	.+54     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     1cc:	29 37       	cpi	r18, 0x79	; 121
     1ce:	31 05       	cpc	r19, r1
     1d0:	b0 f0       	brcs	.+44     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     1d2:	88 e0       	ldi	r24, 0x08	; 8
     1d4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     1d6:	27 39       	cpi	r18, 0x97	; 151
     1d8:	31 05       	cpc	r19, r1
     1da:	88 f0       	brcs	.+34     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     1dc:	80 e1       	ldi	r24, 0x10	; 16
     1de:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     1e0:	25 3b       	cpi	r18, 0xB5	; 181
     1e2:	31 05       	cpc	r19, r1
     1e4:	60 f0       	brcs	.+24     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     1e6:	80 e2       	ldi	r24, 0x20	; 32
     1e8:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     1ea:	23 3d       	cpi	r18, 0xD3	; 211
     1ec:	31 05       	cpc	r19, r1
     1ee:	38 f0       	brcs	.+14     	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     1f0:	80 e4       	ldi	r24, 0x40	; 64
     1f2:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     1f4:	21 3f       	cpi	r18, 0xF1	; 241
     1f6:	31 05       	cpc	r19, r1
     1f8:	10 f0       	brcs	.+4      	; 0x1fe <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     1fa:	80 e8       	ldi	r24, 0x80	; 128
     1fc:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     1fe:	20 3f       	cpi	r18, 0xF0	; 240
     200:	31 05       	cpc	r19, r1
     202:	10 f0       	brcs	.+4      	; 0x208 <analogLEDTest+0x68>
			PORTB = 0xFF;
     204:	8f ef       	ldi	r24, 0xFF	; 255
     206:	88 bb       	out	0x18, r24	; 24
     208:	08 95       	ret

0000020a <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
     20a:	5d 9b       	sbis	0x0b, 5	; 11
     20c:	fe cf       	rjmp	.-4      	; 0x20a <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     20e:	8c b9       	out	0x0c, r24	; 12
}
     210:	08 95       	ret

00000212 <midiTransitTest>:
	}	

}

void midiTransitTest(){
	midi_Transmit(144);
     212:	80 e9       	ldi	r24, 0x90	; 144
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(67);
     21a:	83 e4       	ldi	r24, 0x43	; 67
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(100);
     222:	84 e6       	ldi	r24, 0x64	; 100
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
     22a:	88 e8       	ldi	r24, 0x88	; 136
     22c:	93 e1       	ldi	r25, 0x13	; 19
     22e:	24 e6       	ldi	r18, 0x64	; 100
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	f9 01       	movw	r30, r18
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     238:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     23a:	d9 f7       	brne	.-10     	; 0x232 <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
     23c:	80 e8       	ldi	r24, 0x80	; 128
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(67);
     244:	83 e4       	ldi	r24, 0x43	; 67
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(100);
     24c:	84 e6       	ldi	r24, 0x64	; 100
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
     254:	88 e8       	ldi	r24, 0x88	; 136
     256:	93 e1       	ldi	r25, 0x13	; 19
     258:	24 e6       	ldi	r18, 0x64	; 100
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	f9 01       	movw	r30, r18
     25e:	31 97       	sbiw	r30, 0x01	; 1
     260:	f1 f7       	brne	.-4      	; 0x25e <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     262:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     264:	d9 f7       	brne	.-10     	; 0x25c <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
     266:	80 e9       	ldi	r24, 0x90	; 144
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(98);
     26e:	82 e6       	ldi	r24, 0x62	; 98
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(100);
     276:	84 e6       	ldi	r24, 0x64	; 100
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
     27e:	88 e8       	ldi	r24, 0x88	; 136
     280:	93 e1       	ldi	r25, 0x13	; 19
     282:	24 e6       	ldi	r18, 0x64	; 100
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	f1 f7       	brne	.-4      	; 0x288 <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     28c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28e:	d9 f7       	brne	.-10     	; 0x286 <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
     290:	80 e8       	ldi	r24, 0x80	; 128
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(98);
     298:	82 e6       	ldi	r24, 0x62	; 98
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(100);
     2a0:	84 e6       	ldi	r24, 0x64	; 100
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
     2a8:	88 e8       	ldi	r24, 0x88	; 136
     2aa:	93 e1       	ldi	r25, 0x13	; 19
     2ac:	24 e6       	ldi	r18, 0x64	; 100
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	f9 01       	movw	r30, r18
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
     2ba:	80 e9       	ldi	r24, 0x90	; 144
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(60);
     2c2:	8c e3       	ldi	r24, 0x3C	; 60
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(100);
     2ca:	84 e6       	ldi	r24, 0x64	; 100
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
     2d2:	88 e8       	ldi	r24, 0x88	; 136
     2d4:	93 e1       	ldi	r25, 0x13	; 19
     2d6:	24 e6       	ldi	r18, 0x64	; 100
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	f9 01       	movw	r30, r18
     2dc:	31 97       	sbiw	r30, 0x01	; 1
     2de:	f1 f7       	brne	.-4      	; 0x2dc <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2e0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2e2:	d9 f7       	brne	.-10     	; 0x2da <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
     2e4:	80 e8       	ldi	r24, 0x80	; 128
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(60);
     2ec:	8c e3       	ldi	r24, 0x3C	; 60
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
	midi_Transmit(100);
     2f4:	84 e6       	ldi	r24, 0x64	; 100
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
     2fc:	88 e8       	ldi	r24, 0x88	; 136
     2fe:	93 e1       	ldi	r25, 0x13	; 19
     300:	24 e6       	ldi	r18, 0x64	; 100
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	f9 01       	movw	r30, r18
     306:	31 97       	sbiw	r30, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     30a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     30c:	d9 f7       	brne	.-10     	; 0x304 <midiTransitTest+0xf2>
	_delay_ms(500);

}
     30e:	08 95       	ret

00000310 <playBack>:
	 //writeSong2();
	//midiTransitTest();
}

void playBack(){
	midiTransitTest();
     310:	0e 94 09 01 	call	0x212	; 0x212 <midiTransitTest>
}
     314:	08 95       	ret

00000316 <main>:
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     31a:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     31c:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     31e:	97 e0       	ldi	r25, 0x07	; 7
     320:	9b bb       	out	0x1b, r25	; 27
	DDRD = 0x00;
     322:	11 ba       	out	0x11, r1	; 17
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
}
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
     324:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
     326:	85 e0       	ldi	r24, 0x05	; 5
     328:	8e bd       	out	0x2e, r24	; 46
	//TIMSK = (1 << OCIE1B);
	//sei();
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	//OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
	TCNT1 = 0;
     32a:	1d bc       	out	0x2d, r1	; 45
     32c:	1c bc       	out	0x2c, r1	; 44
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     32e:	87 e4       	ldi	r24, 0x47	; 71
     330:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     332:	87 e8       	ldi	r24, 0x87	; 135
     334:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     336:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     338:	99 b9       	out	0x09, r25	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     33a:	88 e1       	ldi	r24, 0x18	; 24
     33c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     33e:	86 e8       	ldi	r24, 0x86	; 134
     340:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     342:	29 b3       	in	r18, 0x19	; 25
		uint8_t play = PINA & 0x02;
     344:	89 b3       	in	r24, 0x19	; 25
		uint8_t mod = PINA & 0x01;
     346:	99 b3       	in	r25, 0x19	; 25
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
     348:	81 ff       	sbrs	r24, 1
     34a:	fb cf       	rjmp	.-10     	; 0x342 <main+0x2c>
     34c:	22 fd       	sbrc	r18, 2
     34e:	f9 cf       	rjmp	.-14     	; 0x342 <main+0x2c>
			if (mod){ // Modify Mode
     350:	90 fd       	sbrc	r25, 0
     352:	f7 cf       	rjmp	.-18     	; 0x342 <main+0x2c>
	 //writeSong2();
	//midiTransitTest();
}

void playBack(){
	midiTransitTest();
     354:	0e 94 09 01 	call	0x212	; 0x212 <midiTransitTest>
     358:	f4 cf       	rjmp	.-24     	; 0x342 <main+0x2c>

0000035a <playSong>:

/***** Create Methods *****/



void playSong(){
     35a:	8f 92       	push	r8
     35c:	9f 92       	push	r9
     35e:	af 92       	push	r10
     360:	bf 92       	push	r11
     362:	cf 92       	push	r12
     364:	df 92       	push	r13
     366:	ef 92       	push	r14
     368:	ff 92       	push	r15
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
	eeprom_address= 0x00;
     372:	10 92 73 01 	sts	0x0173, r1
     376:	10 92 72 01 	sts	0x0172, r1
     37a:	84 e6       	ldi	r24, 0x64	; 100
     37c:	88 2e       	mov	r8, r24
     37e:	91 2c       	mov	r9, r1
     380:	63 c0       	rjmp	.+198    	; 0x448 <playSong+0xee>
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     382:	e1 99       	sbic	0x1c, 1	; 28
     384:	fe cf       	rjmp	.-4      	; 0x382 <playSong+0x28>
	/* Set up address register */
	EEAR = uiAddress;
     386:	3f bb       	out	0x1f, r19	; 31
     388:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     38a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     38c:	8d b3       	in	r24, 0x1d	; 29


void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
     38e:	88 bb       	out	0x18, r24	; 24
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     390:	e1 99       	sbic	0x1c, 1	; 28
     392:	fe cf       	rjmp	.-4      	; 0x390 <playSong+0x36>
	/* Set up address register */
	EEAR = uiAddress;
     394:	3f bb       	out	0x1f, r19	; 31
     396:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     398:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     39a:	8d b3       	in	r24, 0x1d	; 29

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 05 01 	call	0x20a	; 0x20a <midi_Transmit>
		eeprom_address++;
     3a2:	c0 91 72 01 	lds	r28, 0x0172
     3a6:	d0 91 73 01 	lds	r29, 0x0173
     3aa:	21 96       	adiw	r28, 0x01	; 1
     3ac:	d0 93 73 01 	sts	0x0173, r29
     3b0:	c0 93 72 01 	sts	0x0172, r28
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     3b4:	e1 99       	sbic	0x1c, 1	; 28
     3b6:	fe cf       	rjmp	.-4      	; 0x3b4 <playSong+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     3b8:	df bb       	out	0x1f, r29	; 31
     3ba:	ce bb       	out	0x1e, r28	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     3bc:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     3be:	6d b3       	in	r22, 0x1d	; 29
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 bc 06 	call	0xd78	; 0xd78 <__floatunsisf>
     3ca:	5b 01       	movw	r10, r22
     3cc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	30 e0       	ldi	r19, 0x00	; 0
     3d2:	4a e7       	ldi	r20, 0x7A	; 122
     3d4:	54 e4       	ldi	r21, 0x44	; 68
     3d6:	0e 94 80 04 	call	0x900	; 0x900 <__mulsf3>
     3da:	7b 01       	movw	r14, r22
     3dc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	40 e8       	ldi	r20, 0x80	; 128
     3e4:	5f e3       	ldi	r21, 0x3F	; 63
     3e6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__ltsf2>
     3ea:	88 23       	and	r24, r24
     3ec:	1c f4       	brge	.+6      	; 0x3f4 <playSong+0x9a>
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	22 c0       	rjmp	.+68     	; 0x438 <playSong+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
     3f4:	c8 01       	movw	r24, r16
     3f6:	b7 01       	movw	r22, r14
     3f8:	20 e0       	ldi	r18, 0x00	; 0
     3fa:	3f ef       	ldi	r19, 0xFF	; 255
     3fc:	4f e7       	ldi	r20, 0x7F	; 127
     3fe:	57 e4       	ldi	r21, 0x47	; 71
     400:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__gtsf2>
     404:	18 16       	cp	r1, r24
     406:	a4 f4       	brge	.+40     	; 0x430 <playSong+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     408:	c6 01       	movw	r24, r12
     40a:	b5 01       	movw	r22, r10
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	40 e2       	ldi	r20, 0x20	; 32
     412:	51 e4       	ldi	r21, 0x41	; 65
     414:	0e 94 80 04 	call	0x900	; 0x900 <__mulsf3>
     418:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
     41c:	05 c0       	rjmp	.+10     	; 0x428 <playSong+0xce>
     41e:	c4 01       	movw	r24, r8
     420:	01 97       	sbiw	r24, 0x01	; 1
     422:	f1 f7       	brne	.-4      	; 0x420 <playSong+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     424:	61 50       	subi	r22, 0x01	; 1
     426:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     428:	61 15       	cp	r22, r1
     42a:	71 05       	cpc	r23, r1
     42c:	c1 f7       	brne	.-16     	; 0x41e <playSong+0xc4>
     42e:	07 c0       	rjmp	.+14     	; 0x43e <playSong+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     430:	c8 01       	movw	r24, r16
     432:	b7 01       	movw	r22, r14
     434:	0e 94 aa 02 	call	0x554	; 0x554 <__fixunssfsi>
     438:	cb 01       	movw	r24, r22
     43a:	01 97       	sbiw	r24, 0x01	; 1
     43c:	f1 f7       	brne	.-4      	; 0x43a <playSong+0xe0>
		eeprom_address++;
     43e:	21 96       	adiw	r28, 0x01	; 1
     440:	d0 93 73 01 	sts	0x0173, r29
     444:	c0 93 72 01 	sts	0x0172, r28



void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
     448:	20 91 72 01 	lds	r18, 0x0172
     44c:	30 91 73 01 	lds	r19, 0x0173
     450:	80 91 74 01 	lds	r24, 0x0174
     454:	90 91 75 01 	lds	r25, 0x0175
     458:	28 17       	cp	r18, r24
     45a:	39 07       	cpc	r19, r25
     45c:	08 f4       	brcc	.+2      	; 0x460 <playSong+0x106>
     45e:	91 cf       	rjmp	.-222    	; 0x382 <playSong+0x28>
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
		eeprom_address++;
	}
	
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	df 90       	pop	r13
     46e:	cf 90       	pop	r12
     470:	bf 90       	pop	r11
     472:	af 90       	pop	r10
     474:	9f 90       	pop	r9
     476:	8f 90       	pop	r8
     478:	08 95       	ret

0000047a <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     47a:	5f 9b       	sbis	0x0b, 7	; 11
     47c:	fe cf       	rjmp	.-4      	; 0x47a <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     47e:	8c b1       	in	r24, 0x0c	; 12
}
     480:	08 95       	ret

00000482 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     482:	01 c0       	rjmp	.+2      	; 0x486 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     484:	8c b1       	in	r24, 0x0c	; 12
     486:	5f 99       	sbic	0x0b, 7	; 11
     488:	fd cf       	rjmp	.-6      	; 0x484 <midi_Flush+0x2>
}
     48a:	08 95       	ret

0000048c <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     48c:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     48e:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     490:	08 95       	ret

00000492 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     492:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     494:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     496:	8c b5       	in	r24, 0x2c	; 44
     498:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     49a:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     49c:	08 95       	ret

0000049e <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     49e:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     4a0:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     4a2:	9d bd       	out	0x2d, r25	; 45
     4a4:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     4a6:	2f bf       	out	0x3f, r18	; 63
}
     4a8:	08 95       	ret

000004aa <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     4aa:	e1 99       	sbic	0x1c, 1	; 28
     4ac:	fe cf       	rjmp	.-4      	; 0x4aa <EEPROM_write>

	/* Set up address and data registers */
	EEAR = uiAddress;
     4ae:	9f bb       	out	0x1f, r25	; 31
     4b0:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     4b2:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     4b4:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     4b6:	e1 9a       	sbi	0x1c, 1	; 28
}
     4b8:	08 95       	ret

000004ba <writeSong2>:
		PORTB ^= 0xFF;
		TCNT1 = 0; 
		TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
}

void writeSong2(){
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	c8 e7       	ldi	r28, 0x78	; 120
     4c0:	d1 e0       	ldi	r29, 0x01	; 1
     4c2:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     4c4:	5f 9b       	sbis	0x0b, 7	; 11
     4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <writeSong2+0xa>

	/* get and return data from buffer */
	return UDR;
     4c8:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
for(int i =0; i <3; i++){
		midiData[i] = midi_Receive();
     4ca:	81 93       	st	Z+, r24
}

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
for(int i =0; i <3; i++){
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	eb 37       	cpi	r30, 0x7B	; 123
     4d0:	f8 07       	cpc	r31, r24
     4d2:	c1 f7       	brne	.-16     	; 0x4c4 <writeSong2+0xa>
		midiData[i] = midi_Receive();
	}
	captureTime = TCNT1;
     4d4:	2c b5       	in	r18, 0x2c	; 44
     4d6:	3d b5       	in	r19, 0x2d	; 45
     4d8:	42 2f       	mov	r20, r18
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
     4da:	92 2f       	mov	r25, r18
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	89 2f       	mov	r24, r25
     4e0:	99 0f       	add	r25, r25
     4e2:	99 0b       	sbc	r25, r25
     4e4:	80 83       	st	Z, r24
	midiData[4] = captureTimeB;
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	32 96       	adiw	r30, 0x02	; 2
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     4ea:	5f 9b       	sbis	0x0b, 7	; 11
     4ec:	fe cf       	rjmp	.-4      	; 0x4ea <writeSong2+0x30>

	/* get and return data from buffer */
	return UDR;
     4ee:	8c b1       	in	r24, 0x0c	; 12
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
		midiData[j] = midi_Receive();
     4f0:	81 93       	st	Z+, r24
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	e0 38       	cpi	r30, 0x80	; 128
     4f6:	f8 07       	cpc	r31, r24
     4f8:	c1 f7       	brne	.-16     	; 0x4ea <writeSong2+0x30>
		midiData[j] = midi_Receive();
	}
	interval = TCNT1 - captureTime;
     4fa:	8c b5       	in	r24, 0x2c	; 44
     4fc:	9d b5       	in	r25, 0x2d	; 45
	unsigned char intervalA = ((interval << 8) >> 8);
	unsigned char intervalB = (interval >> 8);
	midiData[8] = intervalA;
     4fe:	38 2f       	mov	r19, r24
     500:	34 1b       	sub	r19, r20
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	23 2f       	mov	r18, r19
     506:	33 0f       	add	r19, r19
     508:	33 0b       	sbc	r19, r19
     50a:	20 83       	st	Z, r18
	midiData[9] = intervalB;
     50c:	11 82       	std	Z+1, r1	; 0x01

	PORTB = midiData[1];
     50e:	80 91 79 01 	lds	r24, 0x0179
     512:	88 bb       	out	0x18, r24	; 24
	TCNT1 = 0;
     514:	1d bc       	out	0x2d, r1	; 45
     516:	1c bc       	out	0x2c, r1	; 44

	for(int j= 0; j < 10; j++) {
		EEPROM_write(eeprom_address, midiData[j]);
     518:	80 91 72 01 	lds	r24, 0x0172
     51c:	90 91 73 01 	lds	r25, 0x0173
     520:	69 91       	ld	r22, Y+
     522:	0e 94 55 02 	call	0x4aa	; 0x4aa <EEPROM_write>
		eeprom_address++;		
     526:	80 91 72 01 	lds	r24, 0x0172
     52a:	90 91 73 01 	lds	r25, 0x0173
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	90 93 73 01 	sts	0x0173, r25
     534:	80 93 72 01 	sts	0x0172, r24
	midiData[9] = intervalB;

	PORTB = midiData[1];
	TCNT1 = 0;

	for(int j= 0; j < 10; j++) {
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	c2 38       	cpi	r28, 0x82	; 130
     53c:	d8 07       	cpc	r29, r24
     53e:	61 f7       	brne	.-40     	; 0x518 <writeSong2+0x5e>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}	

}
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <EEPROM_read>:
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     546:	e1 99       	sbic	0x1c, 1	; 28
     548:	fe cf       	rjmp	.-4      	; 0x546 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     54a:	9f bb       	out	0x1f, r25	; 31
     54c:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     54e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     550:	8d b3       	in	r24, 0x1d	; 29
}
     552:	08 95       	ret

00000554 <__fixunssfsi>:
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	7b 01       	movw	r14, r22
     55e:	8c 01       	movw	r16, r24
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	5f e4       	ldi	r21, 0x4F	; 79
     568:	0e 94 aa 05 	call	0xb54	; 0xb54 <__gesf2>
     56c:	88 23       	and	r24, r24
     56e:	8c f0       	brlt	.+34     	; 0x592 <__fixunssfsi+0x3e>
     570:	c8 01       	movw	r24, r16
     572:	b7 01       	movw	r22, r14
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	5f e4       	ldi	r21, 0x4F	; 79
     57c:	0e 94 22 04 	call	0x844	; 0x844 <__subsf3>
     580:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fixsfsi>
     584:	9b 01       	movw	r18, r22
     586:	ac 01       	movw	r20, r24
     588:	20 50       	subi	r18, 0x00	; 0
     58a:	30 40       	sbci	r19, 0x00	; 0
     58c:	40 40       	sbci	r20, 0x00	; 0
     58e:	50 48       	sbci	r21, 0x80	; 128
     590:	06 c0       	rjmp	.+12     	; 0x59e <__fixunssfsi+0x4a>
     592:	c8 01       	movw	r24, r16
     594:	b7 01       	movw	r22, r14
     596:	0e 94 68 06 	call	0xcd0	; 0xcd0 <__fixsfsi>
     59a:	9b 01       	movw	r18, r22
     59c:	ac 01       	movw	r20, r24
     59e:	b9 01       	movw	r22, r18
     5a0:	ca 01       	movw	r24, r20
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	08 95       	ret

000005ac <_fpadd_parts>:
     5ac:	a0 e0       	ldi	r26, 0x00	; 0
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	ec ed       	ldi	r30, 0xDC	; 220
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__prologue_saves__>
     5b8:	dc 01       	movw	r26, r24
     5ba:	2b 01       	movw	r4, r22
     5bc:	fa 01       	movw	r30, r20
     5be:	9c 91       	ld	r25, X
     5c0:	92 30       	cpi	r25, 0x02	; 2
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <_fpadd_parts+0x1a>
     5c4:	39 c1       	rjmp	.+626    	; 0x838 <_fpadd_parts+0x28c>
     5c6:	eb 01       	movw	r28, r22
     5c8:	88 81       	ld	r24, Y
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	08 f4       	brcc	.+2      	; 0x5d0 <_fpadd_parts+0x24>
     5ce:	33 c1       	rjmp	.+614    	; 0x836 <_fpadd_parts+0x28a>
     5d0:	94 30       	cpi	r25, 0x04	; 4
     5d2:	69 f4       	brne	.+26     	; 0x5ee <_fpadd_parts+0x42>
     5d4:	84 30       	cpi	r24, 0x04	; 4
     5d6:	09 f0       	breq	.+2      	; 0x5da <_fpadd_parts+0x2e>
     5d8:	2f c1       	rjmp	.+606    	; 0x838 <_fpadd_parts+0x28c>
     5da:	11 96       	adiw	r26, 0x01	; 1
     5dc:	9c 91       	ld	r25, X
     5de:	11 97       	sbiw	r26, 0x01	; 1
     5e0:	89 81       	ldd	r24, Y+1	; 0x01
     5e2:	98 17       	cp	r25, r24
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <_fpadd_parts+0x3c>
     5e6:	28 c1       	rjmp	.+592    	; 0x838 <_fpadd_parts+0x28c>
     5e8:	a0 e6       	ldi	r26, 0x60	; 96
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	25 c1       	rjmp	.+586    	; 0x838 <_fpadd_parts+0x28c>
     5ee:	84 30       	cpi	r24, 0x04	; 4
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <_fpadd_parts+0x48>
     5f2:	21 c1       	rjmp	.+578    	; 0x836 <_fpadd_parts+0x28a>
     5f4:	82 30       	cpi	r24, 0x02	; 2
     5f6:	a9 f4       	brne	.+42     	; 0x622 <_fpadd_parts+0x76>
     5f8:	92 30       	cpi	r25, 0x02	; 2
     5fa:	09 f0       	breq	.+2      	; 0x5fe <_fpadd_parts+0x52>
     5fc:	1d c1       	rjmp	.+570    	; 0x838 <_fpadd_parts+0x28c>
     5fe:	9a 01       	movw	r18, r20
     600:	ad 01       	movw	r20, r26
     602:	88 e0       	ldi	r24, 0x08	; 8
     604:	ea 01       	movw	r28, r20
     606:	09 90       	ld	r0, Y+
     608:	ae 01       	movw	r20, r28
     60a:	e9 01       	movw	r28, r18
     60c:	09 92       	st	Y+, r0
     60e:	9e 01       	movw	r18, r28
     610:	81 50       	subi	r24, 0x01	; 1
     612:	c1 f7       	brne	.-16     	; 0x604 <_fpadd_parts+0x58>
     614:	e2 01       	movw	r28, r4
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	11 96       	adiw	r26, 0x01	; 1
     61a:	9c 91       	ld	r25, X
     61c:	89 23       	and	r24, r25
     61e:	81 83       	std	Z+1, r24	; 0x01
     620:	08 c1       	rjmp	.+528    	; 0x832 <_fpadd_parts+0x286>
     622:	92 30       	cpi	r25, 0x02	; 2
     624:	09 f4       	brne	.+2      	; 0x628 <_fpadd_parts+0x7c>
     626:	07 c1       	rjmp	.+526    	; 0x836 <_fpadd_parts+0x28a>
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	2d 90       	ld	r2, X+
     62c:	3c 90       	ld	r3, X
     62e:	13 97       	sbiw	r26, 0x03	; 3
     630:	eb 01       	movw	r28, r22
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	14 96       	adiw	r26, 0x04	; 4
     638:	ad 90       	ld	r10, X+
     63a:	bd 90       	ld	r11, X+
     63c:	cd 90       	ld	r12, X+
     63e:	dc 90       	ld	r13, X
     640:	17 97       	sbiw	r26, 0x07	; 7
     642:	ec 80       	ldd	r14, Y+4	; 0x04
     644:	fd 80       	ldd	r15, Y+5	; 0x05
     646:	0e 81       	ldd	r16, Y+6	; 0x06
     648:	1f 81       	ldd	r17, Y+7	; 0x07
     64a:	91 01       	movw	r18, r2
     64c:	28 1b       	sub	r18, r24
     64e:	39 0b       	sbc	r19, r25
     650:	b9 01       	movw	r22, r18
     652:	37 ff       	sbrs	r19, 7
     654:	04 c0       	rjmp	.+8      	; 0x65e <_fpadd_parts+0xb2>
     656:	66 27       	eor	r22, r22
     658:	77 27       	eor	r23, r23
     65a:	62 1b       	sub	r22, r18
     65c:	73 0b       	sbc	r23, r19
     65e:	60 32       	cpi	r22, 0x20	; 32
     660:	71 05       	cpc	r23, r1
     662:	0c f0       	brlt	.+2      	; 0x666 <_fpadd_parts+0xba>
     664:	61 c0       	rjmp	.+194    	; 0x728 <_fpadd_parts+0x17c>
     666:	12 16       	cp	r1, r18
     668:	13 06       	cpc	r1, r19
     66a:	6c f5       	brge	.+90     	; 0x6c6 <_fpadd_parts+0x11a>
     66c:	37 01       	movw	r6, r14
     66e:	48 01       	movw	r8, r16
     670:	06 2e       	mov	r0, r22
     672:	04 c0       	rjmp	.+8      	; 0x67c <_fpadd_parts+0xd0>
     674:	96 94       	lsr	r9
     676:	87 94       	ror	r8
     678:	77 94       	ror	r7
     67a:	67 94       	ror	r6
     67c:	0a 94       	dec	r0
     67e:	d2 f7       	brpl	.-12     	; 0x674 <_fpadd_parts+0xc8>
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	50 e0       	ldi	r21, 0x00	; 0
     688:	04 c0       	rjmp	.+8      	; 0x692 <_fpadd_parts+0xe6>
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	44 1f       	adc	r20, r20
     690:	55 1f       	adc	r21, r21
     692:	6a 95       	dec	r22
     694:	d2 f7       	brpl	.-12     	; 0x68a <_fpadd_parts+0xde>
     696:	21 50       	subi	r18, 0x01	; 1
     698:	30 40       	sbci	r19, 0x00	; 0
     69a:	40 40       	sbci	r20, 0x00	; 0
     69c:	50 40       	sbci	r21, 0x00	; 0
     69e:	2e 21       	and	r18, r14
     6a0:	3f 21       	and	r19, r15
     6a2:	40 23       	and	r20, r16
     6a4:	51 23       	and	r21, r17
     6a6:	21 15       	cp	r18, r1
     6a8:	31 05       	cpc	r19, r1
     6aa:	41 05       	cpc	r20, r1
     6ac:	51 05       	cpc	r21, r1
     6ae:	21 f0       	breq	.+8      	; 0x6b8 <_fpadd_parts+0x10c>
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	79 01       	movw	r14, r18
     6ba:	8a 01       	movw	r16, r20
     6bc:	e6 28       	or	r14, r6
     6be:	f7 28       	or	r15, r7
     6c0:	08 29       	or	r16, r8
     6c2:	19 29       	or	r17, r9
     6c4:	3c c0       	rjmp	.+120    	; 0x73e <_fpadd_parts+0x192>
     6c6:	23 2b       	or	r18, r19
     6c8:	d1 f1       	breq	.+116    	; 0x73e <_fpadd_parts+0x192>
     6ca:	26 0e       	add	r2, r22
     6cc:	37 1e       	adc	r3, r23
     6ce:	35 01       	movw	r6, r10
     6d0:	46 01       	movw	r8, r12
     6d2:	06 2e       	mov	r0, r22
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <_fpadd_parts+0x132>
     6d6:	96 94       	lsr	r9
     6d8:	87 94       	ror	r8
     6da:	77 94       	ror	r7
     6dc:	67 94       	ror	r6
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <_fpadd_parts+0x12a>
     6e2:	21 e0       	ldi	r18, 0x01	; 1
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <_fpadd_parts+0x148>
     6ec:	22 0f       	add	r18, r18
     6ee:	33 1f       	adc	r19, r19
     6f0:	44 1f       	adc	r20, r20
     6f2:	55 1f       	adc	r21, r21
     6f4:	6a 95       	dec	r22
     6f6:	d2 f7       	brpl	.-12     	; 0x6ec <_fpadd_parts+0x140>
     6f8:	21 50       	subi	r18, 0x01	; 1
     6fa:	30 40       	sbci	r19, 0x00	; 0
     6fc:	40 40       	sbci	r20, 0x00	; 0
     6fe:	50 40       	sbci	r21, 0x00	; 0
     700:	2a 21       	and	r18, r10
     702:	3b 21       	and	r19, r11
     704:	4c 21       	and	r20, r12
     706:	5d 21       	and	r21, r13
     708:	21 15       	cp	r18, r1
     70a:	31 05       	cpc	r19, r1
     70c:	41 05       	cpc	r20, r1
     70e:	51 05       	cpc	r21, r1
     710:	21 f0       	breq	.+8      	; 0x71a <_fpadd_parts+0x16e>
     712:	21 e0       	ldi	r18, 0x01	; 1
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	50 e0       	ldi	r21, 0x00	; 0
     71a:	59 01       	movw	r10, r18
     71c:	6a 01       	movw	r12, r20
     71e:	a6 28       	or	r10, r6
     720:	b7 28       	or	r11, r7
     722:	c8 28       	or	r12, r8
     724:	d9 28       	or	r13, r9
     726:	0b c0       	rjmp	.+22     	; 0x73e <_fpadd_parts+0x192>
     728:	82 15       	cp	r24, r2
     72a:	93 05       	cpc	r25, r3
     72c:	2c f0       	brlt	.+10     	; 0x738 <_fpadd_parts+0x18c>
     72e:	1c 01       	movw	r2, r24
     730:	aa 24       	eor	r10, r10
     732:	bb 24       	eor	r11, r11
     734:	65 01       	movw	r12, r10
     736:	03 c0       	rjmp	.+6      	; 0x73e <_fpadd_parts+0x192>
     738:	ee 24       	eor	r14, r14
     73a:	ff 24       	eor	r15, r15
     73c:	87 01       	movw	r16, r14
     73e:	11 96       	adiw	r26, 0x01	; 1
     740:	9c 91       	ld	r25, X
     742:	d2 01       	movw	r26, r4
     744:	11 96       	adiw	r26, 0x01	; 1
     746:	8c 91       	ld	r24, X
     748:	98 17       	cp	r25, r24
     74a:	09 f4       	brne	.+2      	; 0x74e <_fpadd_parts+0x1a2>
     74c:	45 c0       	rjmp	.+138    	; 0x7d8 <_fpadd_parts+0x22c>
     74e:	99 23       	and	r25, r25
     750:	39 f0       	breq	.+14     	; 0x760 <_fpadd_parts+0x1b4>
     752:	a8 01       	movw	r20, r16
     754:	97 01       	movw	r18, r14
     756:	2a 19       	sub	r18, r10
     758:	3b 09       	sbc	r19, r11
     75a:	4c 09       	sbc	r20, r12
     75c:	5d 09       	sbc	r21, r13
     75e:	06 c0       	rjmp	.+12     	; 0x76c <_fpadd_parts+0x1c0>
     760:	a6 01       	movw	r20, r12
     762:	95 01       	movw	r18, r10
     764:	2e 19       	sub	r18, r14
     766:	3f 09       	sbc	r19, r15
     768:	40 0b       	sbc	r20, r16
     76a:	51 0b       	sbc	r21, r17
     76c:	57 fd       	sbrc	r21, 7
     76e:	08 c0       	rjmp	.+16     	; 0x780 <_fpadd_parts+0x1d4>
     770:	11 82       	std	Z+1, r1	; 0x01
     772:	33 82       	std	Z+3, r3	; 0x03
     774:	22 82       	std	Z+2, r2	; 0x02
     776:	24 83       	std	Z+4, r18	; 0x04
     778:	35 83       	std	Z+5, r19	; 0x05
     77a:	46 83       	std	Z+6, r20	; 0x06
     77c:	57 83       	std	Z+7, r21	; 0x07
     77e:	1d c0       	rjmp	.+58     	; 0x7ba <_fpadd_parts+0x20e>
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	81 83       	std	Z+1, r24	; 0x01
     784:	33 82       	std	Z+3, r3	; 0x03
     786:	22 82       	std	Z+2, r2	; 0x02
     788:	88 27       	eor	r24, r24
     78a:	99 27       	eor	r25, r25
     78c:	dc 01       	movw	r26, r24
     78e:	82 1b       	sub	r24, r18
     790:	93 0b       	sbc	r25, r19
     792:	a4 0b       	sbc	r26, r20
     794:	b5 0b       	sbc	r27, r21
     796:	84 83       	std	Z+4, r24	; 0x04
     798:	95 83       	std	Z+5, r25	; 0x05
     79a:	a6 83       	std	Z+6, r26	; 0x06
     79c:	b7 83       	std	Z+7, r27	; 0x07
     79e:	0d c0       	rjmp	.+26     	; 0x7ba <_fpadd_parts+0x20e>
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	44 1f       	adc	r20, r20
     7a6:	55 1f       	adc	r21, r21
     7a8:	24 83       	std	Z+4, r18	; 0x04
     7aa:	35 83       	std	Z+5, r19	; 0x05
     7ac:	46 83       	std	Z+6, r20	; 0x06
     7ae:	57 83       	std	Z+7, r21	; 0x07
     7b0:	82 81       	ldd	r24, Z+2	; 0x02
     7b2:	93 81       	ldd	r25, Z+3	; 0x03
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	93 83       	std	Z+3, r25	; 0x03
     7b8:	82 83       	std	Z+2, r24	; 0x02
     7ba:	24 81       	ldd	r18, Z+4	; 0x04
     7bc:	35 81       	ldd	r19, Z+5	; 0x05
     7be:	46 81       	ldd	r20, Z+6	; 0x06
     7c0:	57 81       	ldd	r21, Z+7	; 0x07
     7c2:	da 01       	movw	r26, r20
     7c4:	c9 01       	movw	r24, r18
     7c6:	01 97       	sbiw	r24, 0x01	; 1
     7c8:	a1 09       	sbc	r26, r1
     7ca:	b1 09       	sbc	r27, r1
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	9f 4f       	sbci	r25, 0xFF	; 255
     7d0:	af 4f       	sbci	r26, 0xFF	; 255
     7d2:	bf 43       	sbci	r27, 0x3F	; 63
     7d4:	28 f3       	brcs	.-54     	; 0x7a0 <_fpadd_parts+0x1f4>
     7d6:	0b c0       	rjmp	.+22     	; 0x7ee <_fpadd_parts+0x242>
     7d8:	91 83       	std	Z+1, r25	; 0x01
     7da:	33 82       	std	Z+3, r3	; 0x03
     7dc:	22 82       	std	Z+2, r2	; 0x02
     7de:	ea 0c       	add	r14, r10
     7e0:	fb 1c       	adc	r15, r11
     7e2:	0c 1d       	adc	r16, r12
     7e4:	1d 1d       	adc	r17, r13
     7e6:	e4 82       	std	Z+4, r14	; 0x04
     7e8:	f5 82       	std	Z+5, r15	; 0x05
     7ea:	06 83       	std	Z+6, r16	; 0x06
     7ec:	17 83       	std	Z+7, r17	; 0x07
     7ee:	83 e0       	ldi	r24, 0x03	; 3
     7f0:	80 83       	st	Z, r24
     7f2:	24 81       	ldd	r18, Z+4	; 0x04
     7f4:	35 81       	ldd	r19, Z+5	; 0x05
     7f6:	46 81       	ldd	r20, Z+6	; 0x06
     7f8:	57 81       	ldd	r21, Z+7	; 0x07
     7fa:	57 ff       	sbrs	r21, 7
     7fc:	1a c0       	rjmp	.+52     	; 0x832 <_fpadd_parts+0x286>
     7fe:	c9 01       	movw	r24, r18
     800:	aa 27       	eor	r26, r26
     802:	97 fd       	sbrc	r25, 7
     804:	a0 95       	com	r26
     806:	ba 2f       	mov	r27, r26
     808:	81 70       	andi	r24, 0x01	; 1
     80a:	90 70       	andi	r25, 0x00	; 0
     80c:	a0 70       	andi	r26, 0x00	; 0
     80e:	b0 70       	andi	r27, 0x00	; 0
     810:	56 95       	lsr	r21
     812:	47 95       	ror	r20
     814:	37 95       	ror	r19
     816:	27 95       	ror	r18
     818:	82 2b       	or	r24, r18
     81a:	93 2b       	or	r25, r19
     81c:	a4 2b       	or	r26, r20
     81e:	b5 2b       	or	r27, r21
     820:	84 83       	std	Z+4, r24	; 0x04
     822:	95 83       	std	Z+5, r25	; 0x05
     824:	a6 83       	std	Z+6, r26	; 0x06
     826:	b7 83       	std	Z+7, r27	; 0x07
     828:	82 81       	ldd	r24, Z+2	; 0x02
     82a:	93 81       	ldd	r25, Z+3	; 0x03
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	93 83       	std	Z+3, r25	; 0x03
     830:	82 83       	std	Z+2, r24	; 0x02
     832:	df 01       	movw	r26, r30
     834:	01 c0       	rjmp	.+2      	; 0x838 <_fpadd_parts+0x28c>
     836:	d2 01       	movw	r26, r4
     838:	cd 01       	movw	r24, r26
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	e2 e1       	ldi	r30, 0x12	; 18
     840:	0c 94 46 09 	jmp	0x128c	; 0x128c <__epilogue_restores__>

00000844 <__subsf3>:
     844:	a0 e2       	ldi	r26, 0x20	; 32
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	e8 e2       	ldi	r30, 0x28	; 40
     84a:	f4 e0       	ldi	r31, 0x04	; 4
     84c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__+0x18>
     850:	69 83       	std	Y+1, r22	; 0x01
     852:	7a 83       	std	Y+2, r23	; 0x02
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	9c 83       	std	Y+4, r25	; 0x04
     858:	2d 83       	std	Y+5, r18	; 0x05
     85a:	3e 83       	std	Y+6, r19	; 0x06
     85c:	4f 83       	std	Y+7, r20	; 0x07
     85e:	58 87       	std	Y+8, r21	; 0x08
     860:	e9 e0       	ldi	r30, 0x09	; 9
     862:	ee 2e       	mov	r14, r30
     864:	f1 2c       	mov	r15, r1
     866:	ec 0e       	add	r14, r28
     868:	fd 1e       	adc	r15, r29
     86a:	ce 01       	movw	r24, r28
     86c:	01 96       	adiw	r24, 0x01	; 1
     86e:	b7 01       	movw	r22, r14
     870:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     874:	8e 01       	movw	r16, r28
     876:	0f 5e       	subi	r16, 0xEF	; 239
     878:	1f 4f       	sbci	r17, 0xFF	; 255
     87a:	ce 01       	movw	r24, r28
     87c:	05 96       	adiw	r24, 0x05	; 5
     87e:	b8 01       	movw	r22, r16
     880:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     884:	8a 89       	ldd	r24, Y+18	; 0x12
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	89 27       	eor	r24, r25
     88a:	8a 8b       	std	Y+18, r24	; 0x12
     88c:	c7 01       	movw	r24, r14
     88e:	b8 01       	movw	r22, r16
     890:	ae 01       	movw	r20, r28
     892:	47 5e       	subi	r20, 0xE7	; 231
     894:	5f 4f       	sbci	r21, 0xFF	; 255
     896:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_fpadd_parts>
     89a:	0e 94 84 07 	call	0xf08	; 0xf08 <__pack_f>
     89e:	a0 96       	adiw	r28, 0x20	; 32
     8a0:	e6 e0       	ldi	r30, 0x06	; 6
     8a2:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__+0x18>

000008a6 <__addsf3>:
     8a6:	a0 e2       	ldi	r26, 0x20	; 32
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	e9 e5       	ldi	r30, 0x59	; 89
     8ac:	f4 e0       	ldi	r31, 0x04	; 4
     8ae:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__+0x18>
     8b2:	69 83       	std	Y+1, r22	; 0x01
     8b4:	7a 83       	std	Y+2, r23	; 0x02
     8b6:	8b 83       	std	Y+3, r24	; 0x03
     8b8:	9c 83       	std	Y+4, r25	; 0x04
     8ba:	2d 83       	std	Y+5, r18	; 0x05
     8bc:	3e 83       	std	Y+6, r19	; 0x06
     8be:	4f 83       	std	Y+7, r20	; 0x07
     8c0:	58 87       	std	Y+8, r21	; 0x08
     8c2:	f9 e0       	ldi	r31, 0x09	; 9
     8c4:	ef 2e       	mov	r14, r31
     8c6:	f1 2c       	mov	r15, r1
     8c8:	ec 0e       	add	r14, r28
     8ca:	fd 1e       	adc	r15, r29
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	b7 01       	movw	r22, r14
     8d2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     8d6:	8e 01       	movw	r16, r28
     8d8:	0f 5e       	subi	r16, 0xEF	; 239
     8da:	1f 4f       	sbci	r17, 0xFF	; 255
     8dc:	ce 01       	movw	r24, r28
     8de:	05 96       	adiw	r24, 0x05	; 5
     8e0:	b8 01       	movw	r22, r16
     8e2:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     8e6:	c7 01       	movw	r24, r14
     8e8:	b8 01       	movw	r22, r16
     8ea:	ae 01       	movw	r20, r28
     8ec:	47 5e       	subi	r20, 0xE7	; 231
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_fpadd_parts>
     8f4:	0e 94 84 07 	call	0xf08	; 0xf08 <__pack_f>
     8f8:	a0 96       	adiw	r28, 0x20	; 32
     8fa:	e6 e0       	ldi	r30, 0x06	; 6
     8fc:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__+0x18>

00000900 <__mulsf3>:
     900:	a0 e2       	ldi	r26, 0x20	; 32
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	e6 e8       	ldi	r30, 0x86	; 134
     906:	f4 e0       	ldi	r31, 0x04	; 4
     908:	0c 94 2a 09 	jmp	0x1254	; 0x1254 <__prologue_saves__>
     90c:	69 83       	std	Y+1, r22	; 0x01
     90e:	7a 83       	std	Y+2, r23	; 0x02
     910:	8b 83       	std	Y+3, r24	; 0x03
     912:	9c 83       	std	Y+4, r25	; 0x04
     914:	2d 83       	std	Y+5, r18	; 0x05
     916:	3e 83       	std	Y+6, r19	; 0x06
     918:	4f 83       	std	Y+7, r20	; 0x07
     91a:	58 87       	std	Y+8, r21	; 0x08
     91c:	ce 01       	movw	r24, r28
     91e:	01 96       	adiw	r24, 0x01	; 1
     920:	be 01       	movw	r22, r28
     922:	67 5f       	subi	r22, 0xF7	; 247
     924:	7f 4f       	sbci	r23, 0xFF	; 255
     926:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     92a:	ce 01       	movw	r24, r28
     92c:	05 96       	adiw	r24, 0x05	; 5
     92e:	be 01       	movw	r22, r28
     930:	6f 5e       	subi	r22, 0xEF	; 239
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     938:	99 85       	ldd	r25, Y+9	; 0x09
     93a:	92 30       	cpi	r25, 0x02	; 2
     93c:	88 f0       	brcs	.+34     	; 0x960 <__mulsf3+0x60>
     93e:	89 89       	ldd	r24, Y+17	; 0x11
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	c8 f0       	brcs	.+50     	; 0x976 <__mulsf3+0x76>
     944:	94 30       	cpi	r25, 0x04	; 4
     946:	19 f4       	brne	.+6      	; 0x94e <__mulsf3+0x4e>
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	51 f4       	brne	.+20     	; 0x960 <__mulsf3+0x60>
     94c:	04 c0       	rjmp	.+8      	; 0x956 <__mulsf3+0x56>
     94e:	84 30       	cpi	r24, 0x04	; 4
     950:	29 f4       	brne	.+10     	; 0x95c <__mulsf3+0x5c>
     952:	92 30       	cpi	r25, 0x02	; 2
     954:	81 f4       	brne	.+32     	; 0x976 <__mulsf3+0x76>
     956:	80 e6       	ldi	r24, 0x60	; 96
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	c6 c0       	rjmp	.+396    	; 0xae8 <__mulsf3+0x1e8>
     95c:	92 30       	cpi	r25, 0x02	; 2
     95e:	49 f4       	brne	.+18     	; 0x972 <__mulsf3+0x72>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	9a 85       	ldd	r25, Y+10	; 0x0a
     964:	8a 89       	ldd	r24, Y+18	; 0x12
     966:	98 13       	cpse	r25, r24
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	2a 87       	std	Y+10, r18	; 0x0a
     96c:	ce 01       	movw	r24, r28
     96e:	09 96       	adiw	r24, 0x09	; 9
     970:	bb c0       	rjmp	.+374    	; 0xae8 <__mulsf3+0x1e8>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	49 f4       	brne	.+18     	; 0x988 <__mulsf3+0x88>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	9a 85       	ldd	r25, Y+10	; 0x0a
     97a:	8a 89       	ldd	r24, Y+18	; 0x12
     97c:	98 13       	cpse	r25, r24
     97e:	21 e0       	ldi	r18, 0x01	; 1
     980:	2a 8b       	std	Y+18, r18	; 0x12
     982:	ce 01       	movw	r24, r28
     984:	41 96       	adiw	r24, 0x11	; 17
     986:	b0 c0       	rjmp	.+352    	; 0xae8 <__mulsf3+0x1e8>
     988:	2d 84       	ldd	r2, Y+13	; 0x0d
     98a:	3e 84       	ldd	r3, Y+14	; 0x0e
     98c:	4f 84       	ldd	r4, Y+15	; 0x0f
     98e:	58 88       	ldd	r5, Y+16	; 0x10
     990:	6d 88       	ldd	r6, Y+21	; 0x15
     992:	7e 88       	ldd	r7, Y+22	; 0x16
     994:	8f 88       	ldd	r8, Y+23	; 0x17
     996:	98 8c       	ldd	r9, Y+24	; 0x18
     998:	ee 24       	eor	r14, r14
     99a:	ff 24       	eor	r15, r15
     99c:	87 01       	movw	r16, r14
     99e:	aa 24       	eor	r10, r10
     9a0:	bb 24       	eor	r11, r11
     9a2:	65 01       	movw	r12, r10
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	e0 e0       	ldi	r30, 0x00	; 0
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	c1 01       	movw	r24, r2
     9b2:	81 70       	andi	r24, 0x01	; 1
     9b4:	90 70       	andi	r25, 0x00	; 0
     9b6:	89 2b       	or	r24, r25
     9b8:	e9 f0       	breq	.+58     	; 0x9f4 <__mulsf3+0xf4>
     9ba:	e6 0c       	add	r14, r6
     9bc:	f7 1c       	adc	r15, r7
     9be:	08 1d       	adc	r16, r8
     9c0:	19 1d       	adc	r17, r9
     9c2:	9a 01       	movw	r18, r20
     9c4:	ab 01       	movw	r20, r22
     9c6:	2a 0d       	add	r18, r10
     9c8:	3b 1d       	adc	r19, r11
     9ca:	4c 1d       	adc	r20, r12
     9cc:	5d 1d       	adc	r21, r13
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e6 14       	cp	r14, r6
     9d8:	f7 04       	cpc	r15, r7
     9da:	08 05       	cpc	r16, r8
     9dc:	19 05       	cpc	r17, r9
     9de:	20 f4       	brcc	.+8      	; 0x9e8 <__mulsf3+0xe8>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	ba 01       	movw	r22, r20
     9ea:	a9 01       	movw	r20, r18
     9ec:	48 0f       	add	r20, r24
     9ee:	59 1f       	adc	r21, r25
     9f0:	6a 1f       	adc	r22, r26
     9f2:	7b 1f       	adc	r23, r27
     9f4:	aa 0c       	add	r10, r10
     9f6:	bb 1c       	adc	r11, r11
     9f8:	cc 1c       	adc	r12, r12
     9fa:	dd 1c       	adc	r13, r13
     9fc:	97 fe       	sbrs	r9, 7
     9fe:	08 c0       	rjmp	.+16     	; 0xa10 <__mulsf3+0x110>
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	a0 e0       	ldi	r26, 0x00	; 0
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	a8 2a       	or	r10, r24
     a0a:	b9 2a       	or	r11, r25
     a0c:	ca 2a       	or	r12, r26
     a0e:	db 2a       	or	r13, r27
     a10:	31 96       	adiw	r30, 0x01	; 1
     a12:	e0 32       	cpi	r30, 0x20	; 32
     a14:	f1 05       	cpc	r31, r1
     a16:	49 f0       	breq	.+18     	; 0xa2a <__mulsf3+0x12a>
     a18:	66 0c       	add	r6, r6
     a1a:	77 1c       	adc	r7, r7
     a1c:	88 1c       	adc	r8, r8
     a1e:	99 1c       	adc	r9, r9
     a20:	56 94       	lsr	r5
     a22:	47 94       	ror	r4
     a24:	37 94       	ror	r3
     a26:	27 94       	ror	r2
     a28:	c3 cf       	rjmp	.-122    	; 0x9b0 <__mulsf3+0xb0>
     a2a:	fa 85       	ldd	r31, Y+10	; 0x0a
     a2c:	ea 89       	ldd	r30, Y+18	; 0x12
     a2e:	2b 89       	ldd	r18, Y+19	; 0x13
     a30:	3c 89       	ldd	r19, Y+20	; 0x14
     a32:	8b 85       	ldd	r24, Y+11	; 0x0b
     a34:	9c 85       	ldd	r25, Y+12	; 0x0c
     a36:	28 0f       	add	r18, r24
     a38:	39 1f       	adc	r19, r25
     a3a:	2e 5f       	subi	r18, 0xFE	; 254
     a3c:	3f 4f       	sbci	r19, 0xFF	; 255
     a3e:	17 c0       	rjmp	.+46     	; 0xa6e <__mulsf3+0x16e>
     a40:	ca 01       	movw	r24, r20
     a42:	81 70       	andi	r24, 0x01	; 1
     a44:	90 70       	andi	r25, 0x00	; 0
     a46:	89 2b       	or	r24, r25
     a48:	61 f0       	breq	.+24     	; 0xa62 <__mulsf3+0x162>
     a4a:	16 95       	lsr	r17
     a4c:	07 95       	ror	r16
     a4e:	f7 94       	ror	r15
     a50:	e7 94       	ror	r14
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e8       	ldi	r27, 0x80	; 128
     a5a:	e8 2a       	or	r14, r24
     a5c:	f9 2a       	or	r15, r25
     a5e:	0a 2b       	or	r16, r26
     a60:	1b 2b       	or	r17, r27
     a62:	76 95       	lsr	r23
     a64:	67 95       	ror	r22
     a66:	57 95       	ror	r21
     a68:	47 95       	ror	r20
     a6a:	2f 5f       	subi	r18, 0xFF	; 255
     a6c:	3f 4f       	sbci	r19, 0xFF	; 255
     a6e:	77 fd       	sbrc	r23, 7
     a70:	e7 cf       	rjmp	.-50     	; 0xa40 <__mulsf3+0x140>
     a72:	0c c0       	rjmp	.+24     	; 0xa8c <__mulsf3+0x18c>
     a74:	44 0f       	add	r20, r20
     a76:	55 1f       	adc	r21, r21
     a78:	66 1f       	adc	r22, r22
     a7a:	77 1f       	adc	r23, r23
     a7c:	17 fd       	sbrc	r17, 7
     a7e:	41 60       	ori	r20, 0x01	; 1
     a80:	ee 0c       	add	r14, r14
     a82:	ff 1c       	adc	r15, r15
     a84:	00 1f       	adc	r16, r16
     a86:	11 1f       	adc	r17, r17
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	30 40       	sbci	r19, 0x00	; 0
     a8c:	40 30       	cpi	r20, 0x00	; 0
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	59 07       	cpc	r21, r25
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	69 07       	cpc	r22, r25
     a96:	90 e4       	ldi	r25, 0x40	; 64
     a98:	79 07       	cpc	r23, r25
     a9a:	60 f3       	brcs	.-40     	; 0xa74 <__mulsf3+0x174>
     a9c:	2b 8f       	std	Y+27, r18	; 0x1b
     a9e:	3c 8f       	std	Y+28, r19	; 0x1c
     aa0:	db 01       	movw	r26, r22
     aa2:	ca 01       	movw	r24, r20
     aa4:	8f 77       	andi	r24, 0x7F	; 127
     aa6:	90 70       	andi	r25, 0x00	; 0
     aa8:	a0 70       	andi	r26, 0x00	; 0
     aaa:	b0 70       	andi	r27, 0x00	; 0
     aac:	80 34       	cpi	r24, 0x40	; 64
     aae:	91 05       	cpc	r25, r1
     ab0:	a1 05       	cpc	r26, r1
     ab2:	b1 05       	cpc	r27, r1
     ab4:	61 f4       	brne	.+24     	; 0xace <__mulsf3+0x1ce>
     ab6:	47 fd       	sbrc	r20, 7
     ab8:	0a c0       	rjmp	.+20     	; 0xace <__mulsf3+0x1ce>
     aba:	e1 14       	cp	r14, r1
     abc:	f1 04       	cpc	r15, r1
     abe:	01 05       	cpc	r16, r1
     ac0:	11 05       	cpc	r17, r1
     ac2:	29 f0       	breq	.+10     	; 0xace <__mulsf3+0x1ce>
     ac4:	40 5c       	subi	r20, 0xC0	; 192
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	6f 4f       	sbci	r22, 0xFF	; 255
     aca:	7f 4f       	sbci	r23, 0xFF	; 255
     acc:	40 78       	andi	r20, 0x80	; 128
     ace:	1a 8e       	std	Y+26, r1	; 0x1a
     ad0:	fe 17       	cp	r31, r30
     ad2:	11 f0       	breq	.+4      	; 0xad8 <__mulsf3+0x1d8>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	8a 8f       	std	Y+26, r24	; 0x1a
     ad8:	4d 8f       	std	Y+29, r20	; 0x1d
     ada:	5e 8f       	std	Y+30, r21	; 0x1e
     adc:	6f 8f       	std	Y+31, r22	; 0x1f
     ade:	78 a3       	std	Y+32, r23	; 0x20
     ae0:	83 e0       	ldi	r24, 0x03	; 3
     ae2:	89 8f       	std	Y+25, r24	; 0x19
     ae4:	ce 01       	movw	r24, r28
     ae6:	49 96       	adiw	r24, 0x19	; 25
     ae8:	0e 94 84 07 	call	0xf08	; 0xf08 <__pack_f>
     aec:	a0 96       	adiw	r28, 0x20	; 32
     aee:	e2 e1       	ldi	r30, 0x12	; 18
     af0:	0c 94 46 09 	jmp	0x128c	; 0x128c <__epilogue_restores__>

00000af4 <__gtsf2>:
     af4:	a8 e1       	ldi	r26, 0x18	; 24
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e0 e8       	ldi	r30, 0x80	; 128
     afa:	f5 e0       	ldi	r31, 0x05	; 5
     afc:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__+0x18>
     b00:	69 83       	std	Y+1, r22	; 0x01
     b02:	7a 83       	std	Y+2, r23	; 0x02
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	9c 83       	std	Y+4, r25	; 0x04
     b08:	2d 83       	std	Y+5, r18	; 0x05
     b0a:	3e 83       	std	Y+6, r19	; 0x06
     b0c:	4f 83       	std	Y+7, r20	; 0x07
     b0e:	58 87       	std	Y+8, r21	; 0x08
     b10:	89 e0       	ldi	r24, 0x09	; 9
     b12:	e8 2e       	mov	r14, r24
     b14:	f1 2c       	mov	r15, r1
     b16:	ec 0e       	add	r14, r28
     b18:	fd 1e       	adc	r15, r29
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	b7 01       	movw	r22, r14
     b20:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     b24:	8e 01       	movw	r16, r28
     b26:	0f 5e       	subi	r16, 0xEF	; 239
     b28:	1f 4f       	sbci	r17, 0xFF	; 255
     b2a:	ce 01       	movw	r24, r28
     b2c:	05 96       	adiw	r24, 0x05	; 5
     b2e:	b8 01       	movw	r22, r16
     b30:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     b34:	89 85       	ldd	r24, Y+9	; 0x09
     b36:	82 30       	cpi	r24, 0x02	; 2
     b38:	40 f0       	brcs	.+16     	; 0xb4a <__gtsf2+0x56>
     b3a:	89 89       	ldd	r24, Y+17	; 0x11
     b3c:	82 30       	cpi	r24, 0x02	; 2
     b3e:	28 f0       	brcs	.+10     	; 0xb4a <__gtsf2+0x56>
     b40:	c7 01       	movw	r24, r14
     b42:	b8 01       	movw	r22, r16
     b44:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fpcmp_parts_f>
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <__gtsf2+0x58>
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	68 96       	adiw	r28, 0x18	; 24
     b4e:	e6 e0       	ldi	r30, 0x06	; 6
     b50:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__+0x18>

00000b54 <__gesf2>:
     b54:	a8 e1       	ldi	r26, 0x18	; 24
     b56:	b0 e0       	ldi	r27, 0x00	; 0
     b58:	e0 eb       	ldi	r30, 0xB0	; 176
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__+0x18>
     b60:	69 83       	std	Y+1, r22	; 0x01
     b62:	7a 83       	std	Y+2, r23	; 0x02
     b64:	8b 83       	std	Y+3, r24	; 0x03
     b66:	9c 83       	std	Y+4, r25	; 0x04
     b68:	2d 83       	std	Y+5, r18	; 0x05
     b6a:	3e 83       	std	Y+6, r19	; 0x06
     b6c:	4f 83       	std	Y+7, r20	; 0x07
     b6e:	58 87       	std	Y+8, r21	; 0x08
     b70:	89 e0       	ldi	r24, 0x09	; 9
     b72:	e8 2e       	mov	r14, r24
     b74:	f1 2c       	mov	r15, r1
     b76:	ec 0e       	add	r14, r28
     b78:	fd 1e       	adc	r15, r29
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	b7 01       	movw	r22, r14
     b80:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     b84:	8e 01       	movw	r16, r28
     b86:	0f 5e       	subi	r16, 0xEF	; 239
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	ce 01       	movw	r24, r28
     b8c:	05 96       	adiw	r24, 0x05	; 5
     b8e:	b8 01       	movw	r22, r16
     b90:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     b94:	89 85       	ldd	r24, Y+9	; 0x09
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	40 f0       	brcs	.+16     	; 0xbaa <__gesf2+0x56>
     b9a:	89 89       	ldd	r24, Y+17	; 0x11
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	28 f0       	brcs	.+10     	; 0xbaa <__gesf2+0x56>
     ba0:	c7 01       	movw	r24, r14
     ba2:	b8 01       	movw	r22, r16
     ba4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fpcmp_parts_f>
     ba8:	01 c0       	rjmp	.+2      	; 0xbac <__gesf2+0x58>
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	68 96       	adiw	r28, 0x18	; 24
     bae:	e6 e0       	ldi	r30, 0x06	; 6
     bb0:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__+0x18>

00000bb4 <__ltsf2>:
     bb4:	a8 e1       	ldi	r26, 0x18	; 24
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e0 ee       	ldi	r30, 0xE0	; 224
     bba:	f5 e0       	ldi	r31, 0x05	; 5
     bbc:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__+0x18>
     bc0:	69 83       	std	Y+1, r22	; 0x01
     bc2:	7a 83       	std	Y+2, r23	; 0x02
     bc4:	8b 83       	std	Y+3, r24	; 0x03
     bc6:	9c 83       	std	Y+4, r25	; 0x04
     bc8:	2d 83       	std	Y+5, r18	; 0x05
     bca:	3e 83       	std	Y+6, r19	; 0x06
     bcc:	4f 83       	std	Y+7, r20	; 0x07
     bce:	58 87       	std	Y+8, r21	; 0x08
     bd0:	89 e0       	ldi	r24, 0x09	; 9
     bd2:	e8 2e       	mov	r14, r24
     bd4:	f1 2c       	mov	r15, r1
     bd6:	ec 0e       	add	r14, r28
     bd8:	fd 1e       	adc	r15, r29
     bda:	ce 01       	movw	r24, r28
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	b7 01       	movw	r22, r14
     be0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     be4:	8e 01       	movw	r16, r28
     be6:	0f 5e       	subi	r16, 0xEF	; 239
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	ce 01       	movw	r24, r28
     bec:	05 96       	adiw	r24, 0x05	; 5
     bee:	b8 01       	movw	r22, r16
     bf0:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     bf4:	89 85       	ldd	r24, Y+9	; 0x09
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	40 f0       	brcs	.+16     	; 0xc0a <__ltsf2+0x56>
     bfa:	89 89       	ldd	r24, Y+17	; 0x11
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	28 f0       	brcs	.+10     	; 0xc0a <__ltsf2+0x56>
     c00:	c7 01       	movw	r24, r14
     c02:	b8 01       	movw	r22, r16
     c04:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <__fpcmp_parts_f>
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <__ltsf2+0x58>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	68 96       	adiw	r28, 0x18	; 24
     c0e:	e6 e0       	ldi	r30, 0x06	; 6
     c10:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__+0x18>

00000c14 <__floatsisf>:
     c14:	a8 e0       	ldi	r26, 0x08	; 8
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e1       	ldi	r30, 0x10	; 16
     c1a:	f6 e0       	ldi	r31, 0x06	; 6
     c1c:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__prologue_saves__+0x12>
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	83 e0       	ldi	r24, 0x03	; 3
     c26:	89 83       	std	Y+1, r24	; 0x01
     c28:	da 01       	movw	r26, r20
     c2a:	c9 01       	movw	r24, r18
     c2c:	88 27       	eor	r24, r24
     c2e:	b7 fd       	sbrc	r27, 7
     c30:	83 95       	inc	r24
     c32:	99 27       	eor	r25, r25
     c34:	aa 27       	eor	r26, r26
     c36:	bb 27       	eor	r27, r27
     c38:	b8 2e       	mov	r11, r24
     c3a:	21 15       	cp	r18, r1
     c3c:	31 05       	cpc	r19, r1
     c3e:	41 05       	cpc	r20, r1
     c40:	51 05       	cpc	r21, r1
     c42:	19 f4       	brne	.+6      	; 0xc4a <__floatsisf+0x36>
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	89 83       	std	Y+1, r24	; 0x01
     c48:	3a c0       	rjmp	.+116    	; 0xcbe <__floatsisf+0xaa>
     c4a:	88 23       	and	r24, r24
     c4c:	a9 f0       	breq	.+42     	; 0xc78 <__floatsisf+0x64>
     c4e:	20 30       	cpi	r18, 0x00	; 0
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	38 07       	cpc	r19, r24
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	48 07       	cpc	r20, r24
     c58:	80 e8       	ldi	r24, 0x80	; 128
     c5a:	58 07       	cpc	r21, r24
     c5c:	29 f4       	brne	.+10     	; 0xc68 <__floatsisf+0x54>
     c5e:	60 e0       	ldi	r22, 0x00	; 0
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	9f ec       	ldi	r25, 0xCF	; 207
     c66:	30 c0       	rjmp	.+96     	; 0xcc8 <__floatsisf+0xb4>
     c68:	ee 24       	eor	r14, r14
     c6a:	ff 24       	eor	r15, r15
     c6c:	87 01       	movw	r16, r14
     c6e:	e2 1a       	sub	r14, r18
     c70:	f3 0a       	sbc	r15, r19
     c72:	04 0b       	sbc	r16, r20
     c74:	15 0b       	sbc	r17, r21
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <__floatsisf+0x68>
     c78:	79 01       	movw	r14, r18
     c7a:	8a 01       	movw	r16, r20
     c7c:	8e e1       	ldi	r24, 0x1E	; 30
     c7e:	c8 2e       	mov	r12, r24
     c80:	d1 2c       	mov	r13, r1
     c82:	dc 82       	std	Y+4, r13	; 0x04
     c84:	cb 82       	std	Y+3, r12	; 0x03
     c86:	ed 82       	std	Y+5, r14	; 0x05
     c88:	fe 82       	std	Y+6, r15	; 0x06
     c8a:	0f 83       	std	Y+7, r16	; 0x07
     c8c:	18 87       	std	Y+8, r17	; 0x08
     c8e:	c8 01       	movw	r24, r16
     c90:	b7 01       	movw	r22, r14
     c92:	0e 94 35 07 	call	0xe6a	; 0xe6a <__clzsi2>
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	18 16       	cp	r1, r24
     c9a:	19 06       	cpc	r1, r25
     c9c:	84 f4       	brge	.+32     	; 0xcbe <__floatsisf+0xaa>
     c9e:	08 2e       	mov	r0, r24
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <__floatsisf+0x96>
     ca2:	ee 0c       	add	r14, r14
     ca4:	ff 1c       	adc	r15, r15
     ca6:	00 1f       	adc	r16, r16
     ca8:	11 1f       	adc	r17, r17
     caa:	0a 94       	dec	r0
     cac:	d2 f7       	brpl	.-12     	; 0xca2 <__floatsisf+0x8e>
     cae:	ed 82       	std	Y+5, r14	; 0x05
     cb0:	fe 82       	std	Y+6, r15	; 0x06
     cb2:	0f 83       	std	Y+7, r16	; 0x07
     cb4:	18 87       	std	Y+8, r17	; 0x08
     cb6:	c8 1a       	sub	r12, r24
     cb8:	d9 0a       	sbc	r13, r25
     cba:	dc 82       	std	Y+4, r13	; 0x04
     cbc:	cb 82       	std	Y+3, r12	; 0x03
     cbe:	ba 82       	std	Y+2, r11	; 0x02
     cc0:	ce 01       	movw	r24, r28
     cc2:	01 96       	adiw	r24, 0x01	; 1
     cc4:	0e 94 84 07 	call	0xf08	; 0xf08 <__pack_f>
     cc8:	28 96       	adiw	r28, 0x08	; 8
     cca:	e9 e0       	ldi	r30, 0x09	; 9
     ccc:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__epilogue_restores__+0x12>

00000cd0 <__fixsfsi>:
     cd0:	ac e0       	ldi	r26, 0x0C	; 12
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	ee e6       	ldi	r30, 0x6E	; 110
     cd6:	f6 e0       	ldi	r31, 0x06	; 6
     cd8:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__prologue_saves__+0x20>
     cdc:	69 83       	std	Y+1, r22	; 0x01
     cde:	7a 83       	std	Y+2, r23	; 0x02
     ce0:	8b 83       	std	Y+3, r24	; 0x03
     ce2:	9c 83       	std	Y+4, r25	; 0x04
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	be 01       	movw	r22, r28
     cea:	6b 5f       	subi	r22, 0xFB	; 251
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__unpack_f>
     cf2:	8d 81       	ldd	r24, Y+5	; 0x05
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	61 f1       	breq	.+88     	; 0xd50 <__fixsfsi+0x80>
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	50 f1       	brcs	.+84     	; 0xd50 <__fixsfsi+0x80>
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	21 f4       	brne	.+8      	; 0xd08 <__fixsfsi+0x38>
     d00:	8e 81       	ldd	r24, Y+6	; 0x06
     d02:	88 23       	and	r24, r24
     d04:	51 f1       	breq	.+84     	; 0xd5a <__fixsfsi+0x8a>
     d06:	2e c0       	rjmp	.+92     	; 0xd64 <__fixsfsi+0x94>
     d08:	2f 81       	ldd	r18, Y+7	; 0x07
     d0a:	38 85       	ldd	r19, Y+8	; 0x08
     d0c:	37 fd       	sbrc	r19, 7
     d0e:	20 c0       	rjmp	.+64     	; 0xd50 <__fixsfsi+0x80>
     d10:	6e 81       	ldd	r22, Y+6	; 0x06
     d12:	2f 31       	cpi	r18, 0x1F	; 31
     d14:	31 05       	cpc	r19, r1
     d16:	1c f0       	brlt	.+6      	; 0xd1e <__fixsfsi+0x4e>
     d18:	66 23       	and	r22, r22
     d1a:	f9 f0       	breq	.+62     	; 0xd5a <__fixsfsi+0x8a>
     d1c:	23 c0       	rjmp	.+70     	; 0xd64 <__fixsfsi+0x94>
     d1e:	8e e1       	ldi	r24, 0x1E	; 30
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	82 1b       	sub	r24, r18
     d24:	93 0b       	sbc	r25, r19
     d26:	29 85       	ldd	r18, Y+9	; 0x09
     d28:	3a 85       	ldd	r19, Y+10	; 0x0a
     d2a:	4b 85       	ldd	r20, Y+11	; 0x0b
     d2c:	5c 85       	ldd	r21, Y+12	; 0x0c
     d2e:	04 c0       	rjmp	.+8      	; 0xd38 <__fixsfsi+0x68>
     d30:	56 95       	lsr	r21
     d32:	47 95       	ror	r20
     d34:	37 95       	ror	r19
     d36:	27 95       	ror	r18
     d38:	8a 95       	dec	r24
     d3a:	d2 f7       	brpl	.-12     	; 0xd30 <__fixsfsi+0x60>
     d3c:	66 23       	and	r22, r22
     d3e:	b1 f0       	breq	.+44     	; 0xd6c <__fixsfsi+0x9c>
     d40:	50 95       	com	r21
     d42:	40 95       	com	r20
     d44:	30 95       	com	r19
     d46:	21 95       	neg	r18
     d48:	3f 4f       	sbci	r19, 0xFF	; 255
     d4a:	4f 4f       	sbci	r20, 0xFF	; 255
     d4c:	5f 4f       	sbci	r21, 0xFF	; 255
     d4e:	0e c0       	rjmp	.+28     	; 0xd6c <__fixsfsi+0x9c>
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	09 c0       	rjmp	.+18     	; 0xd6c <__fixsfsi+0x9c>
     d5a:	2f ef       	ldi	r18, 0xFF	; 255
     d5c:	3f ef       	ldi	r19, 0xFF	; 255
     d5e:	4f ef       	ldi	r20, 0xFF	; 255
     d60:	5f e7       	ldi	r21, 0x7F	; 127
     d62:	04 c0       	rjmp	.+8      	; 0xd6c <__fixsfsi+0x9c>
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e8       	ldi	r21, 0x80	; 128
     d6c:	b9 01       	movw	r22, r18
     d6e:	ca 01       	movw	r24, r20
     d70:	2c 96       	adiw	r28, 0x0c	; 12
     d72:	e2 e0       	ldi	r30, 0x02	; 2
     d74:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__epilogue_restores__+0x20>

00000d78 <__floatunsisf>:
     d78:	a8 e0       	ldi	r26, 0x08	; 8
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e2 ec       	ldi	r30, 0xC2	; 194
     d7e:	f6 e0       	ldi	r31, 0x06	; 6
     d80:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__prologue_saves__+0x10>
     d84:	7b 01       	movw	r14, r22
     d86:	8c 01       	movw	r16, r24
     d88:	61 15       	cp	r22, r1
     d8a:	71 05       	cpc	r23, r1
     d8c:	81 05       	cpc	r24, r1
     d8e:	91 05       	cpc	r25, r1
     d90:	19 f4       	brne	.+6      	; 0xd98 <__floatunsisf+0x20>
     d92:	82 e0       	ldi	r24, 0x02	; 2
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	60 c0       	rjmp	.+192    	; 0xe58 <__floatunsisf+0xe0>
     d98:	83 e0       	ldi	r24, 0x03	; 3
     d9a:	89 83       	std	Y+1, r24	; 0x01
     d9c:	8e e1       	ldi	r24, 0x1E	; 30
     d9e:	c8 2e       	mov	r12, r24
     da0:	d1 2c       	mov	r13, r1
     da2:	dc 82       	std	Y+4, r13	; 0x04
     da4:	cb 82       	std	Y+3, r12	; 0x03
     da6:	ed 82       	std	Y+5, r14	; 0x05
     da8:	fe 82       	std	Y+6, r15	; 0x06
     daa:	0f 83       	std	Y+7, r16	; 0x07
     dac:	18 87       	std	Y+8, r17	; 0x08
     dae:	c8 01       	movw	r24, r16
     db0:	b7 01       	movw	r22, r14
     db2:	0e 94 35 07 	call	0xe6a	; 0xe6a <__clzsi2>
     db6:	fc 01       	movw	r30, r24
     db8:	31 97       	sbiw	r30, 0x01	; 1
     dba:	f7 ff       	sbrs	r31, 7
     dbc:	3b c0       	rjmp	.+118    	; 0xe34 <__floatunsisf+0xbc>
     dbe:	22 27       	eor	r18, r18
     dc0:	33 27       	eor	r19, r19
     dc2:	2e 1b       	sub	r18, r30
     dc4:	3f 0b       	sbc	r19, r31
     dc6:	57 01       	movw	r10, r14
     dc8:	68 01       	movw	r12, r16
     dca:	02 2e       	mov	r0, r18
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <__floatunsisf+0x5e>
     dce:	d6 94       	lsr	r13
     dd0:	c7 94       	ror	r12
     dd2:	b7 94       	ror	r11
     dd4:	a7 94       	ror	r10
     dd6:	0a 94       	dec	r0
     dd8:	d2 f7       	brpl	.-12     	; 0xdce <__floatunsisf+0x56>
     dda:	40 e0       	ldi	r20, 0x00	; 0
     ddc:	50 e0       	ldi	r21, 0x00	; 0
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e0       	ldi	r26, 0x00	; 0
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	04 c0       	rjmp	.+8      	; 0xdf4 <__floatunsisf+0x7c>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	aa 1f       	adc	r26, r26
     df2:	bb 1f       	adc	r27, r27
     df4:	2a 95       	dec	r18
     df6:	d2 f7       	brpl	.-12     	; 0xdec <__floatunsisf+0x74>
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	a1 09       	sbc	r26, r1
     dfc:	b1 09       	sbc	r27, r1
     dfe:	8e 21       	and	r24, r14
     e00:	9f 21       	and	r25, r15
     e02:	a0 23       	and	r26, r16
     e04:	b1 23       	and	r27, r17
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	a1 05       	cpc	r26, r1
     e0a:	b1 05       	cpc	r27, r1
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__floatunsisf+0x9e>
     e0e:	41 e0       	ldi	r20, 0x01	; 1
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	70 e0       	ldi	r23, 0x00	; 0
     e16:	4a 29       	or	r20, r10
     e18:	5b 29       	or	r21, r11
     e1a:	6c 29       	or	r22, r12
     e1c:	7d 29       	or	r23, r13
     e1e:	4d 83       	std	Y+5, r20	; 0x05
     e20:	5e 83       	std	Y+6, r21	; 0x06
     e22:	6f 83       	std	Y+7, r22	; 0x07
     e24:	78 87       	std	Y+8, r23	; 0x08
     e26:	8e e1       	ldi	r24, 0x1E	; 30
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	8e 1b       	sub	r24, r30
     e2c:	9f 0b       	sbc	r25, r31
     e2e:	9c 83       	std	Y+4, r25	; 0x04
     e30:	8b 83       	std	Y+3, r24	; 0x03
     e32:	12 c0       	rjmp	.+36     	; 0xe58 <__floatunsisf+0xe0>
     e34:	30 97       	sbiw	r30, 0x00	; 0
     e36:	81 f0       	breq	.+32     	; 0xe58 <__floatunsisf+0xe0>
     e38:	0e 2e       	mov	r0, r30
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <__floatunsisf+0xcc>
     e3c:	ee 0c       	add	r14, r14
     e3e:	ff 1c       	adc	r15, r15
     e40:	00 1f       	adc	r16, r16
     e42:	11 1f       	adc	r17, r17
     e44:	0a 94       	dec	r0
     e46:	d2 f7       	brpl	.-12     	; 0xe3c <__floatunsisf+0xc4>
     e48:	ed 82       	std	Y+5, r14	; 0x05
     e4a:	fe 82       	std	Y+6, r15	; 0x06
     e4c:	0f 83       	std	Y+7, r16	; 0x07
     e4e:	18 87       	std	Y+8, r17	; 0x08
     e50:	ce 1a       	sub	r12, r30
     e52:	df 0a       	sbc	r13, r31
     e54:	dc 82       	std	Y+4, r13	; 0x04
     e56:	cb 82       	std	Y+3, r12	; 0x03
     e58:	1a 82       	std	Y+2, r1	; 0x02
     e5a:	ce 01       	movw	r24, r28
     e5c:	01 96       	adiw	r24, 0x01	; 1
     e5e:	0e 94 84 07 	call	0xf08	; 0xf08 <__pack_f>
     e62:	28 96       	adiw	r28, 0x08	; 8
     e64:	ea e0       	ldi	r30, 0x0A	; 10
     e66:	0c 94 4e 09 	jmp	0x129c	; 0x129c <__epilogue_restores__+0x10>

00000e6a <__clzsi2>:
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	7b 01       	movw	r14, r22
     e74:	8c 01       	movw	r16, r24
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	e8 16       	cp	r14, r24
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	f8 06       	cpc	r15, r24
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	08 07       	cpc	r16, r24
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	18 07       	cpc	r17, r24
     e86:	88 f4       	brcc	.+34     	; 0xeaa <__clzsi2+0x40>
     e88:	8f ef       	ldi	r24, 0xFF	; 255
     e8a:	e8 16       	cp	r14, r24
     e8c:	f1 04       	cpc	r15, r1
     e8e:	01 05       	cpc	r16, r1
     e90:	11 05       	cpc	r17, r1
     e92:	31 f0       	breq	.+12     	; 0xea0 <__clzsi2+0x36>
     e94:	28 f0       	brcs	.+10     	; 0xea0 <__clzsi2+0x36>
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	17 c0       	rjmp	.+46     	; 0xece <__clzsi2+0x64>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a0 e0       	ldi	r26, 0x00	; 0
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	12 c0       	rjmp	.+36     	; 0xece <__clzsi2+0x64>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	e8 16       	cp	r14, r24
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	f8 06       	cpc	r15, r24
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	08 07       	cpc	r16, r24
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	18 07       	cpc	r17, r24
     eba:	28 f0       	brcs	.+10     	; 0xec6 <__clzsi2+0x5c>
     ebc:	88 e1       	ldi	r24, 0x18	; 24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e0       	ldi	r26, 0x00	; 0
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	04 c0       	rjmp	.+8      	; 0xece <__clzsi2+0x64>
     ec6:	80 e1       	ldi	r24, 0x10	; 16
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	a0 e0       	ldi	r26, 0x00	; 0
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	20 e2       	ldi	r18, 0x20	; 32
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	50 e0       	ldi	r21, 0x00	; 0
     ed6:	28 1b       	sub	r18, r24
     ed8:	39 0b       	sbc	r19, r25
     eda:	4a 0b       	sbc	r20, r26
     edc:	5b 0b       	sbc	r21, r27
     ede:	04 c0       	rjmp	.+8      	; 0xee8 <__clzsi2+0x7e>
     ee0:	16 95       	lsr	r17
     ee2:	07 95       	ror	r16
     ee4:	f7 94       	ror	r15
     ee6:	e7 94       	ror	r14
     ee8:	8a 95       	dec	r24
     eea:	d2 f7       	brpl	.-12     	; 0xee0 <__clzsi2+0x76>
     eec:	f7 01       	movw	r30, r14
     eee:	e8 59       	subi	r30, 0x98	; 152
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	80 81       	ld	r24, Z
     ef4:	28 1b       	sub	r18, r24
     ef6:	31 09       	sbc	r19, r1
     ef8:	41 09       	sbc	r20, r1
     efa:	51 09       	sbc	r21, r1
     efc:	c9 01       	movw	r24, r18
     efe:	1f 91       	pop	r17
     f00:	0f 91       	pop	r16
     f02:	ff 90       	pop	r15
     f04:	ef 90       	pop	r14
     f06:	08 95       	ret

00000f08 <__pack_f>:
     f08:	df 92       	push	r13
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	fc 01       	movw	r30, r24
     f14:	e4 80       	ldd	r14, Z+4	; 0x04
     f16:	f5 80       	ldd	r15, Z+5	; 0x05
     f18:	06 81       	ldd	r16, Z+6	; 0x06
     f1a:	17 81       	ldd	r17, Z+7	; 0x07
     f1c:	d1 80       	ldd	r13, Z+1	; 0x01
     f1e:	80 81       	ld	r24, Z
     f20:	82 30       	cpi	r24, 0x02	; 2
     f22:	48 f4       	brcc	.+18     	; 0xf36 <__pack_f+0x2e>
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a0 e1       	ldi	r26, 0x10	; 16
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e8 2a       	or	r14, r24
     f2e:	f9 2a       	or	r15, r25
     f30:	0a 2b       	or	r16, r26
     f32:	1b 2b       	or	r17, r27
     f34:	a5 c0       	rjmp	.+330    	; 0x1080 <__pack_f+0x178>
     f36:	84 30       	cpi	r24, 0x04	; 4
     f38:	09 f4       	brne	.+2      	; 0xf3c <__pack_f+0x34>
     f3a:	9f c0       	rjmp	.+318    	; 0x107a <__pack_f+0x172>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	21 f4       	brne	.+8      	; 0xf48 <__pack_f+0x40>
     f40:	ee 24       	eor	r14, r14
     f42:	ff 24       	eor	r15, r15
     f44:	87 01       	movw	r16, r14
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <__pack_f+0x4a>
     f48:	e1 14       	cp	r14, r1
     f4a:	f1 04       	cpc	r15, r1
     f4c:	01 05       	cpc	r16, r1
     f4e:	11 05       	cpc	r17, r1
     f50:	19 f4       	brne	.+6      	; 0xf58 <__pack_f+0x50>
     f52:	e0 e0       	ldi	r30, 0x00	; 0
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	96 c0       	rjmp	.+300    	; 0x1084 <__pack_f+0x17c>
     f58:	62 81       	ldd	r22, Z+2	; 0x02
     f5a:	73 81       	ldd	r23, Z+3	; 0x03
     f5c:	9f ef       	ldi	r25, 0xFF	; 255
     f5e:	62 38       	cpi	r22, 0x82	; 130
     f60:	79 07       	cpc	r23, r25
     f62:	0c f0       	brlt	.+2      	; 0xf66 <__pack_f+0x5e>
     f64:	5b c0       	rjmp	.+182    	; 0x101c <__pack_f+0x114>
     f66:	22 e8       	ldi	r18, 0x82	; 130
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	26 1b       	sub	r18, r22
     f6c:	37 0b       	sbc	r19, r23
     f6e:	2a 31       	cpi	r18, 0x1A	; 26
     f70:	31 05       	cpc	r19, r1
     f72:	2c f0       	brlt	.+10     	; 0xf7e <__pack_f+0x76>
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	2a c0       	rjmp	.+84     	; 0xfd2 <__pack_f+0xca>
     f7e:	b8 01       	movw	r22, r16
     f80:	a7 01       	movw	r20, r14
     f82:	02 2e       	mov	r0, r18
     f84:	04 c0       	rjmp	.+8      	; 0xf8e <__pack_f+0x86>
     f86:	76 95       	lsr	r23
     f88:	67 95       	ror	r22
     f8a:	57 95       	ror	r21
     f8c:	47 95       	ror	r20
     f8e:	0a 94       	dec	r0
     f90:	d2 f7       	brpl	.-12     	; 0xf86 <__pack_f+0x7e>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a0 e0       	ldi	r26, 0x00	; 0
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <__pack_f+0x9c>
     f9c:	88 0f       	add	r24, r24
     f9e:	99 1f       	adc	r25, r25
     fa0:	aa 1f       	adc	r26, r26
     fa2:	bb 1f       	adc	r27, r27
     fa4:	2a 95       	dec	r18
     fa6:	d2 f7       	brpl	.-12     	; 0xf9c <__pack_f+0x94>
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	a1 09       	sbc	r26, r1
     fac:	b1 09       	sbc	r27, r1
     fae:	8e 21       	and	r24, r14
     fb0:	9f 21       	and	r25, r15
     fb2:	a0 23       	and	r26, r16
     fb4:	b1 23       	and	r27, r17
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	a1 05       	cpc	r26, r1
     fba:	b1 05       	cpc	r27, r1
     fbc:	21 f0       	breq	.+8      	; 0xfc6 <__pack_f+0xbe>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	9a 01       	movw	r18, r20
     fc8:	ab 01       	movw	r20, r22
     fca:	28 2b       	or	r18, r24
     fcc:	39 2b       	or	r19, r25
     fce:	4a 2b       	or	r20, r26
     fd0:	5b 2b       	or	r21, r27
     fd2:	da 01       	movw	r26, r20
     fd4:	c9 01       	movw	r24, r18
     fd6:	8f 77       	andi	r24, 0x7F	; 127
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	a0 70       	andi	r26, 0x00	; 0
     fdc:	b0 70       	andi	r27, 0x00	; 0
     fde:	80 34       	cpi	r24, 0x40	; 64
     fe0:	91 05       	cpc	r25, r1
     fe2:	a1 05       	cpc	r26, r1
     fe4:	b1 05       	cpc	r27, r1
     fe6:	39 f4       	brne	.+14     	; 0xff6 <__pack_f+0xee>
     fe8:	27 ff       	sbrs	r18, 7
     fea:	09 c0       	rjmp	.+18     	; 0xffe <__pack_f+0xf6>
     fec:	20 5c       	subi	r18, 0xC0	; 192
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	4f 4f       	sbci	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	04 c0       	rjmp	.+8      	; 0xffe <__pack_f+0xf6>
     ff6:	21 5c       	subi	r18, 0xC1	; 193
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
     ffa:	4f 4f       	sbci	r20, 0xFF	; 255
     ffc:	5f 4f       	sbci	r21, 0xFF	; 255
     ffe:	e0 e0       	ldi	r30, 0x00	; 0
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	20 30       	cpi	r18, 0x00	; 0
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	3a 07       	cpc	r19, r26
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	4a 07       	cpc	r20, r26
    100c:	a0 e4       	ldi	r26, 0x40	; 64
    100e:	5a 07       	cpc	r21, r26
    1010:	10 f0       	brcs	.+4      	; 0x1016 <__pack_f+0x10e>
    1012:	e1 e0       	ldi	r30, 0x01	; 1
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	79 01       	movw	r14, r18
    1018:	8a 01       	movw	r16, r20
    101a:	27 c0       	rjmp	.+78     	; 0x106a <__pack_f+0x162>
    101c:	60 38       	cpi	r22, 0x80	; 128
    101e:	71 05       	cpc	r23, r1
    1020:	64 f5       	brge	.+88     	; 0x107a <__pack_f+0x172>
    1022:	fb 01       	movw	r30, r22
    1024:	e1 58       	subi	r30, 0x81	; 129
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	d8 01       	movw	r26, r16
    102a:	c7 01       	movw	r24, r14
    102c:	8f 77       	andi	r24, 0x7F	; 127
    102e:	90 70       	andi	r25, 0x00	; 0
    1030:	a0 70       	andi	r26, 0x00	; 0
    1032:	b0 70       	andi	r27, 0x00	; 0
    1034:	80 34       	cpi	r24, 0x40	; 64
    1036:	91 05       	cpc	r25, r1
    1038:	a1 05       	cpc	r26, r1
    103a:	b1 05       	cpc	r27, r1
    103c:	39 f4       	brne	.+14     	; 0x104c <__pack_f+0x144>
    103e:	e7 fe       	sbrs	r14, 7
    1040:	0d c0       	rjmp	.+26     	; 0x105c <__pack_f+0x154>
    1042:	80 e4       	ldi	r24, 0x40	; 64
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a0 e0       	ldi	r26, 0x00	; 0
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	04 c0       	rjmp	.+8      	; 0x1054 <__pack_f+0x14c>
    104c:	8f e3       	ldi	r24, 0x3F	; 63
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 0e       	add	r14, r24
    1056:	f9 1e       	adc	r15, r25
    1058:	0a 1f       	adc	r16, r26
    105a:	1b 1f       	adc	r17, r27
    105c:	17 ff       	sbrs	r17, 7
    105e:	05 c0       	rjmp	.+10     	; 0x106a <__pack_f+0x162>
    1060:	16 95       	lsr	r17
    1062:	07 95       	ror	r16
    1064:	f7 94       	ror	r15
    1066:	e7 94       	ror	r14
    1068:	31 96       	adiw	r30, 0x01	; 1
    106a:	87 e0       	ldi	r24, 0x07	; 7
    106c:	16 95       	lsr	r17
    106e:	07 95       	ror	r16
    1070:	f7 94       	ror	r15
    1072:	e7 94       	ror	r14
    1074:	8a 95       	dec	r24
    1076:	d1 f7       	brne	.-12     	; 0x106c <__pack_f+0x164>
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <__pack_f+0x17c>
    107a:	ee 24       	eor	r14, r14
    107c:	ff 24       	eor	r15, r15
    107e:	87 01       	movw	r16, r14
    1080:	ef ef       	ldi	r30, 0xFF	; 255
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	6e 2f       	mov	r22, r30
    1086:	67 95       	ror	r22
    1088:	66 27       	eor	r22, r22
    108a:	67 95       	ror	r22
    108c:	90 2f       	mov	r25, r16
    108e:	9f 77       	andi	r25, 0x7F	; 127
    1090:	d7 94       	ror	r13
    1092:	dd 24       	eor	r13, r13
    1094:	d7 94       	ror	r13
    1096:	8e 2f       	mov	r24, r30
    1098:	86 95       	lsr	r24
    109a:	49 2f       	mov	r20, r25
    109c:	46 2b       	or	r20, r22
    109e:	58 2f       	mov	r21, r24
    10a0:	5d 29       	or	r21, r13
    10a2:	b7 01       	movw	r22, r14
    10a4:	ca 01       	movw	r24, r20
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	08 95       	ret

000010b2 <__unpack_f>:
    10b2:	fc 01       	movw	r30, r24
    10b4:	db 01       	movw	r26, r22
    10b6:	40 81       	ld	r20, Z
    10b8:	51 81       	ldd	r21, Z+1	; 0x01
    10ba:	22 81       	ldd	r18, Z+2	; 0x02
    10bc:	62 2f       	mov	r22, r18
    10be:	6f 77       	andi	r22, 0x7F	; 127
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	22 1f       	adc	r18, r18
    10c4:	22 27       	eor	r18, r18
    10c6:	22 1f       	adc	r18, r18
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	89 2f       	mov	r24, r25
    10cc:	88 0f       	add	r24, r24
    10ce:	82 2b       	or	r24, r18
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	99 1f       	adc	r25, r25
    10d6:	99 27       	eor	r25, r25
    10d8:	99 1f       	adc	r25, r25
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	9c 93       	st	X, r25
    10de:	11 97       	sbiw	r26, 0x01	; 1
    10e0:	21 15       	cp	r18, r1
    10e2:	31 05       	cpc	r19, r1
    10e4:	a9 f5       	brne	.+106    	; 0x1150 <__unpack_f+0x9e>
    10e6:	41 15       	cp	r20, r1
    10e8:	51 05       	cpc	r21, r1
    10ea:	61 05       	cpc	r22, r1
    10ec:	71 05       	cpc	r23, r1
    10ee:	11 f4       	brne	.+4      	; 0x10f4 <__unpack_f+0x42>
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	37 c0       	rjmp	.+110    	; 0x1162 <__unpack_f+0xb0>
    10f4:	82 e8       	ldi	r24, 0x82	; 130
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	13 96       	adiw	r26, 0x03	; 3
    10fa:	9c 93       	st	X, r25
    10fc:	8e 93       	st	-X, r24
    10fe:	12 97       	sbiw	r26, 0x02	; 2
    1100:	9a 01       	movw	r18, r20
    1102:	ab 01       	movw	r20, r22
    1104:	67 e0       	ldi	r22, 0x07	; 7
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	44 1f       	adc	r20, r20
    110c:	55 1f       	adc	r21, r21
    110e:	6a 95       	dec	r22
    1110:	d1 f7       	brne	.-12     	; 0x1106 <__unpack_f+0x54>
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	8c 93       	st	X, r24
    1116:	0d c0       	rjmp	.+26     	; 0x1132 <__unpack_f+0x80>
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	44 1f       	adc	r20, r20
    111e:	55 1f       	adc	r21, r21
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	8d 91       	ld	r24, X+
    1124:	9c 91       	ld	r25, X
    1126:	13 97       	sbiw	r26, 0x03	; 3
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	13 96       	adiw	r26, 0x03	; 3
    112c:	9c 93       	st	X, r25
    112e:	8e 93       	st	-X, r24
    1130:	12 97       	sbiw	r26, 0x02	; 2
    1132:	20 30       	cpi	r18, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	38 07       	cpc	r19, r24
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	48 07       	cpc	r20, r24
    113c:	80 e4       	ldi	r24, 0x40	; 64
    113e:	58 07       	cpc	r21, r24
    1140:	58 f3       	brcs	.-42     	; 0x1118 <__unpack_f+0x66>
    1142:	14 96       	adiw	r26, 0x04	; 4
    1144:	2d 93       	st	X+, r18
    1146:	3d 93       	st	X+, r19
    1148:	4d 93       	st	X+, r20
    114a:	5c 93       	st	X, r21
    114c:	17 97       	sbiw	r26, 0x07	; 7
    114e:	08 95       	ret
    1150:	2f 3f       	cpi	r18, 0xFF	; 255
    1152:	31 05       	cpc	r19, r1
    1154:	79 f4       	brne	.+30     	; 0x1174 <__unpack_f+0xc2>
    1156:	41 15       	cp	r20, r1
    1158:	51 05       	cpc	r21, r1
    115a:	61 05       	cpc	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	19 f4       	brne	.+6      	; 0x1166 <__unpack_f+0xb4>
    1160:	84 e0       	ldi	r24, 0x04	; 4
    1162:	8c 93       	st	X, r24
    1164:	08 95       	ret
    1166:	64 ff       	sbrs	r22, 4
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <__unpack_f+0xbe>
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	8c 93       	st	X, r24
    116e:	12 c0       	rjmp	.+36     	; 0x1194 <__unpack_f+0xe2>
    1170:	1c 92       	st	X, r1
    1172:	10 c0       	rjmp	.+32     	; 0x1194 <__unpack_f+0xe2>
    1174:	2f 57       	subi	r18, 0x7F	; 127
    1176:	30 40       	sbci	r19, 0x00	; 0
    1178:	13 96       	adiw	r26, 0x03	; 3
    117a:	3c 93       	st	X, r19
    117c:	2e 93       	st	-X, r18
    117e:	12 97       	sbiw	r26, 0x02	; 2
    1180:	83 e0       	ldi	r24, 0x03	; 3
    1182:	8c 93       	st	X, r24
    1184:	87 e0       	ldi	r24, 0x07	; 7
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	66 1f       	adc	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	8a 95       	dec	r24
    1190:	d1 f7       	brne	.-12     	; 0x1186 <__unpack_f+0xd4>
    1192:	70 64       	ori	r23, 0x40	; 64
    1194:	14 96       	adiw	r26, 0x04	; 4
    1196:	4d 93       	st	X+, r20
    1198:	5d 93       	st	X+, r21
    119a:	6d 93       	st	X+, r22
    119c:	7c 93       	st	X, r23
    119e:	17 97       	sbiw	r26, 0x07	; 7
    11a0:	08 95       	ret

000011a2 <__fpcmp_parts_f>:
    11a2:	1f 93       	push	r17
    11a4:	dc 01       	movw	r26, r24
    11a6:	fb 01       	movw	r30, r22
    11a8:	9c 91       	ld	r25, X
    11aa:	92 30       	cpi	r25, 0x02	; 2
    11ac:	08 f4       	brcc	.+2      	; 0x11b0 <__fpcmp_parts_f+0xe>
    11ae:	47 c0       	rjmp	.+142    	; 0x123e <__fpcmp_parts_f+0x9c>
    11b0:	80 81       	ld	r24, Z
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	08 f4       	brcc	.+2      	; 0x11b8 <__fpcmp_parts_f+0x16>
    11b6:	43 c0       	rjmp	.+134    	; 0x123e <__fpcmp_parts_f+0x9c>
    11b8:	94 30       	cpi	r25, 0x04	; 4
    11ba:	51 f4       	brne	.+20     	; 0x11d0 <__fpcmp_parts_f+0x2e>
    11bc:	11 96       	adiw	r26, 0x01	; 1
    11be:	1c 91       	ld	r17, X
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	99 f5       	brne	.+102    	; 0x122a <__fpcmp_parts_f+0x88>
    11c4:	81 81       	ldd	r24, Z+1	; 0x01
    11c6:	68 2f       	mov	r22, r24
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	61 1b       	sub	r22, r17
    11cc:	71 09       	sbc	r23, r1
    11ce:	3f c0       	rjmp	.+126    	; 0x124e <__fpcmp_parts_f+0xac>
    11d0:	84 30       	cpi	r24, 0x04	; 4
    11d2:	21 f0       	breq	.+8      	; 0x11dc <__fpcmp_parts_f+0x3a>
    11d4:	92 30       	cpi	r25, 0x02	; 2
    11d6:	31 f4       	brne	.+12     	; 0x11e4 <__fpcmp_parts_f+0x42>
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	b9 f1       	breq	.+110    	; 0x124a <__fpcmp_parts_f+0xa8>
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	88 23       	and	r24, r24
    11e0:	89 f1       	breq	.+98     	; 0x1244 <__fpcmp_parts_f+0xa2>
    11e2:	2d c0       	rjmp	.+90     	; 0x123e <__fpcmp_parts_f+0x9c>
    11e4:	11 96       	adiw	r26, 0x01	; 1
    11e6:	1c 91       	ld	r17, X
    11e8:	11 97       	sbiw	r26, 0x01	; 1
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	f1 f0       	breq	.+60     	; 0x122a <__fpcmp_parts_f+0x88>
    11ee:	81 81       	ldd	r24, Z+1	; 0x01
    11f0:	18 17       	cp	r17, r24
    11f2:	d9 f4       	brne	.+54     	; 0x122a <__fpcmp_parts_f+0x88>
    11f4:	12 96       	adiw	r26, 0x02	; 2
    11f6:	2d 91       	ld	r18, X+
    11f8:	3c 91       	ld	r19, X
    11fa:	13 97       	sbiw	r26, 0x03	; 3
    11fc:	82 81       	ldd	r24, Z+2	; 0x02
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	82 17       	cp	r24, r18
    1202:	93 07       	cpc	r25, r19
    1204:	94 f0       	brlt	.+36     	; 0x122a <__fpcmp_parts_f+0x88>
    1206:	28 17       	cp	r18, r24
    1208:	39 07       	cpc	r19, r25
    120a:	bc f0       	brlt	.+46     	; 0x123a <__fpcmp_parts_f+0x98>
    120c:	14 96       	adiw	r26, 0x04	; 4
    120e:	8d 91       	ld	r24, X+
    1210:	9d 91       	ld	r25, X+
    1212:	0d 90       	ld	r0, X+
    1214:	bc 91       	ld	r27, X
    1216:	a0 2d       	mov	r26, r0
    1218:	24 81       	ldd	r18, Z+4	; 0x04
    121a:	35 81       	ldd	r19, Z+5	; 0x05
    121c:	46 81       	ldd	r20, Z+6	; 0x06
    121e:	57 81       	ldd	r21, Z+7	; 0x07
    1220:	28 17       	cp	r18, r24
    1222:	39 07       	cpc	r19, r25
    1224:	4a 07       	cpc	r20, r26
    1226:	5b 07       	cpc	r21, r27
    1228:	18 f4       	brcc	.+6      	; 0x1230 <__fpcmp_parts_f+0x8e>
    122a:	11 23       	and	r17, r17
    122c:	41 f0       	breq	.+16     	; 0x123e <__fpcmp_parts_f+0x9c>
    122e:	0a c0       	rjmp	.+20     	; 0x1244 <__fpcmp_parts_f+0xa2>
    1230:	82 17       	cp	r24, r18
    1232:	93 07       	cpc	r25, r19
    1234:	a4 07       	cpc	r26, r20
    1236:	b5 07       	cpc	r27, r21
    1238:	40 f4       	brcc	.+16     	; 0x124a <__fpcmp_parts_f+0xa8>
    123a:	11 23       	and	r17, r17
    123c:	19 f0       	breq	.+6      	; 0x1244 <__fpcmp_parts_f+0xa2>
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	05 c0       	rjmp	.+10     	; 0x124e <__fpcmp_parts_f+0xac>
    1244:	6f ef       	ldi	r22, 0xFF	; 255
    1246:	7f ef       	ldi	r23, 0xFF	; 255
    1248:	02 c0       	rjmp	.+4      	; 0x124e <__fpcmp_parts_f+0xac>
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	cb 01       	movw	r24, r22
    1250:	1f 91       	pop	r17
    1252:	08 95       	ret

00001254 <__prologue_saves__>:
    1254:	2f 92       	push	r2
    1256:	3f 92       	push	r3
    1258:	4f 92       	push	r4
    125a:	5f 92       	push	r5
    125c:	6f 92       	push	r6
    125e:	7f 92       	push	r7
    1260:	8f 92       	push	r8
    1262:	9f 92       	push	r9
    1264:	af 92       	push	r10
    1266:	bf 92       	push	r11
    1268:	cf 92       	push	r12
    126a:	df 92       	push	r13
    126c:	ef 92       	push	r14
    126e:	ff 92       	push	r15
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	ca 1b       	sub	r28, r26
    127e:	db 0b       	sbc	r29, r27
    1280:	0f b6       	in	r0, 0x3f	; 63
    1282:	f8 94       	cli
    1284:	de bf       	out	0x3e, r29	; 62
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	cd bf       	out	0x3d, r28	; 61
    128a:	09 94       	ijmp

0000128c <__epilogue_restores__>:
    128c:	2a 88       	ldd	r2, Y+18	; 0x12
    128e:	39 88       	ldd	r3, Y+17	; 0x11
    1290:	48 88       	ldd	r4, Y+16	; 0x10
    1292:	5f 84       	ldd	r5, Y+15	; 0x0f
    1294:	6e 84       	ldd	r6, Y+14	; 0x0e
    1296:	7d 84       	ldd	r7, Y+13	; 0x0d
    1298:	8c 84       	ldd	r8, Y+12	; 0x0c
    129a:	9b 84       	ldd	r9, Y+11	; 0x0b
    129c:	aa 84       	ldd	r10, Y+10	; 0x0a
    129e:	b9 84       	ldd	r11, Y+9	; 0x09
    12a0:	c8 84       	ldd	r12, Y+8	; 0x08
    12a2:	df 80       	ldd	r13, Y+7	; 0x07
    12a4:	ee 80       	ldd	r14, Y+6	; 0x06
    12a6:	fd 80       	ldd	r15, Y+5	; 0x05
    12a8:	0c 81       	ldd	r16, Y+4	; 0x04
    12aa:	1b 81       	ldd	r17, Y+3	; 0x03
    12ac:	aa 81       	ldd	r26, Y+2	; 0x02
    12ae:	b9 81       	ldd	r27, Y+1	; 0x01
    12b0:	ce 0f       	add	r28, r30
    12b2:	d1 1d       	adc	r29, r1
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	ed 01       	movw	r28, r26
    12c0:	08 95       	ret

000012c2 <_exit>:
    12c2:	f8 94       	cli

000012c4 <__stop_program>:
    12c4:	ff cf       	rjmp	.-2      	; 0x12c4 <__stop_program>
