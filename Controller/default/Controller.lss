
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  0000127a  0000130e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800170  00800170  0000141e  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000437  00000000  00000000  000015de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002970  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001584  00000000  00000000  00004385  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001936  00000000  00000000  00005909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  00007240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000551  00000000  00000000  000075b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ade  00000000  00000000  00007b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000085df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1a 02 	call	0x434	; 0x434 <main>
      8a:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setupMIDI>:
}

/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      96:	88 e1       	ldi	r24, 0x18	; 24
      98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9a:	86 e8       	ldi	r24, 0x86	; 134
      9c:	80 bd       	out	0x20, r24	; 32
}
      9e:	08 95       	ret

000000a0 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a0:	8f ef       	ldi	r24, 0xFF	; 255
      a2:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a4:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      a6:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      a8:	87 e0       	ldi	r24, 0x07	; 7
      aa:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      ac:	11 ba       	out	0x11, r1	; 17
}
      ae:	08 95       	ret

000000b0 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b0:	87 e4       	ldi	r24, 0x47	; 71
      b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b4:	87 e8       	ldi	r24, 0x87	; 135
      b6:	86 b9       	out	0x06, r24	; 6
}
      b8:	08 95       	ret

000000ba <setupTimer>:
void setupTimer(){
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      ba:	85 e0       	ldi	r24, 0x05	; 5
      bc:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1);
      be:	84 e0       	ldi	r24, 0x04	; 4
      c0:	89 bf       	out	0x39, r24	; 57
	sei();
      c2:	78 94       	sei
	OCR1A = 1953; // 500ms delay  equation = (500*10^-3/(1/3906.25));
      c4:	81 ea       	ldi	r24, 0xA1	; 161
      c6:	97 e0       	ldi	r25, 0x07	; 7
      c8:	9b bd       	out	0x2b, r25	; 43
      ca:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
      cc:	1d bc       	out	0x2d, r1	; 45
      ce:	1c bc       	out	0x2c, r1	; 44
}
      d0:	08 95       	ret

000000d2 <modify>:
}


void modify(){
	//analogLEDTest();
}
      d2:	08 95       	ret

000000d4 <wait>:
	midi_Transmit(MIDIoff);
}


void wait(int time)
{
      d4:	af 92       	push	r10
      d6:	bf 92       	push	r11
      d8:	cf 92       	push	r12
      da:	df 92       	push	r13
      dc:	ef 92       	push	r14
      de:	ff 92       	push	r15
      e0:	0f 93       	push	r16
      e2:	1f 93       	push	r17
   _delay_ms(time);
      e4:	aa 27       	eor	r26, r26
      e6:	97 fd       	sbrc	r25, 7
      e8:	a0 95       	com	r26
      ea:	ba 2f       	mov	r27, r26
      ec:	bc 01       	movw	r22, r24
      ee:	cd 01       	movw	r24, r26
      f0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__floatsisf>
      f4:	5b 01       	movw	r10, r22
      f6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	4a e7       	ldi	r20, 0x7A	; 122
      fe:	54 e4       	ldi	r21, 0x44	; 68
     100:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
     104:	7b 01       	movw	r14, r22
     106:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	40 e8       	ldi	r20, 0x80	; 128
     10e:	5f e3       	ldi	r21, 0x3F	; 63
     110:	0e 94 b4 05 	call	0xb68	; 0xb68 <__ltsf2>
     114:	88 23       	and	r24, r24
     116:	1c f4       	brge	.+6      	; 0x11e <wait+0x4a>
     118:	61 e0       	ldi	r22, 0x01	; 1
     11a:	70 e0       	ldi	r23, 0x00	; 0
     11c:	24 c0       	rjmp	.+72     	; 0x166 <wait+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     11e:	c8 01       	movw	r24, r16
     120:	b7 01       	movw	r22, r14
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	3f ef       	ldi	r19, 0xFF	; 255
     126:	4f e7       	ldi	r20, 0x7F	; 127
     128:	57 e4       	ldi	r21, 0x47	; 71
     12a:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__gtsf2>
     12e:	18 16       	cp	r1, r24
     130:	b4 f4       	brge	.+44     	; 0x15e <wait+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     132:	c6 01       	movw	r24, r12
     134:	b5 01       	movw	r22, r10
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	40 e2       	ldi	r20, 0x20	; 32
     13c:	51 e4       	ldi	r21, 0x41	; 65
     13e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
     142:	0e 94 84 02 	call	0x508	; 0x508 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     146:	84 e6       	ldi	r24, 0x64	; 100
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	05 c0       	rjmp	.+10     	; 0x156 <wait+0x82>
     14c:	fc 01       	movw	r30, r24
     14e:	31 97       	sbiw	r30, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <wait+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     152:	61 50       	subi	r22, 0x01	; 1
     154:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     156:	61 15       	cp	r22, r1
     158:	71 05       	cpc	r23, r1
     15a:	c1 f7       	brne	.-16     	; 0x14c <wait+0x78>
     15c:	07 c0       	rjmp	.+14     	; 0x16c <wait+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     15e:	c8 01       	movw	r24, r16
     160:	b7 01       	movw	r22, r14
     162:	0e 94 84 02 	call	0x508	; 0x508 <__fixunssfsi>
     166:	cb 01       	movw	r24, r22
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <wait+0x94>
}
     16c:	1f 91       	pop	r17
     16e:	0f 91       	pop	r16
     170:	ff 90       	pop	r15
     172:	ef 90       	pop	r14
     174:	df 90       	pop	r13
     176:	cf 90       	pop	r12
     178:	bf 90       	pop	r11
     17a:	af 90       	pop	r10
     17c:	08 95       	ret

0000017e <ledOFF>:

void ledOFF(){
	PORTB = 0x00;
     17e:	18 ba       	out	0x18, r1	; 24
}
     180:	08 95       	ret

00000182 <ReadADC>:


uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
     182:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
     184:	34 9b       	sbis	0x06, 4	; 6
     186:	fe cf       	rjmp	.-4      	; 0x184 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
     188:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
     18a:	24 b1       	in	r18, 0x04	; 4
     18c:	35 b1       	in	r19, 0x05	; 5
}
     18e:	c9 01       	movw	r24, r18
     190:	08 95       	ret

00000192 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
     192:	0e 94 c1 00 	call	0x182	; 0x182 <ReadADC>
     196:	9c 01       	movw	r18, r24
     198:	90 93 7f 01 	sts	0x017F, r25
     19c:	80 93 7e 01 	sts	0x017E, r24
		if (adc_value > 30){
     1a0:	8f 31       	cpi	r24, 0x1F	; 31
     1a2:	91 05       	cpc	r25, r1
     1a4:	28 f1       	brcs	.+74     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
     1a6:	81 e0       	ldi	r24, 0x01	; 1
     1a8:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     1aa:	2d 33       	cpi	r18, 0x3D	; 61
     1ac:	31 05       	cpc	r19, r1
     1ae:	00 f1       	brcs	.+64     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     1b0:	82 e0       	ldi	r24, 0x02	; 2
     1b2:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     1b4:	2b 35       	cpi	r18, 0x5B	; 91
     1b6:	31 05       	cpc	r19, r1
     1b8:	d8 f0       	brcs	.+54     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     1ba:	84 e0       	ldi	r24, 0x04	; 4
     1bc:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     1be:	29 37       	cpi	r18, 0x79	; 121
     1c0:	31 05       	cpc	r19, r1
     1c2:	b0 f0       	brcs	.+44     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     1c4:	88 e0       	ldi	r24, 0x08	; 8
     1c6:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     1c8:	27 39       	cpi	r18, 0x97	; 151
     1ca:	31 05       	cpc	r19, r1
     1cc:	88 f0       	brcs	.+34     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     1ce:	80 e1       	ldi	r24, 0x10	; 16
     1d0:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     1d2:	25 3b       	cpi	r18, 0xB5	; 181
     1d4:	31 05       	cpc	r19, r1
     1d6:	60 f0       	brcs	.+24     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     1d8:	80 e2       	ldi	r24, 0x20	; 32
     1da:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     1dc:	23 3d       	cpi	r18, 0xD3	; 211
     1de:	31 05       	cpc	r19, r1
     1e0:	38 f0       	brcs	.+14     	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     1e2:	80 e4       	ldi	r24, 0x40	; 64
     1e4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     1e6:	21 3f       	cpi	r18, 0xF1	; 241
     1e8:	31 05       	cpc	r19, r1
     1ea:	10 f0       	brcs	.+4      	; 0x1f0 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     1f0:	20 3f       	cpi	r18, 0xF0	; 240
     1f2:	31 05       	cpc	r19, r1
     1f4:	10 f0       	brcs	.+4      	; 0x1fa <analogLEDTest+0x68>
			PORTB = 0xFF;
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	88 bb       	out	0x18, r24	; 24
     1fa:	08 95       	ret

000001fc <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(! UCSRA & (1 << UDRE) );
     1fc:	9b b1       	in	r25, 0x0b	; 11

	/* Put data into buffer, sends the data */
	UDR = data;
     1fe:	8c b9       	out	0x0c, r24	; 12
}
     200:	08 95       	ret

00000202 <midiTransitTest>:
 

 }

void midiTransitTest(){
	while ((UCSRA & (1 << UDRE)) == 0) {};
     202:	5d 9b       	sbis	0x0b, 5	; 11
     204:	fe cf       	rjmp	.-4      	; 0x202 <midiTransitTest>

	midi_Transmit(MIDIon);
     206:	80 91 60 00 	lds	r24, 0x0060
     20a:	90 91 61 00 	lds	r25, 0x0061
     20e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <midi_Transmit>
	midi_Transmit(MIDIb1);
     212:	80 91 62 00 	lds	r24, 0x0062
     216:	90 91 63 00 	lds	r25, 0x0063
     21a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <midi_Transmit>
	midi_Transmit(MIDIb2);
     21e:	80 91 64 00 	lds	r24, 0x0064
     222:	90 91 65 00 	lds	r25, 0x0065
     226:	0e 94 fe 00 	call	0x1fc	; 0x1fc <midi_Transmit>
	midi_Transmit(MIDIoff);
     22a:	80 91 66 00 	lds	r24, 0x0066
     22e:	90 91 67 00 	lds	r25, 0x0067
     232:	0e 94 fe 00 	call	0x1fc	; 0x1fc <midi_Transmit>
}
     236:	08 95       	ret

00000238 <playSong3>:
		eeprom_address++;		
	}	

}

 void playSong3(){
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	c0 e0       	ldi	r28, 0x00	; 0
     23e:	d0 e0       	ldi	r29, 0x00	; 0
     240:	0a c0       	rjmp	.+20     	; 0x256 <playSong3+0x1e>
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     242:	e1 99       	sbic	0x1c, 1	; 28
     244:	fe cf       	rjmp	.-4      	; 0x242 <playSong3+0xa>
	/* Set up address register */
	EEAR = uiAddress;
     246:	df bb       	out	0x1f, r29	; 31
     248:	ce bb       	out	0x1e, r28	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     24a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     24c:	8d b3       	in	r24, 0x1d	; 29

}

 void playSong3(){
 	for(int i =0; i < eeprom_address; i++){
 		midi_Transmit(EEPROM_read(i));
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 fe 00 	call	0x1fc	; 0x1fc <midi_Transmit>
	}	

}

 void playSong3(){
 	for(int i =0; i < eeprom_address; i++){
     254:	21 96       	adiw	r28, 0x01	; 1
     256:	80 91 7a 01 	lds	r24, 0x017A
     25a:	90 91 7b 01 	lds	r25, 0x017B
     25e:	c8 17       	cp	r28, r24
     260:	d9 07       	cpc	r29, r25
     262:	78 f3       	brcs	.-34     	; 0x242 <playSong3+0xa>
 		midi_Transmit(EEPROM_read(i));
}
 

 }
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <playBack>:
void record(){
	 writeSong3();
}

void playBack(){
	playSong3();
     26a:	0e 94 1c 01 	call	0x238	; 0x238 <playSong3>
}
     26e:	08 95       	ret

00000270 <playSong>:
		eeprom_address += sizeof(midi_Receive());
		notecount= notecount + 1;
	}
}

void playSong(){
     270:	8f 92       	push	r8
     272:	9f 92       	push	r9
     274:	af 92       	push	r10
     276:	bf 92       	push	r11
     278:	cf 92       	push	r12
     27a:	df 92       	push	r13
     27c:	ef 92       	push	r14
     27e:	ff 92       	push	r15
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
	eeprom_address= 0x00;
     288:	10 92 7b 01 	sts	0x017B, r1
     28c:	10 92 7a 01 	sts	0x017A, r1
     290:	84 e6       	ldi	r24, 0x64	; 100
     292:	88 2e       	mov	r8, r24
     294:	91 2c       	mov	r9, r1
     296:	63 c0       	rjmp	.+198    	; 0x35e <playSong+0xee>
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     298:	e1 99       	sbic	0x1c, 1	; 28
     29a:	fe cf       	rjmp	.-4      	; 0x298 <playSong+0x28>
	/* Set up address register */
	EEAR = uiAddress;
     29c:	3f bb       	out	0x1f, r19	; 31
     29e:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     2a0:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     2a2:	8d b3       	in	r24, 0x1d	; 29
}

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
     2a4:	88 bb       	out	0x18, r24	; 24
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     2a6:	e1 99       	sbic	0x1c, 1	; 28
     2a8:	fe cf       	rjmp	.-4      	; 0x2a6 <playSong+0x36>
	/* Set up address register */
	EEAR = uiAddress;
     2aa:	3f bb       	out	0x1f, r19	; 31
     2ac:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     2ae:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     2b0:	8d b3       	in	r24, 0x1d	; 29

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <midi_Transmit>
		eeprom_address++;
     2b8:	c0 91 7a 01 	lds	r28, 0x017A
     2bc:	d0 91 7b 01 	lds	r29, 0x017B
     2c0:	21 96       	adiw	r28, 0x01	; 1
     2c2:	d0 93 7b 01 	sts	0x017B, r29
     2c6:	c0 93 7a 01 	sts	0x017A, r28
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     2ca:	e1 99       	sbic	0x1c, 1	; 28
     2cc:	fe cf       	rjmp	.-4      	; 0x2ca <playSong+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     2ce:	df bb       	out	0x1f, r29	; 31
     2d0:	ce bb       	out	0x1e, r28	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     2d2:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     2d4:	6d b3       	in	r22, 0x1d	; 29
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 96 06 	call	0xd2c	; 0xd2c <__floatunsisf>
     2e0:	5b 01       	movw	r10, r22
     2e2:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2e4:	20 e0       	ldi	r18, 0x00	; 0
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	4a e7       	ldi	r20, 0x7A	; 122
     2ea:	54 e4       	ldi	r21, 0x44	; 68
     2ec:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
     2f0:	7b 01       	movw	r14, r22
     2f2:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     2f4:	20 e0       	ldi	r18, 0x00	; 0
     2f6:	30 e0       	ldi	r19, 0x00	; 0
     2f8:	40 e8       	ldi	r20, 0x80	; 128
     2fa:	5f e3       	ldi	r21, 0x3F	; 63
     2fc:	0e 94 b4 05 	call	0xb68	; 0xb68 <__ltsf2>
     300:	88 23       	and	r24, r24
     302:	1c f4       	brge	.+6      	; 0x30a <playSong+0x9a>
     304:	61 e0       	ldi	r22, 0x01	; 1
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	22 c0       	rjmp	.+68     	; 0x34e <playSong+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
     30a:	c8 01       	movw	r24, r16
     30c:	b7 01       	movw	r22, r14
     30e:	20 e0       	ldi	r18, 0x00	; 0
     310:	3f ef       	ldi	r19, 0xFF	; 255
     312:	4f e7       	ldi	r20, 0x7F	; 127
     314:	57 e4       	ldi	r21, 0x47	; 71
     316:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__gtsf2>
     31a:	18 16       	cp	r1, r24
     31c:	a4 f4       	brge	.+40     	; 0x346 <playSong+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     31e:	c6 01       	movw	r24, r12
     320:	b5 01       	movw	r22, r10
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e2       	ldi	r20, 0x20	; 32
     328:	51 e4       	ldi	r21, 0x41	; 65
     32a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__mulsf3>
     32e:	0e 94 84 02 	call	0x508	; 0x508 <__fixunssfsi>
     332:	05 c0       	rjmp	.+10     	; 0x33e <playSong+0xce>
     334:	c4 01       	movw	r24, r8
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	f1 f7       	brne	.-4      	; 0x336 <playSong+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     33a:	61 50       	subi	r22, 0x01	; 1
     33c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     33e:	61 15       	cp	r22, r1
     340:	71 05       	cpc	r23, r1
     342:	c1 f7       	brne	.-16     	; 0x334 <playSong+0xc4>
     344:	07 c0       	rjmp	.+14     	; 0x354 <playSong+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	0e 94 84 02 	call	0x508	; 0x508 <__fixunssfsi>
     34e:	cb 01       	movw	r24, r22
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <playSong+0xe0>
		eeprom_address++;
     354:	21 96       	adiw	r28, 0x01	; 1
     356:	d0 93 7b 01 	sts	0x017B, r29
     35a:	c0 93 7a 01 	sts	0x017A, r28
	}
}

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
     35e:	20 91 7a 01 	lds	r18, 0x017A
     362:	30 91 7b 01 	lds	r19, 0x017B
     366:	80 91 7c 01 	lds	r24, 0x017C
     36a:	90 91 7d 01 	lds	r25, 0x017D
     36e:	28 17       	cp	r18, r24
     370:	39 07       	cpc	r19, r25
     372:	08 f4       	brcc	.+2      	; 0x376 <playSong+0x106>
     374:	91 cf       	rjmp	.-222    	; 0x298 <playSong+0x28>
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
		eeprom_address++;
	}
	
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	0f 91       	pop	r16
     37e:	ff 90       	pop	r15
     380:	ef 90       	pop	r14
     382:	df 90       	pop	r13
     384:	cf 90       	pop	r12
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	9f 90       	pop	r9
     38c:	8f 90       	pop	r8
     38e:	08 95       	ret

00000390 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( !(UCSRA & (1<<RXC)) ) ;
     390:	5f 9b       	sbis	0x0b, 7	; 11
     392:	fe cf       	rjmp	.-4      	; 0x390 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     394:	8c b1       	in	r24, 0x0c	; 12
}
     396:	08 95       	ret

00000398 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     398:	01 c0       	rjmp	.+2      	; 0x39c <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     39a:	8c b1       	in	r24, 0x0c	; 12
     39c:	5f 99       	sbic	0x0b, 7	; 11
     39e:	fd cf       	rjmp	.-6      	; 0x39a <midi_Flush+0x2>
}
     3a0:	08 95       	ret

000003a2 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     3a2:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     3a4:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     3a6:	08 95       	ret

000003a8 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     3a8:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     3aa:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     3ac:	8c b5       	in	r24, 0x2c	; 44
     3ae:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     3b0:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     3b2:	08 95       	ret

000003b4 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     3b4:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     3b6:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     3b8:	9d bd       	out	0x2d, r25	; 45
     3ba:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     3bc:	2f bf       	out	0x3f, r18	; 63
}
     3be:	08 95       	ret

000003c0 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     3c0:	e1 99       	sbic	0x1c, 1	; 28
     3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <EEPROM_write>

	/* Set up address and data registers */
	EEAR = uiAddress;
     3c4:	9f bb       	out	0x1f, r25	; 31
     3c6:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     3c8:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     3ca:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     3cc:	e1 9a       	sbi	0x1c, 1	; 28
}
     3ce:	08 95       	ret

000003d0 <writeSong3>:
		eeprom_address++;
	}
	
}

void writeSong3(){
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	c0 e8       	ldi	r28, 0x80	; 128
     3d6:	d1 e0       	ldi	r29, 0x01	; 1
     3d8:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( !(UCSRA & (1<<RXC)) ) ;
     3da:	5f 9b       	sbis	0x0b, 7	; 11
     3dc:	fe cf       	rjmp	.-4      	; 0x3da <writeSong3+0xa>

	/* get and return data from buffer */
	return UDR;
     3de:	8c b1       	in	r24, 0x0c	; 12
	
}

void writeSong3(){
	for(int i =0; i <6; i++){
		midiData[i] = midi_Receive();
     3e0:	81 93       	st	Z+, r24
	}
	
}

void writeSong3(){
	for(int i =0; i <6; i++){
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	e6 38       	cpi	r30, 0x86	; 134
     3e6:	f8 07       	cpc	r31, r24
     3e8:	c1 f7       	brne	.-16     	; 0x3da <writeSong3+0xa>
		midiData[i] = midi_Receive();
	}

	PORTB = midiData[1];
     3ea:	80 91 81 01 	lds	r24, 0x0181
     3ee:	88 bb       	out	0x18, r24	; 24
	TCNT1 = 0;
     3f0:	1d bc       	out	0x2d, r1	; 45
     3f2:	1c bc       	out	0x2c, r1	; 44

	midiData[6] = (TCNT1 >> 8);
     3f4:	8c b5       	in	r24, 0x2c	; 44
     3f6:	9d b5       	in	r25, 0x2d	; 45
     3f8:	90 83       	st	Z, r25
	midiData[7] = (TCNT1 & 0xFF);
     3fa:	8c b5       	in	r24, 0x2c	; 44
     3fc:	9d b5       	in	r25, 0x2d	; 45
     3fe:	81 83       	std	Z+1, r24	; 0x01

	for(int j= 0; j <6; j++){
		EEPROM_write(eeprom_address, midiData[j]);
     400:	80 91 7a 01 	lds	r24, 0x017A
     404:	90 91 7b 01 	lds	r25, 0x017B
     408:	69 91       	ld	r22, Y+
     40a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <EEPROM_write>
		eeprom_address++;		
     40e:	80 91 7a 01 	lds	r24, 0x017A
     412:	90 91 7b 01 	lds	r25, 0x017B
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	90 93 7b 01 	sts	0x017B, r25
     41c:	80 93 7a 01 	sts	0x017A, r24
	TCNT1 = 0;

	midiData[6] = (TCNT1 >> 8);
	midiData[7] = (TCNT1 & 0xFF);

	for(int j= 0; j <6; j++){
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	c6 38       	cpi	r28, 0x86	; 134
     424:	d8 07       	cpc	r29, r24
     426:	61 f7       	brne	.-40     	; 0x400 <writeSong3+0x30>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}	

}
     428:	df 91       	pop	r29
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <record>:
}

/***** Create Methods *****/

void record(){
	 writeSong3();
     42e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeSong3>
}
     432:	08 95       	ret

00000434 <main>:
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     438:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     43a:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     43c:	87 e0       	ldi	r24, 0x07	; 7
     43e:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
     440:	11 ba       	out	0x11, r1	; 17
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
}
void setupTimer(){
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
     442:	85 e0       	ldi	r24, 0x05	; 5
     444:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << TOIE1);
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	89 bf       	out	0x39, r24	; 57
	sei();
     44a:	78 94       	sei
	OCR1A = 1953; // 500ms delay  equation = (500*10^-3/(1/3906.25));
     44c:	81 ea       	ldi	r24, 0xA1	; 161
     44e:	97 e0       	ldi	r25, 0x07	; 7
     450:	9b bd       	out	0x2b, r25	; 43
     452:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
     454:	1d bc       	out	0x2d, r1	; 45
     456:	1c bc       	out	0x2c, r1	; 44
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     458:	87 e4       	ldi	r24, 0x47	; 71
     45a:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     45c:	87 e8       	ldi	r24, 0x87	; 135
     45e:	86 b9       	out	0x06, r24	; 6
}

/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     460:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     462:	87 e0       	ldi	r24, 0x07	; 7
     464:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     466:	88 e1       	ldi	r24, 0x18	; 24
     468:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     46a:	86 e8       	ldi	r24, 0x86	; 134
     46c:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     46e:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
     470:	99 b3       	in	r25, 0x19	; 25
     472:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
     474:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
     476:	82 ff       	sbrs	r24, 2
     478:	05 c0       	rjmp	.+10     	; 0x484 <main+0x50>
     47a:	99 23       	and	r25, r25
     47c:	49 f4       	brne	.+18     	; 0x490 <main+0x5c>
}

/***** Create Methods *****/

void record(){
	 writeSong3();
     47e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <writeSong3>
     482:	06 c0       	rjmp	.+12     	; 0x490 <main+0x5c>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
     484:	99 23       	and	r25, r25
     486:	21 f0       	breq	.+8      	; 0x490 <main+0x5c>
			if (mod){ // Modify Mode
     488:	20 fd       	sbrc	r18, 0
     48a:	02 c0       	rjmp	.+4      	; 0x490 <main+0x5c>
void record(){
	 writeSong3();
}

void playBack(){
	playSong3();
     48c:	0e 94 1c 01 	call	0x238	; 0x238 <playSong3>
{
   _delay_ms(time);
}

void ledOFF(){
	PORTB = 0x00;
     490:	18 ba       	out	0x18, r1	; 24
     492:	ed cf       	rjmp	.-38     	; 0x46e <main+0x3a>

00000494 <writeSong>:
void modify(){
	//analogLEDTest();
}

void writeSong(){
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag
     494:	88 b7       	in	r24, 0x38	; 56
     496:	80 61       	ori	r24, 0x10	; 16
     498:	88 bf       	out	0x38, r24	; 56
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( !(UCSRA & (1<<RXC)) ) ;
     49a:	5f 9b       	sbis	0x0b, 7	; 11
     49c:	fe cf       	rjmp	.-4      	; 0x49a <writeSong+0x6>

	/* get and return data from buffer */
	return UDR;
     49e:	8c b1       	in	r24, 0x0c	; 12

void writeSong(){
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag


	if((midi_Receive()) != 0 ) {
     4a0:	88 23       	and	r24, r24
     4a2:	f9 f0       	breq	.+62     	; 0x4e2 <writeSong+0x4e>
		EEPROM_write(eeprom_address, midi_Receive());
     4a4:	80 91 7a 01 	lds	r24, 0x017A
     4a8:	90 91 7b 01 	lds	r25, 0x017B
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( !(UCSRA & (1<<RXC)) ) ;
     4ac:	5f 9b       	sbis	0x0b, 7	; 11
     4ae:	fe cf       	rjmp	.-4      	; 0x4ac <writeSong+0x18>

	/* get and return data from buffer */
	return UDR;
     4b0:	6c b1       	in	r22, 0x0c	; 12
void writeSong(){
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag


	if((midi_Receive()) != 0 ) {
		EEPROM_write(eeprom_address, midi_Receive());
     4b2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <EEPROM_write>
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( !(UCSRA & (1<<RXC)) ) ;
     4b6:	5f 9b       	sbis	0x0b, 7	; 11
     4b8:	fe cf       	rjmp	.-4      	; 0x4b6 <writeSong+0x22>

	/* get and return data from buffer */
	return UDR;
     4ba:	8c b1       	in	r24, 0x0c	; 12
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag


	if((midi_Receive()) != 0 ) {
		EEPROM_write(eeprom_address, midi_Receive());
		PORTB = midi_Receive();	
     4bc:	88 bb       	out	0x18, r24	; 24
		eeprom_address += sizeof(midi_Receive());
     4be:	80 91 7a 01 	lds	r24, 0x017A
     4c2:	90 91 7b 01 	lds	r25, 0x017B
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	90 93 7b 01 	sts	0x017B, r25
     4cc:	80 93 7a 01 	sts	0x017A, r24
		notecount= notecount + 1;
     4d0:	80 91 76 01 	lds	r24, 0x0176
     4d4:	90 91 77 01 	lds	r25, 0x0177
     4d8:	01 96       	adiw	r24, 0x01	; 1
     4da:	90 93 77 01 	sts	0x0177, r25
     4de:	80 93 76 01 	sts	0x0176, r24
     4e2:	08 95       	ret

000004e4 <EEPROM_read>:
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     4e4:	e1 99       	sbic	0x1c, 1	; 28
     4e6:	fe cf       	rjmp	.-4      	; 0x4e4 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     4e8:	9f bb       	out	0x1f, r25	; 31
     4ea:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     4ec:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     4ee:	8d b3       	in	r24, 0x1d	; 29
}
     4f0:	08 95       	ret

000004f2 <__vector_7>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPA_vect){
     4f2:	1f 92       	push	r1
     4f4:	0f 92       	push	r0
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	0f 92       	push	r0
     4fa:	11 24       	eor	r1, r1
	PORTB=0x00;
     4fc:	18 ba       	out	0x18, r1	; 24
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <__fixunssfsi>:
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	7b 01       	movw	r14, r22
     512:	8c 01       	movw	r16, r24
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	5f e4       	ldi	r21, 0x4F	; 79
     51c:	0e 94 84 05 	call	0xb08	; 0xb08 <__gesf2>
     520:	88 23       	and	r24, r24
     522:	8c f0       	brlt	.+34     	; 0x546 <__fixunssfsi+0x3e>
     524:	c8 01       	movw	r24, r16
     526:	b7 01       	movw	r22, r14
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	5f e4       	ldi	r21, 0x4F	; 79
     530:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__subsf3>
     534:	0e 94 42 06 	call	0xc84	; 0xc84 <__fixsfsi>
     538:	9b 01       	movw	r18, r22
     53a:	ac 01       	movw	r20, r24
     53c:	20 50       	subi	r18, 0x00	; 0
     53e:	30 40       	sbci	r19, 0x00	; 0
     540:	40 40       	sbci	r20, 0x00	; 0
     542:	50 48       	sbci	r21, 0x80	; 128
     544:	06 c0       	rjmp	.+12     	; 0x552 <__fixunssfsi+0x4a>
     546:	c8 01       	movw	r24, r16
     548:	b7 01       	movw	r22, r14
     54a:	0e 94 42 06 	call	0xc84	; 0xc84 <__fixsfsi>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	b9 01       	movw	r22, r18
     554:	ca 01       	movw	r24, r20
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	08 95       	ret

00000560 <_fpadd_parts>:
     560:	a0 e0       	ldi	r26, 0x00	; 0
     562:	b0 e0       	ldi	r27, 0x00	; 0
     564:	e6 eb       	ldi	r30, 0xB6	; 182
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__prologue_saves__>
     56c:	dc 01       	movw	r26, r24
     56e:	2b 01       	movw	r4, r22
     570:	fa 01       	movw	r30, r20
     572:	9c 91       	ld	r25, X
     574:	92 30       	cpi	r25, 0x02	; 2
     576:	08 f4       	brcc	.+2      	; 0x57a <_fpadd_parts+0x1a>
     578:	39 c1       	rjmp	.+626    	; 0x7ec <_fpadd_parts+0x28c>
     57a:	eb 01       	movw	r28, r22
     57c:	88 81       	ld	r24, Y
     57e:	82 30       	cpi	r24, 0x02	; 2
     580:	08 f4       	brcc	.+2      	; 0x584 <_fpadd_parts+0x24>
     582:	33 c1       	rjmp	.+614    	; 0x7ea <_fpadd_parts+0x28a>
     584:	94 30       	cpi	r25, 0x04	; 4
     586:	69 f4       	brne	.+26     	; 0x5a2 <_fpadd_parts+0x42>
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	09 f0       	breq	.+2      	; 0x58e <_fpadd_parts+0x2e>
     58c:	2f c1       	rjmp	.+606    	; 0x7ec <_fpadd_parts+0x28c>
     58e:	11 96       	adiw	r26, 0x01	; 1
     590:	9c 91       	ld	r25, X
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	98 17       	cp	r25, r24
     598:	09 f4       	brne	.+2      	; 0x59c <_fpadd_parts+0x3c>
     59a:	28 c1       	rjmp	.+592    	; 0x7ec <_fpadd_parts+0x28c>
     59c:	a8 e6       	ldi	r26, 0x68	; 104
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	25 c1       	rjmp	.+586    	; 0x7ec <_fpadd_parts+0x28c>
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <_fpadd_parts+0x48>
     5a6:	21 c1       	rjmp	.+578    	; 0x7ea <_fpadd_parts+0x28a>
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	a9 f4       	brne	.+42     	; 0x5d6 <_fpadd_parts+0x76>
     5ac:	92 30       	cpi	r25, 0x02	; 2
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <_fpadd_parts+0x52>
     5b0:	1d c1       	rjmp	.+570    	; 0x7ec <_fpadd_parts+0x28c>
     5b2:	9a 01       	movw	r18, r20
     5b4:	ad 01       	movw	r20, r26
     5b6:	88 e0       	ldi	r24, 0x08	; 8
     5b8:	ea 01       	movw	r28, r20
     5ba:	09 90       	ld	r0, Y+
     5bc:	ae 01       	movw	r20, r28
     5be:	e9 01       	movw	r28, r18
     5c0:	09 92       	st	Y+, r0
     5c2:	9e 01       	movw	r18, r28
     5c4:	81 50       	subi	r24, 0x01	; 1
     5c6:	c1 f7       	brne	.-16     	; 0x5b8 <_fpadd_parts+0x58>
     5c8:	e2 01       	movw	r28, r4
     5ca:	89 81       	ldd	r24, Y+1	; 0x01
     5cc:	11 96       	adiw	r26, 0x01	; 1
     5ce:	9c 91       	ld	r25, X
     5d0:	89 23       	and	r24, r25
     5d2:	81 83       	std	Z+1, r24	; 0x01
     5d4:	08 c1       	rjmp	.+528    	; 0x7e6 <_fpadd_parts+0x286>
     5d6:	92 30       	cpi	r25, 0x02	; 2
     5d8:	09 f4       	brne	.+2      	; 0x5dc <_fpadd_parts+0x7c>
     5da:	07 c1       	rjmp	.+526    	; 0x7ea <_fpadd_parts+0x28a>
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	2d 90       	ld	r2, X+
     5e0:	3c 90       	ld	r3, X
     5e2:	13 97       	sbiw	r26, 0x03	; 3
     5e4:	eb 01       	movw	r28, r22
     5e6:	8a 81       	ldd	r24, Y+2	; 0x02
     5e8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ea:	14 96       	adiw	r26, 0x04	; 4
     5ec:	ad 90       	ld	r10, X+
     5ee:	bd 90       	ld	r11, X+
     5f0:	cd 90       	ld	r12, X+
     5f2:	dc 90       	ld	r13, X
     5f4:	17 97       	sbiw	r26, 0x07	; 7
     5f6:	ec 80       	ldd	r14, Y+4	; 0x04
     5f8:	fd 80       	ldd	r15, Y+5	; 0x05
     5fa:	0e 81       	ldd	r16, Y+6	; 0x06
     5fc:	1f 81       	ldd	r17, Y+7	; 0x07
     5fe:	91 01       	movw	r18, r2
     600:	28 1b       	sub	r18, r24
     602:	39 0b       	sbc	r19, r25
     604:	b9 01       	movw	r22, r18
     606:	37 ff       	sbrs	r19, 7
     608:	04 c0       	rjmp	.+8      	; 0x612 <_fpadd_parts+0xb2>
     60a:	66 27       	eor	r22, r22
     60c:	77 27       	eor	r23, r23
     60e:	62 1b       	sub	r22, r18
     610:	73 0b       	sbc	r23, r19
     612:	60 32       	cpi	r22, 0x20	; 32
     614:	71 05       	cpc	r23, r1
     616:	0c f0       	brlt	.+2      	; 0x61a <_fpadd_parts+0xba>
     618:	61 c0       	rjmp	.+194    	; 0x6dc <_fpadd_parts+0x17c>
     61a:	12 16       	cp	r1, r18
     61c:	13 06       	cpc	r1, r19
     61e:	6c f5       	brge	.+90     	; 0x67a <_fpadd_parts+0x11a>
     620:	37 01       	movw	r6, r14
     622:	48 01       	movw	r8, r16
     624:	06 2e       	mov	r0, r22
     626:	04 c0       	rjmp	.+8      	; 0x630 <_fpadd_parts+0xd0>
     628:	96 94       	lsr	r9
     62a:	87 94       	ror	r8
     62c:	77 94       	ror	r7
     62e:	67 94       	ror	r6
     630:	0a 94       	dec	r0
     632:	d2 f7       	brpl	.-12     	; 0x628 <_fpadd_parts+0xc8>
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e0       	ldi	r20, 0x00	; 0
     63a:	50 e0       	ldi	r21, 0x00	; 0
     63c:	04 c0       	rjmp	.+8      	; 0x646 <_fpadd_parts+0xe6>
     63e:	22 0f       	add	r18, r18
     640:	33 1f       	adc	r19, r19
     642:	44 1f       	adc	r20, r20
     644:	55 1f       	adc	r21, r21
     646:	6a 95       	dec	r22
     648:	d2 f7       	brpl	.-12     	; 0x63e <_fpadd_parts+0xde>
     64a:	21 50       	subi	r18, 0x01	; 1
     64c:	30 40       	sbci	r19, 0x00	; 0
     64e:	40 40       	sbci	r20, 0x00	; 0
     650:	50 40       	sbci	r21, 0x00	; 0
     652:	2e 21       	and	r18, r14
     654:	3f 21       	and	r19, r15
     656:	40 23       	and	r20, r16
     658:	51 23       	and	r21, r17
     65a:	21 15       	cp	r18, r1
     65c:	31 05       	cpc	r19, r1
     65e:	41 05       	cpc	r20, r1
     660:	51 05       	cpc	r21, r1
     662:	21 f0       	breq	.+8      	; 0x66c <_fpadd_parts+0x10c>
     664:	21 e0       	ldi	r18, 0x01	; 1
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	79 01       	movw	r14, r18
     66e:	8a 01       	movw	r16, r20
     670:	e6 28       	or	r14, r6
     672:	f7 28       	or	r15, r7
     674:	08 29       	or	r16, r8
     676:	19 29       	or	r17, r9
     678:	3c c0       	rjmp	.+120    	; 0x6f2 <_fpadd_parts+0x192>
     67a:	23 2b       	or	r18, r19
     67c:	d1 f1       	breq	.+116    	; 0x6f2 <_fpadd_parts+0x192>
     67e:	26 0e       	add	r2, r22
     680:	37 1e       	adc	r3, r23
     682:	35 01       	movw	r6, r10
     684:	46 01       	movw	r8, r12
     686:	06 2e       	mov	r0, r22
     688:	04 c0       	rjmp	.+8      	; 0x692 <_fpadd_parts+0x132>
     68a:	96 94       	lsr	r9
     68c:	87 94       	ror	r8
     68e:	77 94       	ror	r7
     690:	67 94       	ror	r6
     692:	0a 94       	dec	r0
     694:	d2 f7       	brpl	.-12     	; 0x68a <_fpadd_parts+0x12a>
     696:	21 e0       	ldi	r18, 0x01	; 1
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	04 c0       	rjmp	.+8      	; 0x6a8 <_fpadd_parts+0x148>
     6a0:	22 0f       	add	r18, r18
     6a2:	33 1f       	adc	r19, r19
     6a4:	44 1f       	adc	r20, r20
     6a6:	55 1f       	adc	r21, r21
     6a8:	6a 95       	dec	r22
     6aa:	d2 f7       	brpl	.-12     	; 0x6a0 <_fpadd_parts+0x140>
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	30 40       	sbci	r19, 0x00	; 0
     6b0:	40 40       	sbci	r20, 0x00	; 0
     6b2:	50 40       	sbci	r21, 0x00	; 0
     6b4:	2a 21       	and	r18, r10
     6b6:	3b 21       	and	r19, r11
     6b8:	4c 21       	and	r20, r12
     6ba:	5d 21       	and	r21, r13
     6bc:	21 15       	cp	r18, r1
     6be:	31 05       	cpc	r19, r1
     6c0:	41 05       	cpc	r20, r1
     6c2:	51 05       	cpc	r21, r1
     6c4:	21 f0       	breq	.+8      	; 0x6ce <_fpadd_parts+0x16e>
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e0       	ldi	r20, 0x00	; 0
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	59 01       	movw	r10, r18
     6d0:	6a 01       	movw	r12, r20
     6d2:	a6 28       	or	r10, r6
     6d4:	b7 28       	or	r11, r7
     6d6:	c8 28       	or	r12, r8
     6d8:	d9 28       	or	r13, r9
     6da:	0b c0       	rjmp	.+22     	; 0x6f2 <_fpadd_parts+0x192>
     6dc:	82 15       	cp	r24, r2
     6de:	93 05       	cpc	r25, r3
     6e0:	2c f0       	brlt	.+10     	; 0x6ec <_fpadd_parts+0x18c>
     6e2:	1c 01       	movw	r2, r24
     6e4:	aa 24       	eor	r10, r10
     6e6:	bb 24       	eor	r11, r11
     6e8:	65 01       	movw	r12, r10
     6ea:	03 c0       	rjmp	.+6      	; 0x6f2 <_fpadd_parts+0x192>
     6ec:	ee 24       	eor	r14, r14
     6ee:	ff 24       	eor	r15, r15
     6f0:	87 01       	movw	r16, r14
     6f2:	11 96       	adiw	r26, 0x01	; 1
     6f4:	9c 91       	ld	r25, X
     6f6:	d2 01       	movw	r26, r4
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	8c 91       	ld	r24, X
     6fc:	98 17       	cp	r25, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <_fpadd_parts+0x1a2>
     700:	45 c0       	rjmp	.+138    	; 0x78c <_fpadd_parts+0x22c>
     702:	99 23       	and	r25, r25
     704:	39 f0       	breq	.+14     	; 0x714 <_fpadd_parts+0x1b4>
     706:	a8 01       	movw	r20, r16
     708:	97 01       	movw	r18, r14
     70a:	2a 19       	sub	r18, r10
     70c:	3b 09       	sbc	r19, r11
     70e:	4c 09       	sbc	r20, r12
     710:	5d 09       	sbc	r21, r13
     712:	06 c0       	rjmp	.+12     	; 0x720 <_fpadd_parts+0x1c0>
     714:	a6 01       	movw	r20, r12
     716:	95 01       	movw	r18, r10
     718:	2e 19       	sub	r18, r14
     71a:	3f 09       	sbc	r19, r15
     71c:	40 0b       	sbc	r20, r16
     71e:	51 0b       	sbc	r21, r17
     720:	57 fd       	sbrc	r21, 7
     722:	08 c0       	rjmp	.+16     	; 0x734 <_fpadd_parts+0x1d4>
     724:	11 82       	std	Z+1, r1	; 0x01
     726:	33 82       	std	Z+3, r3	; 0x03
     728:	22 82       	std	Z+2, r2	; 0x02
     72a:	24 83       	std	Z+4, r18	; 0x04
     72c:	35 83       	std	Z+5, r19	; 0x05
     72e:	46 83       	std	Z+6, r20	; 0x06
     730:	57 83       	std	Z+7, r21	; 0x07
     732:	1d c0       	rjmp	.+58     	; 0x76e <_fpadd_parts+0x20e>
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	81 83       	std	Z+1, r24	; 0x01
     738:	33 82       	std	Z+3, r3	; 0x03
     73a:	22 82       	std	Z+2, r2	; 0x02
     73c:	88 27       	eor	r24, r24
     73e:	99 27       	eor	r25, r25
     740:	dc 01       	movw	r26, r24
     742:	82 1b       	sub	r24, r18
     744:	93 0b       	sbc	r25, r19
     746:	a4 0b       	sbc	r26, r20
     748:	b5 0b       	sbc	r27, r21
     74a:	84 83       	std	Z+4, r24	; 0x04
     74c:	95 83       	std	Z+5, r25	; 0x05
     74e:	a6 83       	std	Z+6, r26	; 0x06
     750:	b7 83       	std	Z+7, r27	; 0x07
     752:	0d c0       	rjmp	.+26     	; 0x76e <_fpadd_parts+0x20e>
     754:	22 0f       	add	r18, r18
     756:	33 1f       	adc	r19, r19
     758:	44 1f       	adc	r20, r20
     75a:	55 1f       	adc	r21, r21
     75c:	24 83       	std	Z+4, r18	; 0x04
     75e:	35 83       	std	Z+5, r19	; 0x05
     760:	46 83       	std	Z+6, r20	; 0x06
     762:	57 83       	std	Z+7, r21	; 0x07
     764:	82 81       	ldd	r24, Z+2	; 0x02
     766:	93 81       	ldd	r25, Z+3	; 0x03
     768:	01 97       	sbiw	r24, 0x01	; 1
     76a:	93 83       	std	Z+3, r25	; 0x03
     76c:	82 83       	std	Z+2, r24	; 0x02
     76e:	24 81       	ldd	r18, Z+4	; 0x04
     770:	35 81       	ldd	r19, Z+5	; 0x05
     772:	46 81       	ldd	r20, Z+6	; 0x06
     774:	57 81       	ldd	r21, Z+7	; 0x07
     776:	da 01       	movw	r26, r20
     778:	c9 01       	movw	r24, r18
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	a1 09       	sbc	r26, r1
     77e:	b1 09       	sbc	r27, r1
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	af 4f       	sbci	r26, 0xFF	; 255
     786:	bf 43       	sbci	r27, 0x3F	; 63
     788:	28 f3       	brcs	.-54     	; 0x754 <_fpadd_parts+0x1f4>
     78a:	0b c0       	rjmp	.+22     	; 0x7a2 <_fpadd_parts+0x242>
     78c:	91 83       	std	Z+1, r25	; 0x01
     78e:	33 82       	std	Z+3, r3	; 0x03
     790:	22 82       	std	Z+2, r2	; 0x02
     792:	ea 0c       	add	r14, r10
     794:	fb 1c       	adc	r15, r11
     796:	0c 1d       	adc	r16, r12
     798:	1d 1d       	adc	r17, r13
     79a:	e4 82       	std	Z+4, r14	; 0x04
     79c:	f5 82       	std	Z+5, r15	; 0x05
     79e:	06 83       	std	Z+6, r16	; 0x06
     7a0:	17 83       	std	Z+7, r17	; 0x07
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	80 83       	st	Z, r24
     7a6:	24 81       	ldd	r18, Z+4	; 0x04
     7a8:	35 81       	ldd	r19, Z+5	; 0x05
     7aa:	46 81       	ldd	r20, Z+6	; 0x06
     7ac:	57 81       	ldd	r21, Z+7	; 0x07
     7ae:	57 ff       	sbrs	r21, 7
     7b0:	1a c0       	rjmp	.+52     	; 0x7e6 <_fpadd_parts+0x286>
     7b2:	c9 01       	movw	r24, r18
     7b4:	aa 27       	eor	r26, r26
     7b6:	97 fd       	sbrc	r25, 7
     7b8:	a0 95       	com	r26
     7ba:	ba 2f       	mov	r27, r26
     7bc:	81 70       	andi	r24, 0x01	; 1
     7be:	90 70       	andi	r25, 0x00	; 0
     7c0:	a0 70       	andi	r26, 0x00	; 0
     7c2:	b0 70       	andi	r27, 0x00	; 0
     7c4:	56 95       	lsr	r21
     7c6:	47 95       	ror	r20
     7c8:	37 95       	ror	r19
     7ca:	27 95       	ror	r18
     7cc:	82 2b       	or	r24, r18
     7ce:	93 2b       	or	r25, r19
     7d0:	a4 2b       	or	r26, r20
     7d2:	b5 2b       	or	r27, r21
     7d4:	84 83       	std	Z+4, r24	; 0x04
     7d6:	95 83       	std	Z+5, r25	; 0x05
     7d8:	a6 83       	std	Z+6, r26	; 0x06
     7da:	b7 83       	std	Z+7, r27	; 0x07
     7dc:	82 81       	ldd	r24, Z+2	; 0x02
     7de:	93 81       	ldd	r25, Z+3	; 0x03
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	93 83       	std	Z+3, r25	; 0x03
     7e4:	82 83       	std	Z+2, r24	; 0x02
     7e6:	df 01       	movw	r26, r30
     7e8:	01 c0       	rjmp	.+2      	; 0x7ec <_fpadd_parts+0x28c>
     7ea:	d2 01       	movw	r26, r4
     7ec:	cd 01       	movw	r24, r26
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	e2 e1       	ldi	r30, 0x12	; 18
     7f4:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__epilogue_restores__>

000007f8 <__subsf3>:
     7f8:	a0 e2       	ldi	r26, 0x20	; 32
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	e2 e0       	ldi	r30, 0x02	; 2
     7fe:	f4 e0       	ldi	r31, 0x04	; 4
     800:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x18>
     804:	69 83       	std	Y+1, r22	; 0x01
     806:	7a 83       	std	Y+2, r23	; 0x02
     808:	8b 83       	std	Y+3, r24	; 0x03
     80a:	9c 83       	std	Y+4, r25	; 0x04
     80c:	2d 83       	std	Y+5, r18	; 0x05
     80e:	3e 83       	std	Y+6, r19	; 0x06
     810:	4f 83       	std	Y+7, r20	; 0x07
     812:	58 87       	std	Y+8, r21	; 0x08
     814:	e9 e0       	ldi	r30, 0x09	; 9
     816:	ee 2e       	mov	r14, r30
     818:	f1 2c       	mov	r15, r1
     81a:	ec 0e       	add	r14, r28
     81c:	fd 1e       	adc	r15, r29
     81e:	ce 01       	movw	r24, r28
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	b7 01       	movw	r22, r14
     824:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     828:	8e 01       	movw	r16, r28
     82a:	0f 5e       	subi	r16, 0xEF	; 239
     82c:	1f 4f       	sbci	r17, 0xFF	; 255
     82e:	ce 01       	movw	r24, r28
     830:	05 96       	adiw	r24, 0x05	; 5
     832:	b8 01       	movw	r22, r16
     834:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     838:	8a 89       	ldd	r24, Y+18	; 0x12
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	89 27       	eor	r24, r25
     83e:	8a 8b       	std	Y+18, r24	; 0x12
     840:	c7 01       	movw	r24, r14
     842:	b8 01       	movw	r22, r16
     844:	ae 01       	movw	r20, r28
     846:	47 5e       	subi	r20, 0xE7	; 231
     848:	5f 4f       	sbci	r21, 0xFF	; 255
     84a:	0e 94 b0 02 	call	0x560	; 0x560 <_fpadd_parts>
     84e:	0e 94 5e 07 	call	0xebc	; 0xebc <__pack_f>
     852:	a0 96       	adiw	r28, 0x20	; 32
     854:	e6 e0       	ldi	r30, 0x06	; 6
     856:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x18>

0000085a <__addsf3>:
     85a:	a0 e2       	ldi	r26, 0x20	; 32
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x18>
     866:	69 83       	std	Y+1, r22	; 0x01
     868:	7a 83       	std	Y+2, r23	; 0x02
     86a:	8b 83       	std	Y+3, r24	; 0x03
     86c:	9c 83       	std	Y+4, r25	; 0x04
     86e:	2d 83       	std	Y+5, r18	; 0x05
     870:	3e 83       	std	Y+6, r19	; 0x06
     872:	4f 83       	std	Y+7, r20	; 0x07
     874:	58 87       	std	Y+8, r21	; 0x08
     876:	f9 e0       	ldi	r31, 0x09	; 9
     878:	ef 2e       	mov	r14, r31
     87a:	f1 2c       	mov	r15, r1
     87c:	ec 0e       	add	r14, r28
     87e:	fd 1e       	adc	r15, r29
     880:	ce 01       	movw	r24, r28
     882:	01 96       	adiw	r24, 0x01	; 1
     884:	b7 01       	movw	r22, r14
     886:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     88a:	8e 01       	movw	r16, r28
     88c:	0f 5e       	subi	r16, 0xEF	; 239
     88e:	1f 4f       	sbci	r17, 0xFF	; 255
     890:	ce 01       	movw	r24, r28
     892:	05 96       	adiw	r24, 0x05	; 5
     894:	b8 01       	movw	r22, r16
     896:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     89a:	c7 01       	movw	r24, r14
     89c:	b8 01       	movw	r22, r16
     89e:	ae 01       	movw	r20, r28
     8a0:	47 5e       	subi	r20, 0xE7	; 231
     8a2:	5f 4f       	sbci	r21, 0xFF	; 255
     8a4:	0e 94 b0 02 	call	0x560	; 0x560 <_fpadd_parts>
     8a8:	0e 94 5e 07 	call	0xebc	; 0xebc <__pack_f>
     8ac:	a0 96       	adiw	r28, 0x20	; 32
     8ae:	e6 e0       	ldi	r30, 0x06	; 6
     8b0:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x18>

000008b4 <__mulsf3>:
     8b4:	a0 e2       	ldi	r26, 0x20	; 32
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e0 e6       	ldi	r30, 0x60	; 96
     8ba:	f4 e0       	ldi	r31, 0x04	; 4
     8bc:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__prologue_saves__>
     8c0:	69 83       	std	Y+1, r22	; 0x01
     8c2:	7a 83       	std	Y+2, r23	; 0x02
     8c4:	8b 83       	std	Y+3, r24	; 0x03
     8c6:	9c 83       	std	Y+4, r25	; 0x04
     8c8:	2d 83       	std	Y+5, r18	; 0x05
     8ca:	3e 83       	std	Y+6, r19	; 0x06
     8cc:	4f 83       	std	Y+7, r20	; 0x07
     8ce:	58 87       	std	Y+8, r21	; 0x08
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	be 01       	movw	r22, r28
     8d6:	67 5f       	subi	r22, 0xF7	; 247
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
     8da:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     8de:	ce 01       	movw	r24, r28
     8e0:	05 96       	adiw	r24, 0x05	; 5
     8e2:	be 01       	movw	r22, r28
     8e4:	6f 5e       	subi	r22, 0xEF	; 239
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     8ec:	99 85       	ldd	r25, Y+9	; 0x09
     8ee:	92 30       	cpi	r25, 0x02	; 2
     8f0:	88 f0       	brcs	.+34     	; 0x914 <__mulsf3+0x60>
     8f2:	89 89       	ldd	r24, Y+17	; 0x11
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	c8 f0       	brcs	.+50     	; 0x92a <__mulsf3+0x76>
     8f8:	94 30       	cpi	r25, 0x04	; 4
     8fa:	19 f4       	brne	.+6      	; 0x902 <__mulsf3+0x4e>
     8fc:	82 30       	cpi	r24, 0x02	; 2
     8fe:	51 f4       	brne	.+20     	; 0x914 <__mulsf3+0x60>
     900:	04 c0       	rjmp	.+8      	; 0x90a <__mulsf3+0x56>
     902:	84 30       	cpi	r24, 0x04	; 4
     904:	29 f4       	brne	.+10     	; 0x910 <__mulsf3+0x5c>
     906:	92 30       	cpi	r25, 0x02	; 2
     908:	81 f4       	brne	.+32     	; 0x92a <__mulsf3+0x76>
     90a:	88 e6       	ldi	r24, 0x68	; 104
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	c6 c0       	rjmp	.+396    	; 0xa9c <__mulsf3+0x1e8>
     910:	92 30       	cpi	r25, 0x02	; 2
     912:	49 f4       	brne	.+18     	; 0x926 <__mulsf3+0x72>
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	9a 85       	ldd	r25, Y+10	; 0x0a
     918:	8a 89       	ldd	r24, Y+18	; 0x12
     91a:	98 13       	cpse	r25, r24
     91c:	21 e0       	ldi	r18, 0x01	; 1
     91e:	2a 87       	std	Y+10, r18	; 0x0a
     920:	ce 01       	movw	r24, r28
     922:	09 96       	adiw	r24, 0x09	; 9
     924:	bb c0       	rjmp	.+374    	; 0xa9c <__mulsf3+0x1e8>
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	49 f4       	brne	.+18     	; 0x93c <__mulsf3+0x88>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	9a 85       	ldd	r25, Y+10	; 0x0a
     92e:	8a 89       	ldd	r24, Y+18	; 0x12
     930:	98 13       	cpse	r25, r24
     932:	21 e0       	ldi	r18, 0x01	; 1
     934:	2a 8b       	std	Y+18, r18	; 0x12
     936:	ce 01       	movw	r24, r28
     938:	41 96       	adiw	r24, 0x11	; 17
     93a:	b0 c0       	rjmp	.+352    	; 0xa9c <__mulsf3+0x1e8>
     93c:	2d 84       	ldd	r2, Y+13	; 0x0d
     93e:	3e 84       	ldd	r3, Y+14	; 0x0e
     940:	4f 84       	ldd	r4, Y+15	; 0x0f
     942:	58 88       	ldd	r5, Y+16	; 0x10
     944:	6d 88       	ldd	r6, Y+21	; 0x15
     946:	7e 88       	ldd	r7, Y+22	; 0x16
     948:	8f 88       	ldd	r8, Y+23	; 0x17
     94a:	98 8c       	ldd	r9, Y+24	; 0x18
     94c:	ee 24       	eor	r14, r14
     94e:	ff 24       	eor	r15, r15
     950:	87 01       	movw	r16, r14
     952:	aa 24       	eor	r10, r10
     954:	bb 24       	eor	r11, r11
     956:	65 01       	movw	r12, r10
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	70 e0       	ldi	r23, 0x00	; 0
     960:	e0 e0       	ldi	r30, 0x00	; 0
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	c1 01       	movw	r24, r2
     966:	81 70       	andi	r24, 0x01	; 1
     968:	90 70       	andi	r25, 0x00	; 0
     96a:	89 2b       	or	r24, r25
     96c:	e9 f0       	breq	.+58     	; 0x9a8 <__mulsf3+0xf4>
     96e:	e6 0c       	add	r14, r6
     970:	f7 1c       	adc	r15, r7
     972:	08 1d       	adc	r16, r8
     974:	19 1d       	adc	r17, r9
     976:	9a 01       	movw	r18, r20
     978:	ab 01       	movw	r20, r22
     97a:	2a 0d       	add	r18, r10
     97c:	3b 1d       	adc	r19, r11
     97e:	4c 1d       	adc	r20, r12
     980:	5d 1d       	adc	r21, r13
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e6 14       	cp	r14, r6
     98c:	f7 04       	cpc	r15, r7
     98e:	08 05       	cpc	r16, r8
     990:	19 05       	cpc	r17, r9
     992:	20 f4       	brcc	.+8      	; 0x99c <__mulsf3+0xe8>
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	ba 01       	movw	r22, r20
     99e:	a9 01       	movw	r20, r18
     9a0:	48 0f       	add	r20, r24
     9a2:	59 1f       	adc	r21, r25
     9a4:	6a 1f       	adc	r22, r26
     9a6:	7b 1f       	adc	r23, r27
     9a8:	aa 0c       	add	r10, r10
     9aa:	bb 1c       	adc	r11, r11
     9ac:	cc 1c       	adc	r12, r12
     9ae:	dd 1c       	adc	r13, r13
     9b0:	97 fe       	sbrs	r9, 7
     9b2:	08 c0       	rjmp	.+16     	; 0x9c4 <__mulsf3+0x110>
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	a8 2a       	or	r10, r24
     9be:	b9 2a       	or	r11, r25
     9c0:	ca 2a       	or	r12, r26
     9c2:	db 2a       	or	r13, r27
     9c4:	31 96       	adiw	r30, 0x01	; 1
     9c6:	e0 32       	cpi	r30, 0x20	; 32
     9c8:	f1 05       	cpc	r31, r1
     9ca:	49 f0       	breq	.+18     	; 0x9de <__mulsf3+0x12a>
     9cc:	66 0c       	add	r6, r6
     9ce:	77 1c       	adc	r7, r7
     9d0:	88 1c       	adc	r8, r8
     9d2:	99 1c       	adc	r9, r9
     9d4:	56 94       	lsr	r5
     9d6:	47 94       	ror	r4
     9d8:	37 94       	ror	r3
     9da:	27 94       	ror	r2
     9dc:	c3 cf       	rjmp	.-122    	; 0x964 <__mulsf3+0xb0>
     9de:	fa 85       	ldd	r31, Y+10	; 0x0a
     9e0:	ea 89       	ldd	r30, Y+18	; 0x12
     9e2:	2b 89       	ldd	r18, Y+19	; 0x13
     9e4:	3c 89       	ldd	r19, Y+20	; 0x14
     9e6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ea:	28 0f       	add	r18, r24
     9ec:	39 1f       	adc	r19, r25
     9ee:	2e 5f       	subi	r18, 0xFE	; 254
     9f0:	3f 4f       	sbci	r19, 0xFF	; 255
     9f2:	17 c0       	rjmp	.+46     	; 0xa22 <__mulsf3+0x16e>
     9f4:	ca 01       	movw	r24, r20
     9f6:	81 70       	andi	r24, 0x01	; 1
     9f8:	90 70       	andi	r25, 0x00	; 0
     9fa:	89 2b       	or	r24, r25
     9fc:	61 f0       	breq	.+24     	; 0xa16 <__mulsf3+0x162>
     9fe:	16 95       	lsr	r17
     a00:	07 95       	ror	r16
     a02:	f7 94       	ror	r15
     a04:	e7 94       	ror	r14
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e0       	ldi	r26, 0x00	; 0
     a0c:	b0 e8       	ldi	r27, 0x80	; 128
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	76 95       	lsr	r23
     a18:	67 95       	ror	r22
     a1a:	57 95       	ror	r21
     a1c:	47 95       	ror	r20
     a1e:	2f 5f       	subi	r18, 0xFF	; 255
     a20:	3f 4f       	sbci	r19, 0xFF	; 255
     a22:	77 fd       	sbrc	r23, 7
     a24:	e7 cf       	rjmp	.-50     	; 0x9f4 <__mulsf3+0x140>
     a26:	0c c0       	rjmp	.+24     	; 0xa40 <__mulsf3+0x18c>
     a28:	44 0f       	add	r20, r20
     a2a:	55 1f       	adc	r21, r21
     a2c:	66 1f       	adc	r22, r22
     a2e:	77 1f       	adc	r23, r23
     a30:	17 fd       	sbrc	r17, 7
     a32:	41 60       	ori	r20, 0x01	; 1
     a34:	ee 0c       	add	r14, r14
     a36:	ff 1c       	adc	r15, r15
     a38:	00 1f       	adc	r16, r16
     a3a:	11 1f       	adc	r17, r17
     a3c:	21 50       	subi	r18, 0x01	; 1
     a3e:	30 40       	sbci	r19, 0x00	; 0
     a40:	40 30       	cpi	r20, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	59 07       	cpc	r21, r25
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	69 07       	cpc	r22, r25
     a4a:	90 e4       	ldi	r25, 0x40	; 64
     a4c:	79 07       	cpc	r23, r25
     a4e:	60 f3       	brcs	.-40     	; 0xa28 <__mulsf3+0x174>
     a50:	2b 8f       	std	Y+27, r18	; 0x1b
     a52:	3c 8f       	std	Y+28, r19	; 0x1c
     a54:	db 01       	movw	r26, r22
     a56:	ca 01       	movw	r24, r20
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	61 f4       	brne	.+24     	; 0xa82 <__mulsf3+0x1ce>
     a6a:	47 fd       	sbrc	r20, 7
     a6c:	0a c0       	rjmp	.+20     	; 0xa82 <__mulsf3+0x1ce>
     a6e:	e1 14       	cp	r14, r1
     a70:	f1 04       	cpc	r15, r1
     a72:	01 05       	cpc	r16, r1
     a74:	11 05       	cpc	r17, r1
     a76:	29 f0       	breq	.+10     	; 0xa82 <__mulsf3+0x1ce>
     a78:	40 5c       	subi	r20, 0xC0	; 192
     a7a:	5f 4f       	sbci	r21, 0xFF	; 255
     a7c:	6f 4f       	sbci	r22, 0xFF	; 255
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	40 78       	andi	r20, 0x80	; 128
     a82:	1a 8e       	std	Y+26, r1	; 0x1a
     a84:	fe 17       	cp	r31, r30
     a86:	11 f0       	breq	.+4      	; 0xa8c <__mulsf3+0x1d8>
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	8a 8f       	std	Y+26, r24	; 0x1a
     a8c:	4d 8f       	std	Y+29, r20	; 0x1d
     a8e:	5e 8f       	std	Y+30, r21	; 0x1e
     a90:	6f 8f       	std	Y+31, r22	; 0x1f
     a92:	78 a3       	std	Y+32, r23	; 0x20
     a94:	83 e0       	ldi	r24, 0x03	; 3
     a96:	89 8f       	std	Y+25, r24	; 0x19
     a98:	ce 01       	movw	r24, r28
     a9a:	49 96       	adiw	r24, 0x19	; 25
     a9c:	0e 94 5e 07 	call	0xebc	; 0xebc <__pack_f>
     aa0:	a0 96       	adiw	r28, 0x20	; 32
     aa2:	e2 e1       	ldi	r30, 0x12	; 18
     aa4:	0c 94 20 09 	jmp	0x1240	; 0x1240 <__epilogue_restores__>

00000aa8 <__gtsf2>:
     aa8:	a8 e1       	ldi	r26, 0x18	; 24
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	ea e5       	ldi	r30, 0x5A	; 90
     aae:	f5 e0       	ldi	r31, 0x05	; 5
     ab0:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x18>
     ab4:	69 83       	std	Y+1, r22	; 0x01
     ab6:	7a 83       	std	Y+2, r23	; 0x02
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	2d 83       	std	Y+5, r18	; 0x05
     abe:	3e 83       	std	Y+6, r19	; 0x06
     ac0:	4f 83       	std	Y+7, r20	; 0x07
     ac2:	58 87       	std	Y+8, r21	; 0x08
     ac4:	89 e0       	ldi	r24, 0x09	; 9
     ac6:	e8 2e       	mov	r14, r24
     ac8:	f1 2c       	mov	r15, r1
     aca:	ec 0e       	add	r14, r28
     acc:	fd 1e       	adc	r15, r29
     ace:	ce 01       	movw	r24, r28
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	b7 01       	movw	r22, r14
     ad4:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     ad8:	8e 01       	movw	r16, r28
     ada:	0f 5e       	subi	r16, 0xEF	; 239
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	ce 01       	movw	r24, r28
     ae0:	05 96       	adiw	r24, 0x05	; 5
     ae2:	b8 01       	movw	r22, r16
     ae4:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     ae8:	89 85       	ldd	r24, Y+9	; 0x09
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	40 f0       	brcs	.+16     	; 0xafe <__gtsf2+0x56>
     aee:	89 89       	ldd	r24, Y+17	; 0x11
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	28 f0       	brcs	.+10     	; 0xafe <__gtsf2+0x56>
     af4:	c7 01       	movw	r24, r14
     af6:	b8 01       	movw	r22, r16
     af8:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fpcmp_parts_f>
     afc:	01 c0       	rjmp	.+2      	; 0xb00 <__gtsf2+0x58>
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	68 96       	adiw	r28, 0x18	; 24
     b02:	e6 e0       	ldi	r30, 0x06	; 6
     b04:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x18>

00000b08 <__gesf2>:
     b08:	a8 e1       	ldi	r26, 0x18	; 24
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x18>
     b14:	69 83       	std	Y+1, r22	; 0x01
     b16:	7a 83       	std	Y+2, r23	; 0x02
     b18:	8b 83       	std	Y+3, r24	; 0x03
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	2d 83       	std	Y+5, r18	; 0x05
     b1e:	3e 83       	std	Y+6, r19	; 0x06
     b20:	4f 83       	std	Y+7, r20	; 0x07
     b22:	58 87       	std	Y+8, r21	; 0x08
     b24:	89 e0       	ldi	r24, 0x09	; 9
     b26:	e8 2e       	mov	r14, r24
     b28:	f1 2c       	mov	r15, r1
     b2a:	ec 0e       	add	r14, r28
     b2c:	fd 1e       	adc	r15, r29
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	b7 01       	movw	r22, r14
     b34:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     b38:	8e 01       	movw	r16, r28
     b3a:	0f 5e       	subi	r16, 0xEF	; 239
     b3c:	1f 4f       	sbci	r17, 0xFF	; 255
     b3e:	ce 01       	movw	r24, r28
     b40:	05 96       	adiw	r24, 0x05	; 5
     b42:	b8 01       	movw	r22, r16
     b44:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     b48:	89 85       	ldd	r24, Y+9	; 0x09
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	40 f0       	brcs	.+16     	; 0xb5e <__gesf2+0x56>
     b4e:	89 89       	ldd	r24, Y+17	; 0x11
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	28 f0       	brcs	.+10     	; 0xb5e <__gesf2+0x56>
     b54:	c7 01       	movw	r24, r14
     b56:	b8 01       	movw	r22, r16
     b58:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fpcmp_parts_f>
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <__gesf2+0x58>
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	68 96       	adiw	r28, 0x18	; 24
     b62:	e6 e0       	ldi	r30, 0x06	; 6
     b64:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x18>

00000b68 <__ltsf2>:
     b68:	a8 e1       	ldi	r26, 0x18	; 24
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ea eb       	ldi	r30, 0xBA	; 186
     b6e:	f5 e0       	ldi	r31, 0x05	; 5
     b70:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x18>
     b74:	69 83       	std	Y+1, r22	; 0x01
     b76:	7a 83       	std	Y+2, r23	; 0x02
     b78:	8b 83       	std	Y+3, r24	; 0x03
     b7a:	9c 83       	std	Y+4, r25	; 0x04
     b7c:	2d 83       	std	Y+5, r18	; 0x05
     b7e:	3e 83       	std	Y+6, r19	; 0x06
     b80:	4f 83       	std	Y+7, r20	; 0x07
     b82:	58 87       	std	Y+8, r21	; 0x08
     b84:	89 e0       	ldi	r24, 0x09	; 9
     b86:	e8 2e       	mov	r14, r24
     b88:	f1 2c       	mov	r15, r1
     b8a:	ec 0e       	add	r14, r28
     b8c:	fd 1e       	adc	r15, r29
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	b7 01       	movw	r22, r14
     b94:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     b98:	8e 01       	movw	r16, r28
     b9a:	0f 5e       	subi	r16, 0xEF	; 239
     b9c:	1f 4f       	sbci	r17, 0xFF	; 255
     b9e:	ce 01       	movw	r24, r28
     ba0:	05 96       	adiw	r24, 0x05	; 5
     ba2:	b8 01       	movw	r22, r16
     ba4:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     ba8:	89 85       	ldd	r24, Y+9	; 0x09
     baa:	82 30       	cpi	r24, 0x02	; 2
     bac:	40 f0       	brcs	.+16     	; 0xbbe <__ltsf2+0x56>
     bae:	89 89       	ldd	r24, Y+17	; 0x11
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	28 f0       	brcs	.+10     	; 0xbbe <__ltsf2+0x56>
     bb4:	c7 01       	movw	r24, r14
     bb6:	b8 01       	movw	r22, r16
     bb8:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fpcmp_parts_f>
     bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <__ltsf2+0x58>
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	68 96       	adiw	r28, 0x18	; 24
     bc2:	e6 e0       	ldi	r30, 0x06	; 6
     bc4:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x18>

00000bc8 <__floatsisf>:
     bc8:	a8 e0       	ldi	r26, 0x08	; 8
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea ee       	ldi	r30, 0xEA	; 234
     bce:	f5 e0       	ldi	r31, 0x05	; 5
     bd0:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__prologue_saves__+0x12>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	83 e0       	ldi	r24, 0x03	; 3
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	da 01       	movw	r26, r20
     bde:	c9 01       	movw	r24, r18
     be0:	88 27       	eor	r24, r24
     be2:	b7 fd       	sbrc	r27, 7
     be4:	83 95       	inc	r24
     be6:	99 27       	eor	r25, r25
     be8:	aa 27       	eor	r26, r26
     bea:	bb 27       	eor	r27, r27
     bec:	b8 2e       	mov	r11, r24
     bee:	21 15       	cp	r18, r1
     bf0:	31 05       	cpc	r19, r1
     bf2:	41 05       	cpc	r20, r1
     bf4:	51 05       	cpc	r21, r1
     bf6:	19 f4       	brne	.+6      	; 0xbfe <__floatsisf+0x36>
     bf8:	82 e0       	ldi	r24, 0x02	; 2
     bfa:	89 83       	std	Y+1, r24	; 0x01
     bfc:	3a c0       	rjmp	.+116    	; 0xc72 <__floatsisf+0xaa>
     bfe:	88 23       	and	r24, r24
     c00:	a9 f0       	breq	.+42     	; 0xc2c <__floatsisf+0x64>
     c02:	20 30       	cpi	r18, 0x00	; 0
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	38 07       	cpc	r19, r24
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	48 07       	cpc	r20, r24
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	58 07       	cpc	r21, r24
     c10:	29 f4       	brne	.+10     	; 0xc1c <__floatsisf+0x54>
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	9f ec       	ldi	r25, 0xCF	; 207
     c1a:	30 c0       	rjmp	.+96     	; 0xc7c <__floatsisf+0xb4>
     c1c:	ee 24       	eor	r14, r14
     c1e:	ff 24       	eor	r15, r15
     c20:	87 01       	movw	r16, r14
     c22:	e2 1a       	sub	r14, r18
     c24:	f3 0a       	sbc	r15, r19
     c26:	04 0b       	sbc	r16, r20
     c28:	15 0b       	sbc	r17, r21
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <__floatsisf+0x68>
     c2c:	79 01       	movw	r14, r18
     c2e:	8a 01       	movw	r16, r20
     c30:	8e e1       	ldi	r24, 0x1E	; 30
     c32:	c8 2e       	mov	r12, r24
     c34:	d1 2c       	mov	r13, r1
     c36:	dc 82       	std	Y+4, r13	; 0x04
     c38:	cb 82       	std	Y+3, r12	; 0x03
     c3a:	ed 82       	std	Y+5, r14	; 0x05
     c3c:	fe 82       	std	Y+6, r15	; 0x06
     c3e:	0f 83       	std	Y+7, r16	; 0x07
     c40:	18 87       	std	Y+8, r17	; 0x08
     c42:	c8 01       	movw	r24, r16
     c44:	b7 01       	movw	r22, r14
     c46:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__clzsi2>
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	18 16       	cp	r1, r24
     c4e:	19 06       	cpc	r1, r25
     c50:	84 f4       	brge	.+32     	; 0xc72 <__floatsisf+0xaa>
     c52:	08 2e       	mov	r0, r24
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__floatsisf+0x96>
     c56:	ee 0c       	add	r14, r14
     c58:	ff 1c       	adc	r15, r15
     c5a:	00 1f       	adc	r16, r16
     c5c:	11 1f       	adc	r17, r17
     c5e:	0a 94       	dec	r0
     c60:	d2 f7       	brpl	.-12     	; 0xc56 <__floatsisf+0x8e>
     c62:	ed 82       	std	Y+5, r14	; 0x05
     c64:	fe 82       	std	Y+6, r15	; 0x06
     c66:	0f 83       	std	Y+7, r16	; 0x07
     c68:	18 87       	std	Y+8, r17	; 0x08
     c6a:	c8 1a       	sub	r12, r24
     c6c:	d9 0a       	sbc	r13, r25
     c6e:	dc 82       	std	Y+4, r13	; 0x04
     c70:	cb 82       	std	Y+3, r12	; 0x03
     c72:	ba 82       	std	Y+2, r11	; 0x02
     c74:	ce 01       	movw	r24, r28
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	0e 94 5e 07 	call	0xebc	; 0xebc <__pack_f>
     c7c:	28 96       	adiw	r28, 0x08	; 8
     c7e:	e9 e0       	ldi	r30, 0x09	; 9
     c80:	0c 94 29 09 	jmp	0x1252	; 0x1252 <__epilogue_restores__+0x12>

00000c84 <__fixsfsi>:
     c84:	ac e0       	ldi	r26, 0x0C	; 12
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e8 e4       	ldi	r30, 0x48	; 72
     c8a:	f6 e0       	ldi	r31, 0x06	; 6
     c8c:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__prologue_saves__+0x20>
     c90:	69 83       	std	Y+1, r22	; 0x01
     c92:	7a 83       	std	Y+2, r23	; 0x02
     c94:	8b 83       	std	Y+3, r24	; 0x03
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	be 01       	movw	r22, r28
     c9e:	6b 5f       	subi	r22, 0xFB	; 251
     ca0:	7f 4f       	sbci	r23, 0xFF	; 255
     ca2:	0e 94 33 08 	call	0x1066	; 0x1066 <__unpack_f>
     ca6:	8d 81       	ldd	r24, Y+5	; 0x05
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	61 f1       	breq	.+88     	; 0xd04 <__fixsfsi+0x80>
     cac:	82 30       	cpi	r24, 0x02	; 2
     cae:	50 f1       	brcs	.+84     	; 0xd04 <__fixsfsi+0x80>
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	21 f4       	brne	.+8      	; 0xcbc <__fixsfsi+0x38>
     cb4:	8e 81       	ldd	r24, Y+6	; 0x06
     cb6:	88 23       	and	r24, r24
     cb8:	51 f1       	breq	.+84     	; 0xd0e <__fixsfsi+0x8a>
     cba:	2e c0       	rjmp	.+92     	; 0xd18 <__fixsfsi+0x94>
     cbc:	2f 81       	ldd	r18, Y+7	; 0x07
     cbe:	38 85       	ldd	r19, Y+8	; 0x08
     cc0:	37 fd       	sbrc	r19, 7
     cc2:	20 c0       	rjmp	.+64     	; 0xd04 <__fixsfsi+0x80>
     cc4:	6e 81       	ldd	r22, Y+6	; 0x06
     cc6:	2f 31       	cpi	r18, 0x1F	; 31
     cc8:	31 05       	cpc	r19, r1
     cca:	1c f0       	brlt	.+6      	; 0xcd2 <__fixsfsi+0x4e>
     ccc:	66 23       	and	r22, r22
     cce:	f9 f0       	breq	.+62     	; 0xd0e <__fixsfsi+0x8a>
     cd0:	23 c0       	rjmp	.+70     	; 0xd18 <__fixsfsi+0x94>
     cd2:	8e e1       	ldi	r24, 0x1E	; 30
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	82 1b       	sub	r24, r18
     cd8:	93 0b       	sbc	r25, r19
     cda:	29 85       	ldd	r18, Y+9	; 0x09
     cdc:	3a 85       	ldd	r19, Y+10	; 0x0a
     cde:	4b 85       	ldd	r20, Y+11	; 0x0b
     ce0:	5c 85       	ldd	r21, Y+12	; 0x0c
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__fixsfsi+0x68>
     ce4:	56 95       	lsr	r21
     ce6:	47 95       	ror	r20
     ce8:	37 95       	ror	r19
     cea:	27 95       	ror	r18
     cec:	8a 95       	dec	r24
     cee:	d2 f7       	brpl	.-12     	; 0xce4 <__fixsfsi+0x60>
     cf0:	66 23       	and	r22, r22
     cf2:	b1 f0       	breq	.+44     	; 0xd20 <__fixsfsi+0x9c>
     cf4:	50 95       	com	r21
     cf6:	40 95       	com	r20
     cf8:	30 95       	com	r19
     cfa:	21 95       	neg	r18
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	4f 4f       	sbci	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	0e c0       	rjmp	.+28     	; 0xd20 <__fixsfsi+0x9c>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	09 c0       	rjmp	.+18     	; 0xd20 <__fixsfsi+0x9c>
     d0e:	2f ef       	ldi	r18, 0xFF	; 255
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f ef       	ldi	r20, 0xFF	; 255
     d14:	5f e7       	ldi	r21, 0x7F	; 127
     d16:	04 c0       	rjmp	.+8      	; 0xd20 <__fixsfsi+0x9c>
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	50 e8       	ldi	r21, 0x80	; 128
     d20:	b9 01       	movw	r22, r18
     d22:	ca 01       	movw	r24, r20
     d24:	2c 96       	adiw	r28, 0x0c	; 12
     d26:	e2 e0       	ldi	r30, 0x02	; 2
     d28:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__epilogue_restores__+0x20>

00000d2c <__floatunsisf>:
     d2c:	a8 e0       	ldi	r26, 0x08	; 8
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ec e9       	ldi	r30, 0x9C	; 156
     d32:	f6 e0       	ldi	r31, 0x06	; 6
     d34:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__prologue_saves__+0x10>
     d38:	7b 01       	movw	r14, r22
     d3a:	8c 01       	movw	r16, r24
     d3c:	61 15       	cp	r22, r1
     d3e:	71 05       	cpc	r23, r1
     d40:	81 05       	cpc	r24, r1
     d42:	91 05       	cpc	r25, r1
     d44:	19 f4       	brne	.+6      	; 0xd4c <__floatunsisf+0x20>
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	60 c0       	rjmp	.+192    	; 0xe0c <__floatunsisf+0xe0>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	8e e1       	ldi	r24, 0x1E	; 30
     d52:	c8 2e       	mov	r12, r24
     d54:	d1 2c       	mov	r13, r1
     d56:	dc 82       	std	Y+4, r13	; 0x04
     d58:	cb 82       	std	Y+3, r12	; 0x03
     d5a:	ed 82       	std	Y+5, r14	; 0x05
     d5c:	fe 82       	std	Y+6, r15	; 0x06
     d5e:	0f 83       	std	Y+7, r16	; 0x07
     d60:	18 87       	std	Y+8, r17	; 0x08
     d62:	c8 01       	movw	r24, r16
     d64:	b7 01       	movw	r22, r14
     d66:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__clzsi2>
     d6a:	fc 01       	movw	r30, r24
     d6c:	31 97       	sbiw	r30, 0x01	; 1
     d6e:	f7 ff       	sbrs	r31, 7
     d70:	3b c0       	rjmp	.+118    	; 0xde8 <__floatunsisf+0xbc>
     d72:	22 27       	eor	r18, r18
     d74:	33 27       	eor	r19, r19
     d76:	2e 1b       	sub	r18, r30
     d78:	3f 0b       	sbc	r19, r31
     d7a:	57 01       	movw	r10, r14
     d7c:	68 01       	movw	r12, r16
     d7e:	02 2e       	mov	r0, r18
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <__floatunsisf+0x5e>
     d82:	d6 94       	lsr	r13
     d84:	c7 94       	ror	r12
     d86:	b7 94       	ror	r11
     d88:	a7 94       	ror	r10
     d8a:	0a 94       	dec	r0
     d8c:	d2 f7       	brpl	.-12     	; 0xd82 <__floatunsisf+0x56>
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 e0       	ldi	r26, 0x00	; 0
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	04 c0       	rjmp	.+8      	; 0xda8 <__floatunsisf+0x7c>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	aa 1f       	adc	r26, r26
     da6:	bb 1f       	adc	r27, r27
     da8:	2a 95       	dec	r18
     daa:	d2 f7       	brpl	.-12     	; 0xda0 <__floatunsisf+0x74>
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	a1 09       	sbc	r26, r1
     db0:	b1 09       	sbc	r27, r1
     db2:	8e 21       	and	r24, r14
     db4:	9f 21       	and	r25, r15
     db6:	a0 23       	and	r26, r16
     db8:	b1 23       	and	r27, r17
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	a1 05       	cpc	r26, r1
     dbe:	b1 05       	cpc	r27, r1
     dc0:	21 f0       	breq	.+8      	; 0xdca <__floatunsisf+0x9e>
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	4a 29       	or	r20, r10
     dcc:	5b 29       	or	r21, r11
     dce:	6c 29       	or	r22, r12
     dd0:	7d 29       	or	r23, r13
     dd2:	4d 83       	std	Y+5, r20	; 0x05
     dd4:	5e 83       	std	Y+6, r21	; 0x06
     dd6:	6f 83       	std	Y+7, r22	; 0x07
     dd8:	78 87       	std	Y+8, r23	; 0x08
     dda:	8e e1       	ldi	r24, 0x1E	; 30
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	8e 1b       	sub	r24, r30
     de0:	9f 0b       	sbc	r25, r31
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	8b 83       	std	Y+3, r24	; 0x03
     de6:	12 c0       	rjmp	.+36     	; 0xe0c <__floatunsisf+0xe0>
     de8:	30 97       	sbiw	r30, 0x00	; 0
     dea:	81 f0       	breq	.+32     	; 0xe0c <__floatunsisf+0xe0>
     dec:	0e 2e       	mov	r0, r30
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <__floatunsisf+0xcc>
     df0:	ee 0c       	add	r14, r14
     df2:	ff 1c       	adc	r15, r15
     df4:	00 1f       	adc	r16, r16
     df6:	11 1f       	adc	r17, r17
     df8:	0a 94       	dec	r0
     dfa:	d2 f7       	brpl	.-12     	; 0xdf0 <__floatunsisf+0xc4>
     dfc:	ed 82       	std	Y+5, r14	; 0x05
     dfe:	fe 82       	std	Y+6, r15	; 0x06
     e00:	0f 83       	std	Y+7, r16	; 0x07
     e02:	18 87       	std	Y+8, r17	; 0x08
     e04:	ce 1a       	sub	r12, r30
     e06:	df 0a       	sbc	r13, r31
     e08:	dc 82       	std	Y+4, r13	; 0x04
     e0a:	cb 82       	std	Y+3, r12	; 0x03
     e0c:	1a 82       	std	Y+2, r1	; 0x02
     e0e:	ce 01       	movw	r24, r28
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	0e 94 5e 07 	call	0xebc	; 0xebc <__pack_f>
     e16:	28 96       	adiw	r28, 0x08	; 8
     e18:	ea e0       	ldi	r30, 0x0A	; 10
     e1a:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__epilogue_restores__+0x10>

00000e1e <__clzsi2>:
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	7b 01       	movw	r14, r22
     e28:	8c 01       	movw	r16, r24
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	e8 16       	cp	r14, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	f8 06       	cpc	r15, r24
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	08 07       	cpc	r16, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	18 07       	cpc	r17, r24
     e3a:	88 f4       	brcc	.+34     	; 0xe5e <__clzsi2+0x40>
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	e8 16       	cp	r14, r24
     e40:	f1 04       	cpc	r15, r1
     e42:	01 05       	cpc	r16, r1
     e44:	11 05       	cpc	r17, r1
     e46:	31 f0       	breq	.+12     	; 0xe54 <__clzsi2+0x36>
     e48:	28 f0       	brcs	.+10     	; 0xe54 <__clzsi2+0x36>
     e4a:	88 e0       	ldi	r24, 0x08	; 8
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	a0 e0       	ldi	r26, 0x00	; 0
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	17 c0       	rjmp	.+46     	; 0xe82 <__clzsi2+0x64>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a0 e0       	ldi	r26, 0x00	; 0
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <__clzsi2+0x64>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	e8 16       	cp	r14, r24
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	f8 06       	cpc	r15, r24
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	08 07       	cpc	r16, r24
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	18 07       	cpc	r17, r24
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <__clzsi2+0x5c>
     e70:	88 e1       	ldi	r24, 0x18	; 24
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <__clzsi2+0x64>
     e7a:	80 e1       	ldi	r24, 0x10	; 16
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	20 e2       	ldi	r18, 0x20	; 32
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	28 1b       	sub	r18, r24
     e8c:	39 0b       	sbc	r19, r25
     e8e:	4a 0b       	sbc	r20, r26
     e90:	5b 0b       	sbc	r21, r27
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__clzsi2+0x7e>
     e94:	16 95       	lsr	r17
     e96:	07 95       	ror	r16
     e98:	f7 94       	ror	r15
     e9a:	e7 94       	ror	r14
     e9c:	8a 95       	dec	r24
     e9e:	d2 f7       	brpl	.-12     	; 0xe94 <__clzsi2+0x76>
     ea0:	f7 01       	movw	r30, r14
     ea2:	e0 59       	subi	r30, 0x90	; 144
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	80 81       	ld	r24, Z
     ea8:	28 1b       	sub	r18, r24
     eaa:	31 09       	sbc	r19, r1
     eac:	41 09       	sbc	r20, r1
     eae:	51 09       	sbc	r21, r1
     eb0:	c9 01       	movw	r24, r18
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	ff 90       	pop	r15
     eb8:	ef 90       	pop	r14
     eba:	08 95       	ret

00000ebc <__pack_f>:
     ebc:	df 92       	push	r13
     ebe:	ef 92       	push	r14
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	fc 01       	movw	r30, r24
     ec8:	e4 80       	ldd	r14, Z+4	; 0x04
     eca:	f5 80       	ldd	r15, Z+5	; 0x05
     ecc:	06 81       	ldd	r16, Z+6	; 0x06
     ece:	17 81       	ldd	r17, Z+7	; 0x07
     ed0:	d1 80       	ldd	r13, Z+1	; 0x01
     ed2:	80 81       	ld	r24, Z
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	48 f4       	brcc	.+18     	; 0xeea <__pack_f+0x2e>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a0 e1       	ldi	r26, 0x10	; 16
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 2a       	or	r14, r24
     ee2:	f9 2a       	or	r15, r25
     ee4:	0a 2b       	or	r16, r26
     ee6:	1b 2b       	or	r17, r27
     ee8:	a5 c0       	rjmp	.+330    	; 0x1034 <__pack_f+0x178>
     eea:	84 30       	cpi	r24, 0x04	; 4
     eec:	09 f4       	brne	.+2      	; 0xef0 <__pack_f+0x34>
     eee:	9f c0       	rjmp	.+318    	; 0x102e <__pack_f+0x172>
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	21 f4       	brne	.+8      	; 0xefc <__pack_f+0x40>
     ef4:	ee 24       	eor	r14, r14
     ef6:	ff 24       	eor	r15, r15
     ef8:	87 01       	movw	r16, r14
     efa:	05 c0       	rjmp	.+10     	; 0xf06 <__pack_f+0x4a>
     efc:	e1 14       	cp	r14, r1
     efe:	f1 04       	cpc	r15, r1
     f00:	01 05       	cpc	r16, r1
     f02:	11 05       	cpc	r17, r1
     f04:	19 f4       	brne	.+6      	; 0xf0c <__pack_f+0x50>
     f06:	e0 e0       	ldi	r30, 0x00	; 0
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	96 c0       	rjmp	.+300    	; 0x1038 <__pack_f+0x17c>
     f0c:	62 81       	ldd	r22, Z+2	; 0x02
     f0e:	73 81       	ldd	r23, Z+3	; 0x03
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	62 38       	cpi	r22, 0x82	; 130
     f14:	79 07       	cpc	r23, r25
     f16:	0c f0       	brlt	.+2      	; 0xf1a <__pack_f+0x5e>
     f18:	5b c0       	rjmp	.+182    	; 0xfd0 <__pack_f+0x114>
     f1a:	22 e8       	ldi	r18, 0x82	; 130
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	26 1b       	sub	r18, r22
     f20:	37 0b       	sbc	r19, r23
     f22:	2a 31       	cpi	r18, 0x1A	; 26
     f24:	31 05       	cpc	r19, r1
     f26:	2c f0       	brlt	.+10     	; 0xf32 <__pack_f+0x76>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	2a c0       	rjmp	.+84     	; 0xf86 <__pack_f+0xca>
     f32:	b8 01       	movw	r22, r16
     f34:	a7 01       	movw	r20, r14
     f36:	02 2e       	mov	r0, r18
     f38:	04 c0       	rjmp	.+8      	; 0xf42 <__pack_f+0x86>
     f3a:	76 95       	lsr	r23
     f3c:	67 95       	ror	r22
     f3e:	57 95       	ror	r21
     f40:	47 95       	ror	r20
     f42:	0a 94       	dec	r0
     f44:	d2 f7       	brpl	.-12     	; 0xf3a <__pack_f+0x7e>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a0 e0       	ldi	r26, 0x00	; 0
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	04 c0       	rjmp	.+8      	; 0xf58 <__pack_f+0x9c>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	aa 1f       	adc	r26, r26
     f56:	bb 1f       	adc	r27, r27
     f58:	2a 95       	dec	r18
     f5a:	d2 f7       	brpl	.-12     	; 0xf50 <__pack_f+0x94>
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	a1 09       	sbc	r26, r1
     f60:	b1 09       	sbc	r27, r1
     f62:	8e 21       	and	r24, r14
     f64:	9f 21       	and	r25, r15
     f66:	a0 23       	and	r26, r16
     f68:	b1 23       	and	r27, r17
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	a1 05       	cpc	r26, r1
     f6e:	b1 05       	cpc	r27, r1
     f70:	21 f0       	breq	.+8      	; 0xf7a <__pack_f+0xbe>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	9a 01       	movw	r18, r20
     f7c:	ab 01       	movw	r20, r22
     f7e:	28 2b       	or	r18, r24
     f80:	39 2b       	or	r19, r25
     f82:	4a 2b       	or	r20, r26
     f84:	5b 2b       	or	r21, r27
     f86:	da 01       	movw	r26, r20
     f88:	c9 01       	movw	r24, r18
     f8a:	8f 77       	andi	r24, 0x7F	; 127
     f8c:	90 70       	andi	r25, 0x00	; 0
     f8e:	a0 70       	andi	r26, 0x00	; 0
     f90:	b0 70       	andi	r27, 0x00	; 0
     f92:	80 34       	cpi	r24, 0x40	; 64
     f94:	91 05       	cpc	r25, r1
     f96:	a1 05       	cpc	r26, r1
     f98:	b1 05       	cpc	r27, r1
     f9a:	39 f4       	brne	.+14     	; 0xfaa <__pack_f+0xee>
     f9c:	27 ff       	sbrs	r18, 7
     f9e:	09 c0       	rjmp	.+18     	; 0xfb2 <__pack_f+0xf6>
     fa0:	20 5c       	subi	r18, 0xC0	; 192
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	4f 4f       	sbci	r20, 0xFF	; 255
     fa6:	5f 4f       	sbci	r21, 0xFF	; 255
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <__pack_f+0xf6>
     faa:	21 5c       	subi	r18, 0xC1	; 193
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	4f 4f       	sbci	r20, 0xFF	; 255
     fb0:	5f 4f       	sbci	r21, 0xFF	; 255
     fb2:	e0 e0       	ldi	r30, 0x00	; 0
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	20 30       	cpi	r18, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	3a 07       	cpc	r19, r26
     fbc:	a0 e0       	ldi	r26, 0x00	; 0
     fbe:	4a 07       	cpc	r20, r26
     fc0:	a0 e4       	ldi	r26, 0x40	; 64
     fc2:	5a 07       	cpc	r21, r26
     fc4:	10 f0       	brcs	.+4      	; 0xfca <__pack_f+0x10e>
     fc6:	e1 e0       	ldi	r30, 0x01	; 1
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	79 01       	movw	r14, r18
     fcc:	8a 01       	movw	r16, r20
     fce:	27 c0       	rjmp	.+78     	; 0x101e <__pack_f+0x162>
     fd0:	60 38       	cpi	r22, 0x80	; 128
     fd2:	71 05       	cpc	r23, r1
     fd4:	64 f5       	brge	.+88     	; 0x102e <__pack_f+0x172>
     fd6:	fb 01       	movw	r30, r22
     fd8:	e1 58       	subi	r30, 0x81	; 129
     fda:	ff 4f       	sbci	r31, 0xFF	; 255
     fdc:	d8 01       	movw	r26, r16
     fde:	c7 01       	movw	r24, r14
     fe0:	8f 77       	andi	r24, 0x7F	; 127
     fe2:	90 70       	andi	r25, 0x00	; 0
     fe4:	a0 70       	andi	r26, 0x00	; 0
     fe6:	b0 70       	andi	r27, 0x00	; 0
     fe8:	80 34       	cpi	r24, 0x40	; 64
     fea:	91 05       	cpc	r25, r1
     fec:	a1 05       	cpc	r26, r1
     fee:	b1 05       	cpc	r27, r1
     ff0:	39 f4       	brne	.+14     	; 0x1000 <__pack_f+0x144>
     ff2:	e7 fe       	sbrs	r14, 7
     ff4:	0d c0       	rjmp	.+26     	; 0x1010 <__pack_f+0x154>
     ff6:	80 e4       	ldi	r24, 0x40	; 64
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <__pack_f+0x14c>
    1000:	8f e3       	ldi	r24, 0x3F	; 63
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a0 e0       	ldi	r26, 0x00	; 0
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 0e       	add	r14, r24
    100a:	f9 1e       	adc	r15, r25
    100c:	0a 1f       	adc	r16, r26
    100e:	1b 1f       	adc	r17, r27
    1010:	17 ff       	sbrs	r17, 7
    1012:	05 c0       	rjmp	.+10     	; 0x101e <__pack_f+0x162>
    1014:	16 95       	lsr	r17
    1016:	07 95       	ror	r16
    1018:	f7 94       	ror	r15
    101a:	e7 94       	ror	r14
    101c:	31 96       	adiw	r30, 0x01	; 1
    101e:	87 e0       	ldi	r24, 0x07	; 7
    1020:	16 95       	lsr	r17
    1022:	07 95       	ror	r16
    1024:	f7 94       	ror	r15
    1026:	e7 94       	ror	r14
    1028:	8a 95       	dec	r24
    102a:	d1 f7       	brne	.-12     	; 0x1020 <__pack_f+0x164>
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <__pack_f+0x17c>
    102e:	ee 24       	eor	r14, r14
    1030:	ff 24       	eor	r15, r15
    1032:	87 01       	movw	r16, r14
    1034:	ef ef       	ldi	r30, 0xFF	; 255
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	6e 2f       	mov	r22, r30
    103a:	67 95       	ror	r22
    103c:	66 27       	eor	r22, r22
    103e:	67 95       	ror	r22
    1040:	90 2f       	mov	r25, r16
    1042:	9f 77       	andi	r25, 0x7F	; 127
    1044:	d7 94       	ror	r13
    1046:	dd 24       	eor	r13, r13
    1048:	d7 94       	ror	r13
    104a:	8e 2f       	mov	r24, r30
    104c:	86 95       	lsr	r24
    104e:	49 2f       	mov	r20, r25
    1050:	46 2b       	or	r20, r22
    1052:	58 2f       	mov	r21, r24
    1054:	5d 29       	or	r21, r13
    1056:	b7 01       	movw	r22, r14
    1058:	ca 01       	movw	r24, r20
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	08 95       	ret

00001066 <__unpack_f>:
    1066:	fc 01       	movw	r30, r24
    1068:	db 01       	movw	r26, r22
    106a:	40 81       	ld	r20, Z
    106c:	51 81       	ldd	r21, Z+1	; 0x01
    106e:	22 81       	ldd	r18, Z+2	; 0x02
    1070:	62 2f       	mov	r22, r18
    1072:	6f 77       	andi	r22, 0x7F	; 127
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	22 1f       	adc	r18, r18
    1078:	22 27       	eor	r18, r18
    107a:	22 1f       	adc	r18, r18
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	89 2f       	mov	r24, r25
    1080:	88 0f       	add	r24, r24
    1082:	82 2b       	or	r24, r18
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	99 1f       	adc	r25, r25
    108a:	99 27       	eor	r25, r25
    108c:	99 1f       	adc	r25, r25
    108e:	11 96       	adiw	r26, 0x01	; 1
    1090:	9c 93       	st	X, r25
    1092:	11 97       	sbiw	r26, 0x01	; 1
    1094:	21 15       	cp	r18, r1
    1096:	31 05       	cpc	r19, r1
    1098:	a9 f5       	brne	.+106    	; 0x1104 <__unpack_f+0x9e>
    109a:	41 15       	cp	r20, r1
    109c:	51 05       	cpc	r21, r1
    109e:	61 05       	cpc	r22, r1
    10a0:	71 05       	cpc	r23, r1
    10a2:	11 f4       	brne	.+4      	; 0x10a8 <__unpack_f+0x42>
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	37 c0       	rjmp	.+110    	; 0x1116 <__unpack_f+0xb0>
    10a8:	82 e8       	ldi	r24, 0x82	; 130
    10aa:	9f ef       	ldi	r25, 0xFF	; 255
    10ac:	13 96       	adiw	r26, 0x03	; 3
    10ae:	9c 93       	st	X, r25
    10b0:	8e 93       	st	-X, r24
    10b2:	12 97       	sbiw	r26, 0x02	; 2
    10b4:	9a 01       	movw	r18, r20
    10b6:	ab 01       	movw	r20, r22
    10b8:	67 e0       	ldi	r22, 0x07	; 7
    10ba:	22 0f       	add	r18, r18
    10bc:	33 1f       	adc	r19, r19
    10be:	44 1f       	adc	r20, r20
    10c0:	55 1f       	adc	r21, r21
    10c2:	6a 95       	dec	r22
    10c4:	d1 f7       	brne	.-12     	; 0x10ba <__unpack_f+0x54>
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	8c 93       	st	X, r24
    10ca:	0d c0       	rjmp	.+26     	; 0x10e6 <__unpack_f+0x80>
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	44 1f       	adc	r20, r20
    10d2:	55 1f       	adc	r21, r21
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	8d 91       	ld	r24, X+
    10d8:	9c 91       	ld	r25, X
    10da:	13 97       	sbiw	r26, 0x03	; 3
    10dc:	01 97       	sbiw	r24, 0x01	; 1
    10de:	13 96       	adiw	r26, 0x03	; 3
    10e0:	9c 93       	st	X, r25
    10e2:	8e 93       	st	-X, r24
    10e4:	12 97       	sbiw	r26, 0x02	; 2
    10e6:	20 30       	cpi	r18, 0x00	; 0
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	38 07       	cpc	r19, r24
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	48 07       	cpc	r20, r24
    10f0:	80 e4       	ldi	r24, 0x40	; 64
    10f2:	58 07       	cpc	r21, r24
    10f4:	58 f3       	brcs	.-42     	; 0x10cc <__unpack_f+0x66>
    10f6:	14 96       	adiw	r26, 0x04	; 4
    10f8:	2d 93       	st	X+, r18
    10fa:	3d 93       	st	X+, r19
    10fc:	4d 93       	st	X+, r20
    10fe:	5c 93       	st	X, r21
    1100:	17 97       	sbiw	r26, 0x07	; 7
    1102:	08 95       	ret
    1104:	2f 3f       	cpi	r18, 0xFF	; 255
    1106:	31 05       	cpc	r19, r1
    1108:	79 f4       	brne	.+30     	; 0x1128 <__unpack_f+0xc2>
    110a:	41 15       	cp	r20, r1
    110c:	51 05       	cpc	r21, r1
    110e:	61 05       	cpc	r22, r1
    1110:	71 05       	cpc	r23, r1
    1112:	19 f4       	brne	.+6      	; 0x111a <__unpack_f+0xb4>
    1114:	84 e0       	ldi	r24, 0x04	; 4
    1116:	8c 93       	st	X, r24
    1118:	08 95       	ret
    111a:	64 ff       	sbrs	r22, 4
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <__unpack_f+0xbe>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	8c 93       	st	X, r24
    1122:	12 c0       	rjmp	.+36     	; 0x1148 <__unpack_f+0xe2>
    1124:	1c 92       	st	X, r1
    1126:	10 c0       	rjmp	.+32     	; 0x1148 <__unpack_f+0xe2>
    1128:	2f 57       	subi	r18, 0x7F	; 127
    112a:	30 40       	sbci	r19, 0x00	; 0
    112c:	13 96       	adiw	r26, 0x03	; 3
    112e:	3c 93       	st	X, r19
    1130:	2e 93       	st	-X, r18
    1132:	12 97       	sbiw	r26, 0x02	; 2
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	8c 93       	st	X, r24
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	44 0f       	add	r20, r20
    113c:	55 1f       	adc	r21, r21
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	8a 95       	dec	r24
    1144:	d1 f7       	brne	.-12     	; 0x113a <__unpack_f+0xd4>
    1146:	70 64       	ori	r23, 0x40	; 64
    1148:	14 96       	adiw	r26, 0x04	; 4
    114a:	4d 93       	st	X+, r20
    114c:	5d 93       	st	X+, r21
    114e:	6d 93       	st	X+, r22
    1150:	7c 93       	st	X, r23
    1152:	17 97       	sbiw	r26, 0x07	; 7
    1154:	08 95       	ret

00001156 <__fpcmp_parts_f>:
    1156:	1f 93       	push	r17
    1158:	dc 01       	movw	r26, r24
    115a:	fb 01       	movw	r30, r22
    115c:	9c 91       	ld	r25, X
    115e:	92 30       	cpi	r25, 0x02	; 2
    1160:	08 f4       	brcc	.+2      	; 0x1164 <__fpcmp_parts_f+0xe>
    1162:	47 c0       	rjmp	.+142    	; 0x11f2 <__fpcmp_parts_f+0x9c>
    1164:	80 81       	ld	r24, Z
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	08 f4       	brcc	.+2      	; 0x116c <__fpcmp_parts_f+0x16>
    116a:	43 c0       	rjmp	.+134    	; 0x11f2 <__fpcmp_parts_f+0x9c>
    116c:	94 30       	cpi	r25, 0x04	; 4
    116e:	51 f4       	brne	.+20     	; 0x1184 <__fpcmp_parts_f+0x2e>
    1170:	11 96       	adiw	r26, 0x01	; 1
    1172:	1c 91       	ld	r17, X
    1174:	84 30       	cpi	r24, 0x04	; 4
    1176:	99 f5       	brne	.+102    	; 0x11de <__fpcmp_parts_f+0x88>
    1178:	81 81       	ldd	r24, Z+1	; 0x01
    117a:	68 2f       	mov	r22, r24
    117c:	70 e0       	ldi	r23, 0x00	; 0
    117e:	61 1b       	sub	r22, r17
    1180:	71 09       	sbc	r23, r1
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <__fpcmp_parts_f+0xac>
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	21 f0       	breq	.+8      	; 0x1190 <__fpcmp_parts_f+0x3a>
    1188:	92 30       	cpi	r25, 0x02	; 2
    118a:	31 f4       	brne	.+12     	; 0x1198 <__fpcmp_parts_f+0x42>
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	b9 f1       	breq	.+110    	; 0x11fe <__fpcmp_parts_f+0xa8>
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	88 23       	and	r24, r24
    1194:	89 f1       	breq	.+98     	; 0x11f8 <__fpcmp_parts_f+0xa2>
    1196:	2d c0       	rjmp	.+90     	; 0x11f2 <__fpcmp_parts_f+0x9c>
    1198:	11 96       	adiw	r26, 0x01	; 1
    119a:	1c 91       	ld	r17, X
    119c:	11 97       	sbiw	r26, 0x01	; 1
    119e:	82 30       	cpi	r24, 0x02	; 2
    11a0:	f1 f0       	breq	.+60     	; 0x11de <__fpcmp_parts_f+0x88>
    11a2:	81 81       	ldd	r24, Z+1	; 0x01
    11a4:	18 17       	cp	r17, r24
    11a6:	d9 f4       	brne	.+54     	; 0x11de <__fpcmp_parts_f+0x88>
    11a8:	12 96       	adiw	r26, 0x02	; 2
    11aa:	2d 91       	ld	r18, X+
    11ac:	3c 91       	ld	r19, X
    11ae:	13 97       	sbiw	r26, 0x03	; 3
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	82 17       	cp	r24, r18
    11b6:	93 07       	cpc	r25, r19
    11b8:	94 f0       	brlt	.+36     	; 0x11de <__fpcmp_parts_f+0x88>
    11ba:	28 17       	cp	r18, r24
    11bc:	39 07       	cpc	r19, r25
    11be:	bc f0       	brlt	.+46     	; 0x11ee <__fpcmp_parts_f+0x98>
    11c0:	14 96       	adiw	r26, 0x04	; 4
    11c2:	8d 91       	ld	r24, X+
    11c4:	9d 91       	ld	r25, X+
    11c6:	0d 90       	ld	r0, X+
    11c8:	bc 91       	ld	r27, X
    11ca:	a0 2d       	mov	r26, r0
    11cc:	24 81       	ldd	r18, Z+4	; 0x04
    11ce:	35 81       	ldd	r19, Z+5	; 0x05
    11d0:	46 81       	ldd	r20, Z+6	; 0x06
    11d2:	57 81       	ldd	r21, Z+7	; 0x07
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	4a 07       	cpc	r20, r26
    11da:	5b 07       	cpc	r21, r27
    11dc:	18 f4       	brcc	.+6      	; 0x11e4 <__fpcmp_parts_f+0x8e>
    11de:	11 23       	and	r17, r17
    11e0:	41 f0       	breq	.+16     	; 0x11f2 <__fpcmp_parts_f+0x9c>
    11e2:	0a c0       	rjmp	.+20     	; 0x11f8 <__fpcmp_parts_f+0xa2>
    11e4:	82 17       	cp	r24, r18
    11e6:	93 07       	cpc	r25, r19
    11e8:	a4 07       	cpc	r26, r20
    11ea:	b5 07       	cpc	r27, r21
    11ec:	40 f4       	brcc	.+16     	; 0x11fe <__fpcmp_parts_f+0xa8>
    11ee:	11 23       	and	r17, r17
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <__fpcmp_parts_f+0xa2>
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <__fpcmp_parts_f+0xac>
    11f8:	6f ef       	ldi	r22, 0xFF	; 255
    11fa:	7f ef       	ldi	r23, 0xFF	; 255
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <__fpcmp_parts_f+0xac>
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	cb 01       	movw	r24, r22
    1204:	1f 91       	pop	r17
    1206:	08 95       	ret

00001208 <__prologue_saves__>:
    1208:	2f 92       	push	r2
    120a:	3f 92       	push	r3
    120c:	4f 92       	push	r4
    120e:	5f 92       	push	r5
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	ca 1b       	sub	r28, r26
    1232:	db 0b       	sbc	r29, r27
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	09 94       	ijmp

00001240 <__epilogue_restores__>:
    1240:	2a 88       	ldd	r2, Y+18	; 0x12
    1242:	39 88       	ldd	r3, Y+17	; 0x11
    1244:	48 88       	ldd	r4, Y+16	; 0x10
    1246:	5f 84       	ldd	r5, Y+15	; 0x0f
    1248:	6e 84       	ldd	r6, Y+14	; 0x0e
    124a:	7d 84       	ldd	r7, Y+13	; 0x0d
    124c:	8c 84       	ldd	r8, Y+12	; 0x0c
    124e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1250:	aa 84       	ldd	r10, Y+10	; 0x0a
    1252:	b9 84       	ldd	r11, Y+9	; 0x09
    1254:	c8 84       	ldd	r12, Y+8	; 0x08
    1256:	df 80       	ldd	r13, Y+7	; 0x07
    1258:	ee 80       	ldd	r14, Y+6	; 0x06
    125a:	fd 80       	ldd	r15, Y+5	; 0x05
    125c:	0c 81       	ldd	r16, Y+4	; 0x04
    125e:	1b 81       	ldd	r17, Y+3	; 0x03
    1260:	aa 81       	ldd	r26, Y+2	; 0x02
    1262:	b9 81       	ldd	r27, Y+1	; 0x01
    1264:	ce 0f       	add	r28, r30
    1266:	d1 1d       	adc	r29, r1
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	ed 01       	movw	r28, r26
    1274:	08 95       	ret

00001276 <_exit>:
    1276:	f8 94       	cli

00001278 <__stop_program>:
    1278:	ff cf       	rjmp	.-2      	; 0x1278 <__stop_program>
