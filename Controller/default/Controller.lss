
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000012de  00001372  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800168  00800168  0000147a  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  0000147a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003e0  00000000  00000000  0000161a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b9b  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001425  00000000  00000000  00004595  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ab8  00000000  00000000  000059ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00007474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004dd  00000000  00000000  000077a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c57  00000000  00000000  00007c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000088d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 37       	cpi	r26, 0x7F	; 127
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ed       	ldi	r30, 0xDE	; 222
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 27 02 	call	0x44e	; 0x44e <main>
      8a:	0c 94 6d 09 	jmp	0x12da	; 0x12da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <modify>:
}


void modify(){
	//analogLEDTest();
}
      92:	08 95       	ret

00000094 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      94:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      96:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      98:	88 e1       	ldi	r24, 0x18	; 24
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
}
      a0:	08 95       	ret

000000a2 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a2:	8f ef       	ldi	r24, 0xFF	; 255
      a4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a6:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      a8:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      aa:	87 e0       	ldi	r24, 0x07	; 7
      ac:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      ae:	11 ba       	out	0x11, r1	; 17
}
      b0:	08 95       	ret

000000b2 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b2:	87 e4       	ldi	r24, 0x47	; 71
      b4:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b6:	87 e8       	ldi	r24, 0x87	; 135
      b8:	86 b9       	out	0x06, r24	; 6
}
      ba:	08 95       	ret

000000bc <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
      bc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
      c2:	88 e0       	ldi	r24, 0x08	; 8
      c4:	89 bf       	out	0x39, r24	; 57
	sei();
      c6:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
      c8:	80 ea       	ldi	r24, 0xA0	; 160
      ca:	97 e0       	ldi	r25, 0x07	; 7
      cc:	99 bd       	out	0x29, r25	; 41
      ce:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
      d0:	1d bc       	out	0x2d, r1	; 45
      d2:	1c bc       	out	0x2c, r1	; 44

}
      d4:	08 95       	ret

000000d6 <ledOFF>:
}



void ledOFF(){
	PORTB = 0x00;
      d6:	18 ba       	out	0x18, r1	; 24
}
      d8:	08 95       	ret

000000da <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
      da:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
      dc:	34 9b       	sbis	0x06, 4	; 6
      de:	fe cf       	rjmp	.-4      	; 0xdc <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
      e0:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
      e2:	24 b1       	in	r18, 0x04	; 4
      e4:	35 b1       	in	r19, 0x05	; 5
}
      e6:	c9 01       	movw	r24, r18
      e8:	08 95       	ret

000000ea <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
      ea:	0e 94 6d 00 	call	0xda	; 0xda <ReadADC>
      ee:	9c 01       	movw	r18, r24
      f0:	90 93 79 01 	sts	0x0179, r25
      f4:	80 93 78 01 	sts	0x0178, r24
		if (adc_value > 30){
      f8:	8f 31       	cpi	r24, 0x1F	; 31
      fa:	91 05       	cpc	r25, r1
      fc:	28 f1       	brcs	.+74     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     102:	2d 33       	cpi	r18, 0x3D	; 61
     104:	31 05       	cpc	r19, r1
     106:	00 f1       	brcs	.+64     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     10c:	2b 35       	cpi	r18, 0x5B	; 91
     10e:	31 05       	cpc	r19, r1
     110:	d8 f0       	brcs	.+54     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     112:	84 e0       	ldi	r24, 0x04	; 4
     114:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     116:	29 37       	cpi	r18, 0x79	; 121
     118:	31 05       	cpc	r19, r1
     11a:	b0 f0       	brcs	.+44     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     11c:	88 e0       	ldi	r24, 0x08	; 8
     11e:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     120:	27 39       	cpi	r18, 0x97	; 151
     122:	31 05       	cpc	r19, r1
     124:	88 f0       	brcs	.+34     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     126:	80 e1       	ldi	r24, 0x10	; 16
     128:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     12a:	25 3b       	cpi	r18, 0xB5	; 181
     12c:	31 05       	cpc	r19, r1
     12e:	60 f0       	brcs	.+24     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     130:	80 e2       	ldi	r24, 0x20	; 32
     132:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     134:	23 3d       	cpi	r18, 0xD3	; 211
     136:	31 05       	cpc	r19, r1
     138:	38 f0       	brcs	.+14     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     13a:	80 e4       	ldi	r24, 0x40	; 64
     13c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     13e:	21 3f       	cpi	r18, 0xF1	; 241
     140:	31 05       	cpc	r19, r1
     142:	10 f0       	brcs	.+4      	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     144:	80 e8       	ldi	r24, 0x80	; 128
     146:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     148:	20 3f       	cpi	r18, 0xF0	; 240
     14a:	31 05       	cpc	r19, r1
     14c:	10 f0       	brcs	.+4      	; 0x152 <analogLEDTest+0x68>
			PORTB = 0xFF;
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	88 bb       	out	0x18, r24	; 24
     152:	08 95       	ret

00000154 <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
     154:	5d 9b       	sbis	0x0b, 5	; 11
     156:	fe cf       	rjmp	.-4      	; 0x154 <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     158:	8c b9       	out	0x0c, r24	; 12
}
     15a:	08 95       	ret

0000015c <midiTransitTest>:
	start_addr = 0;
	
}

void midiTransitTest(){
	midi_Transmit(144);
     15c:	80 e9       	ldi	r24, 0x90	; 144
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(67);
     164:	83 e4       	ldi	r24, 0x43	; 67
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     16c:	84 e6       	ldi	r24, 0x64	; 100
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     174:	88 e8       	ldi	r24, 0x88	; 136
     176:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     178:	24 e6       	ldi	r18, 0x64	; 100
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     184:	d9 f7       	brne	.-10     	; 0x17c <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
     186:	80 e8       	ldi	r24, 0x80	; 128
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(67);
     18e:	83 e4       	ldi	r24, 0x43	; 67
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     196:	84 e6       	ldi	r24, 0x64	; 100
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     19e:	88 e8       	ldi	r24, 0x88	; 136
     1a0:	93 e1       	ldi	r25, 0x13	; 19
     1a2:	24 e6       	ldi	r18, 0x64	; 100
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	31 97       	sbiw	r30, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
     1b0:	80 e9       	ldi	r24, 0x90	; 144
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(98);
     1b8:	82 e6       	ldi	r24, 0x62	; 98
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     1c0:	84 e6       	ldi	r24, 0x64	; 100
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     1c8:	88 e8       	ldi	r24, 0x88	; 136
     1ca:	93 e1       	ldi	r25, 0x13	; 19
     1cc:	24 e6       	ldi	r18, 0x64	; 100
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
     1da:	80 e8       	ldi	r24, 0x80	; 128
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(98);
     1e2:	82 e6       	ldi	r24, 0x62	; 98
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     1ea:	84 e6       	ldi	r24, 0x64	; 100
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     1f2:	88 e8       	ldi	r24, 0x88	; 136
     1f4:	93 e1       	ldi	r25, 0x13	; 19
     1f6:	24 e6       	ldi	r18, 0x64	; 100
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     202:	d9 f7       	brne	.-10     	; 0x1fa <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
     204:	80 e9       	ldi	r24, 0x90	; 144
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(60);
     20c:	8c e3       	ldi	r24, 0x3C	; 60
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     214:	84 e6       	ldi	r24, 0x64	; 100
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     21c:	88 e8       	ldi	r24, 0x88	; 136
     21e:	93 e1       	ldi	r25, 0x13	; 19
     220:	24 e6       	ldi	r18, 0x64	; 100
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	f9 01       	movw	r30, r18
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     22a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     22c:	d9 f7       	brne	.-10     	; 0x224 <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(60);
     236:	8c e3       	ldi	r24, 0x3C	; 60
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     23e:	84 e6       	ldi	r24, 0x64	; 100
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     246:	88 e8       	ldi	r24, 0x88	; 136
     248:	93 e1       	ldi	r25, 0x13	; 19
     24a:	24 e6       	ldi	r18, 0x64	; 100
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <midiTransitTest+0xf2>
	_delay_ms(500);

}
     258:	08 95       	ret

0000025a <playSong>:
		eeprom_address++;		
	}
	
}

void playSong(){
     25a:	8f 92       	push	r8
     25c:	9f 92       	push	r9
     25e:	af 92       	push	r10
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	84 e6       	ldi	r24, 0x64	; 100
     274:	88 2e       	mov	r8, r24
     276:	91 2c       	mov	r9, r1
     278:	6a c0       	rjmp	.+212    	; 0x34e <playSong+0xf4>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     27a:	e1 99       	sbic	0x1c, 1	; 28
     27c:	fe cf       	rjmp	.-4      	; 0x27a <playSong+0x20>
	/* Set up address register */
	EEAR = uiAddress;
     27e:	3f bb       	out	0x1f, r19	; 31
     280:	2e bb       	out	0x1e, r18	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     282:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     284:	8d b3       	in	r24, 0x1d	; 29
		// int pushUpDelay = (intervalTimed*(1/3906.25));
		// _delay_ms(pushUpDelay);

		// start_addr = start_addr + 2;
		for(int i = 0; i < 5; i++){
			midiData[i] = EEPROM_read(start_addr);
     286:	81 93       	st	Z+, r24
     288:	2f 5f       	subi	r18, 0xFF	; 255
     28a:	3f 4f       	sbci	r19, 0xFF	; 255
		// unsigned char intervalTimed = captureAddrA | ( captureAddrB << 8);
		// int pushUpDelay = (intervalTimed*(1/3906.25));
		// _delay_ms(pushUpDelay);

		// start_addr = start_addr + 2;
		for(int i = 0; i < 5; i++){
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	ef 37       	cpi	r30, 0x7F	; 127
     290:	f8 07       	cpc	r31, r24
     292:	99 f7       	brne	.-26     	; 0x27a <playSong+0x20>
     294:	4b 5f       	subi	r20, 0xFB	; 251
     296:	5f 4f       	sbci	r21, 0xFF	; 255
     298:	50 93 75 01 	sts	0x0175, r21
     29c:	40 93 74 01 	sts	0x0174, r20
			start_addr++;
		}
		unsigned char lsb = midiData[3];
		unsigned char msb = midiData[4];
		int interval = ((0x00FF & msb) << 8) | lsb;
		_delay_ms(interval);
     2a0:	d0 91 7e 01 	lds	r29, 0x017E
     2a4:	c0 e0       	ldi	r28, 0x00	; 0
     2a6:	60 91 7d 01 	lds	r22, 0x017D
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	6c 2b       	or	r22, r28
     2ae:	7d 2b       	or	r23, r29
     2b0:	88 27       	eor	r24, r24
     2b2:	77 fd       	sbrc	r23, 7
     2b4:	80 95       	com	r24
     2b6:	98 2f       	mov	r25, r24
     2b8:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__floatsisf>
     2bc:	5b 01       	movw	r10, r22
     2be:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	4a e7       	ldi	r20, 0x7A	; 122
     2c6:	54 e4       	ldi	r21, 0x44	; 68
     2c8:	0e 94 05 05 	call	0xa0a	; 0xa0a <__mulsf3>
     2cc:	7b 01       	movw	r14, r22
     2ce:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e8       	ldi	r20, 0x80	; 128
     2d6:	5f e3       	ldi	r21, 0x3F	; 63
     2d8:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__ltsf2>
     2dc:	88 23       	and	r24, r24
     2de:	1c f4       	brge	.+6      	; 0x2e6 <playSong+0x8c>
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	22 c0       	rjmp	.+68     	; 0x32a <playSong+0xd0>
		__ticks = 1;
	else if (__tmp > 65535)
     2e6:	c8 01       	movw	r24, r16
     2e8:	b7 01       	movw	r22, r14
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	3f ef       	ldi	r19, 0xFF	; 255
     2ee:	4f e7       	ldi	r20, 0x7F	; 127
     2f0:	57 e4       	ldi	r21, 0x47	; 71
     2f2:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__gtsf2>
     2f6:	18 16       	cp	r1, r24
     2f8:	a4 f4       	brge	.+40     	; 0x322 <playSong+0xc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     2fa:	c6 01       	movw	r24, r12
     2fc:	b5 01       	movw	r22, r10
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	40 e2       	ldi	r20, 0x20	; 32
     304:	51 e4       	ldi	r21, 0x41	; 65
     306:	0e 94 05 05 	call	0xa0a	; 0xa0a <__mulsf3>
     30a:	0e 94 2f 03 	call	0x65e	; 0x65e <__fixunssfsi>
     30e:	05 c0       	rjmp	.+10     	; 0x31a <playSong+0xc0>
     310:	c4 01       	movw	r24, r8
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <playSong+0xb8>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     316:	61 50       	subi	r22, 0x01	; 1
     318:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     31a:	61 15       	cp	r22, r1
     31c:	71 05       	cpc	r23, r1
     31e:	c1 f7       	brne	.-16     	; 0x310 <playSong+0xb6>
     320:	07 c0       	rjmp	.+14     	; 0x330 <playSong+0xd6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     322:	c8 01       	movw	r24, r16
     324:	b7 01       	movw	r22, r14
     326:	0e 94 2f 03 	call	0x65e	; 0x65e <__fixunssfsi>
     32a:	cb 01       	movw	r24, r22
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <playSong+0xd2>
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
     330:	80 91 7a 01 	lds	r24, 0x017A
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     33a:	80 91 7b 01 	lds	r24, 0x017B
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     344:	80 91 7c 01 	lds	r24, 0x017C
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	
}

void playSong(){
	
	while(start_addr < stop_addr){
     34e:	40 91 74 01 	lds	r20, 0x0174
     352:	50 91 75 01 	lds	r21, 0x0175
     356:	80 91 76 01 	lds	r24, 0x0176
     35a:	90 91 77 01 	lds	r25, 0x0177
     35e:	48 17       	cp	r20, r24
     360:	59 07       	cpc	r21, r25
     362:	20 f4       	brcc	.+8      	; 0x36c <playSong+0x112>
     364:	ea e7       	ldi	r30, 0x7A	; 122
     366:	f1 e0       	ldi	r31, 0x01	; 1
     368:	9a 01       	movw	r18, r20
     36a:	87 cf       	rjmp	.-242    	; 0x27a <playSong+0x20>
		_delay_ms(interval);
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
		}
	}
	start_addr = 0;
     36c:	10 92 75 01 	sts	0x0175, r1
     370:	10 92 74 01 	sts	0x0174, r1
	
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	08 95       	ret

0000038e <playBack>:
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
     38e:	0e 94 2d 01 	call	0x25a	; 0x25a <playSong>
}
     392:	08 95       	ret

00000394 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     394:	5f 9b       	sbis	0x0b, 7	; 11
     396:	fe cf       	rjmp	.-4      	; 0x394 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     398:	8c b1       	in	r24, 0x0c	; 12
}
     39a:	08 95       	ret

0000039c <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     39e:	8c b1       	in	r24, 0x0c	; 12
     3a0:	5f 99       	sbic	0x0b, 7	; 11
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <midi_Flush+0x2>
}
     3a4:	08 95       	ret

000003a6 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     3a6:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     3a8:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     3aa:	08 95       	ret

000003ac <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     3ac:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     3ae:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     3b0:	8c b5       	in	r24, 0x2c	; 44
     3b2:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     3b4:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     3b6:	08 95       	ret

000003b8 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     3b8:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     3ba:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     3bc:	9d bd       	out	0x2d, r25	; 45
     3be:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     3c0:	2f bf       	out	0x3f, r18	; 63
}
     3c2:	08 95       	ret

000003c4 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     3c4:	e1 99       	sbic	0x1c, 1	; 28
     3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
     3c8:	9f bb       	out	0x1f, r25	; 31
     3ca:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     3cc:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     3ce:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     3d0:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
     3d2:	08 95       	ret

000003d4 <writeSong2>:
	PORTB = EEPROM_read(9);
	_delay_ms(500);
}


void writeSong2(){
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
	TCNT1 = 0;
     3d8:	1d bc       	out	0x2d, r1	; 45
     3da:	1c bc       	out	0x2c, r1	; 44
     3dc:	ca e7       	ldi	r28, 0x7A	; 122
     3de:	d1 e0       	ldi	r29, 0x01	; 1
     3e0:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     3e2:	5f 9b       	sbis	0x0b, 7	; 11
     3e4:	fe cf       	rjmp	.-4      	; 0x3e2 <writeSong2+0xe>

	/* get and return data from buffer */
	return UDR;
     3e6:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	TCNT1 = 0;
	unsigned char interval;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
     3e8:	81 93       	st	Z+, r24


void writeSong2(){
	TCNT1 = 0;
	unsigned char interval;
	for(int i = 0; i <3; i++){
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	ed 37       	cpi	r30, 0x7D	; 125
     3ee:	f8 07       	cpc	r31, r24
     3f0:	c1 f7       	brne	.-16     	; 0x3e2 <writeSong2+0xe>
		midiData[i] = midi_Receive();
	}
	PORTB = midiData[1];
     3f2:	80 91 7b 01 	lds	r24, 0x017B
     3f6:	88 bb       	out	0x18, r24	; 24
	
	interval = TCNT1;
     3f8:	2c b5       	in	r18, 0x2c	; 44
     3fa:	3d b5       	in	r19, 0x2d	; 45
	unsigned char lsb = ((interval << 8) >> 8);
	unsigned char msb = ((interval >> 8));
	midiData[3] = lsb;
     3fc:	92 2f       	mov	r25, r18
     3fe:	80 e0       	ldi	r24, 0x00	; 0
     400:	89 2f       	mov	r24, r25
     402:	99 0f       	add	r25, r25
     404:	99 0b       	sbc	r25, r25
     406:	80 83       	st	Z, r24
	midiData[4] = msb;
     408:	11 82       	std	Z+1, r1	; 0x01
	// unsigned char intervalA = ((interval << 8) >> 8);
	// unsigned char intervalB = (interval >> 8);
	// midiData[8] = intervalA;
	// midiData[9] = intervalB;
	
	stop_addr = eeprom_address;
     40a:	80 91 72 01 	lds	r24, 0x0172
     40e:	90 91 73 01 	lds	r25, 0x0173
     412:	90 93 77 01 	sts	0x0177, r25
     416:	80 93 76 01 	sts	0x0176, r24
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
     41a:	80 91 72 01 	lds	r24, 0x0172
     41e:	90 91 73 01 	lds	r25, 0x0173
     422:	69 91       	ld	r22, Y+
     424:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
		eeprom_address++;		
     428:	80 91 72 01 	lds	r24, 0x0172
     42c:	90 91 73 01 	lds	r25, 0x0173
     430:	01 96       	adiw	r24, 0x01	; 1
     432:	90 93 73 01 	sts	0x0173, r25
     436:	80 93 72 01 	sts	0x0172, r24
	// unsigned char intervalB = (interval >> 8);
	// midiData[8] = intervalA;
	// midiData[9] = intervalB;
	
	stop_addr = eeprom_address;
	for(int j= 0; j < 5; j++){
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	cf 37       	cpi	r28, 0x7F	; 127
     43e:	d8 07       	cpc	r29, r24
     440:	61 f7       	brne	.-40     	; 0x41a <writeSong2+0x46>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     448:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <writeSong2>
	//midiTransitTest();
}
     44c:	08 95       	ret

0000044e <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
     44e:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     454:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     456:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     458:	17 e0       	ldi	r17, 0x07	; 7
     45a:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
     45c:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
     45e:	0e 94 5e 00 	call	0xbc	; 0xbc <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     462:	87 e4       	ldi	r24, 0x47	; 71
     464:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     466:	87 e8       	ldi	r24, 0x87	; 135
     468:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     46a:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     46c:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     46e:	88 e1       	ldi	r24, 0x18	; 24
     470:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     472:	86 e8       	ldi	r24, 0x86	; 134
     474:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     476:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
     478:	99 b3       	in	r25, 0x19	; 25
     47a:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
     47c:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
     47e:	82 ff       	sbrs	r24, 2
     480:	05 c0       	rjmp	.+10     	; 0x48c <main+0x3e>
     482:	99 23       	and	r25, r25
     484:	c1 f7       	brne	.-16     	; 0x476 <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     486:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <writeSong2>
     48a:	f5 cf       	rjmp	.-22     	; 0x476 <main+0x28>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
     48c:	99 23       	and	r25, r25
     48e:	99 f3       	breq	.-26     	; 0x476 <main+0x28>
			if (mod){ // Modify Mode
     490:	20 fd       	sbrc	r18, 0
     492:	f1 cf       	rjmp	.-30     	; 0x476 <main+0x28>
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
     494:	0e 94 2d 01 	call	0x25a	; 0x25a <playSong>
     498:	ee cf       	rjmp	.-36     	; 0x476 <main+0x28>

0000049a <eeprom_test>:




void eeprom_test(){
	EEPROM_write(1, 1);
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(2, 2);
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(3, 3);
     4ae:	83 e0       	ldi	r24, 0x03	; 3
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	63 e0       	ldi	r22, 0x03	; 3
     4b4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(4, 4);
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	64 e0       	ldi	r22, 0x04	; 4
     4be:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(5, 5);
     4c2:	85 e0       	ldi	r24, 0x05	; 5
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	65 e0       	ldi	r22, 0x05	; 5
     4c8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(6, 6);
     4cc:	86 e0       	ldi	r24, 0x06	; 6
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	66 e0       	ldi	r22, 0x06	; 6
     4d2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(7, 7);
     4d6:	87 e0       	ldi	r24, 0x07	; 7
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	67 e0       	ldi	r22, 0x07	; 7
     4dc:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(8, 8);
     4e0:	88 e0       	ldi	r24, 0x08	; 8
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	68 e0       	ldi	r22, 0x08	; 8
     4e6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	EEPROM_write(9, 9);
     4ea:	89 e0       	ldi	r24, 0x09	; 9
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	69 e0       	ldi	r22, 0x09	; 9
     4f0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <EEPROM_write>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     4f4:	e1 99       	sbic	0x1c, 1	; 28
     4f6:	fe cf       	rjmp	.-4      	; 0x4f4 <eeprom_test+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     4f8:	81 e0       	ldi	r24, 0x01	; 1
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	9f bb       	out	0x1f, r25	; 31
     4fe:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     500:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     502:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(5, 5);
	EEPROM_write(6, 6);
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
     504:	88 bb       	out	0x18, r24	; 24
     506:	88 e8       	ldi	r24, 0x88	; 136
     508:	93 e1       	ldi	r25, 0x13	; 19
     50a:	24 e6       	ldi	r18, 0x64	; 100
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	f9 01       	movw	r30, r18
     510:	31 97       	sbiw	r30, 0x01	; 1
     512:	f1 f7       	brne	.-4      	; 0x510 <eeprom_test+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     514:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     516:	d9 f7       	brne	.-10     	; 0x50e <eeprom_test+0x74>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     518:	e1 99       	sbic	0x1c, 1	; 28
     51a:	fe cf       	rjmp	.-4      	; 0x518 <eeprom_test+0x7e>
	/* Set up address register */
	EEAR = uiAddress;
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9f bb       	out	0x1f, r25	; 31
     522:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     524:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     526:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
     528:	88 bb       	out	0x18, r24	; 24
     52a:	88 e8       	ldi	r24, 0x88	; 136
     52c:	93 e1       	ldi	r25, 0x13	; 19
     52e:	24 e6       	ldi	r18, 0x64	; 100
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	f9 01       	movw	r30, r18
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <eeprom_test+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     538:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     53a:	d9 f7       	brne	.-10     	; 0x532 <eeprom_test+0x98>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     53c:	e1 99       	sbic	0x1c, 1	; 28
     53e:	fe cf       	rjmp	.-4      	; 0x53c <eeprom_test+0xa2>
	/* Set up address register */
	EEAR = uiAddress;
     540:	83 e0       	ldi	r24, 0x03	; 3
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	9f bb       	out	0x1f, r25	; 31
     546:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     548:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     54a:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
     54c:	88 bb       	out	0x18, r24	; 24
     54e:	88 e8       	ldi	r24, 0x88	; 136
     550:	93 e1       	ldi	r25, 0x13	; 19
     552:	24 e6       	ldi	r18, 0x64	; 100
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <eeprom_test+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     55c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     55e:	d9 f7       	brne	.-10     	; 0x556 <eeprom_test+0xbc>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     560:	e1 99       	sbic	0x1c, 1	; 28
     562:	fe cf       	rjmp	.-4      	; 0x560 <eeprom_test+0xc6>
	/* Set up address register */
	EEAR = uiAddress;
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	9f bb       	out	0x1f, r25	; 31
     56a:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     56c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     56e:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
     570:	88 bb       	out	0x18, r24	; 24
     572:	88 e8       	ldi	r24, 0x88	; 136
     574:	93 e1       	ldi	r25, 0x13	; 19
     576:	24 e6       	ldi	r18, 0x64	; 100
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <eeprom_test+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     580:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     582:	d9 f7       	brne	.-10     	; 0x57a <eeprom_test+0xe0>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     584:	e1 99       	sbic	0x1c, 1	; 28
     586:	fe cf       	rjmp	.-4      	; 0x584 <eeprom_test+0xea>
	/* Set up address register */
	EEAR = uiAddress;
     588:	85 e0       	ldi	r24, 0x05	; 5
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9f bb       	out	0x1f, r25	; 31
     58e:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     590:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     592:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
     594:	88 bb       	out	0x18, r24	; 24
     596:	88 e8       	ldi	r24, 0x88	; 136
     598:	93 e1       	ldi	r25, 0x13	; 19
     59a:	24 e6       	ldi	r18, 0x64	; 100
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	31 97       	sbiw	r30, 0x01	; 1
     5a2:	f1 f7       	brne	.-4      	; 0x5a0 <eeprom_test+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a6:	d9 f7       	brne	.-10     	; 0x59e <eeprom_test+0x104>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     5a8:	e1 99       	sbic	0x1c, 1	; 28
     5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <eeprom_test+0x10e>
	/* Set up address register */
	EEAR = uiAddress;
     5ac:	86 e0       	ldi	r24, 0x06	; 6
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	9f bb       	out	0x1f, r25	; 31
     5b2:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     5b4:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     5b6:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
     5b8:	88 bb       	out	0x18, r24	; 24
     5ba:	88 e8       	ldi	r24, 0x88	; 136
     5bc:	93 e1       	ldi	r25, 0x13	; 19
     5be:	24 e6       	ldi	r18, 0x64	; 100
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	f9 01       	movw	r30, r18
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <eeprom_test+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ca:	d9 f7       	brne	.-10     	; 0x5c2 <eeprom_test+0x128>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     5cc:	e1 99       	sbic	0x1c, 1	; 28
     5ce:	fe cf       	rjmp	.-4      	; 0x5cc <eeprom_test+0x132>
	/* Set up address register */
	EEAR = uiAddress;
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9f bb       	out	0x1f, r25	; 31
     5d6:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     5d8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     5da:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
     5dc:	88 bb       	out	0x18, r24	; 24
     5de:	88 e8       	ldi	r24, 0x88	; 136
     5e0:	93 e1       	ldi	r25, 0x13	; 19
     5e2:	24 e6       	ldi	r18, 0x64	; 100
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	f9 01       	movw	r30, r18
     5e8:	31 97       	sbiw	r30, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <eeprom_test+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5ee:	d9 f7       	brne	.-10     	; 0x5e6 <eeprom_test+0x14c>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     5f0:	e1 99       	sbic	0x1c, 1	; 28
     5f2:	fe cf       	rjmp	.-4      	; 0x5f0 <eeprom_test+0x156>
	/* Set up address register */
	EEAR = uiAddress;
     5f4:	88 e0       	ldi	r24, 0x08	; 8
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	9f bb       	out	0x1f, r25	; 31
     5fa:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     5fc:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     5fe:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
     600:	88 bb       	out	0x18, r24	; 24
     602:	88 e8       	ldi	r24, 0x88	; 136
     604:	93 e1       	ldi	r25, 0x13	; 19
     606:	24 e6       	ldi	r18, 0x64	; 100
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	f9 01       	movw	r30, r18
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <eeprom_test+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     610:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     612:	d9 f7       	brne	.-10     	; 0x60a <eeprom_test+0x170>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     614:	e1 99       	sbic	0x1c, 1	; 28
     616:	fe cf       	rjmp	.-4      	; 0x614 <eeprom_test+0x17a>
	/* Set up address register */
	EEAR = uiAddress;
     618:	89 e0       	ldi	r24, 0x09	; 9
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9f bb       	out	0x1f, r25	; 31
     61e:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     620:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     622:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
	_delay_ms(500);
	PORTB = EEPROM_read(9);
     624:	88 bb       	out	0x18, r24	; 24
     626:	88 e8       	ldi	r24, 0x88	; 136
     628:	93 e1       	ldi	r25, 0x13	; 19
     62a:	24 e6       	ldi	r18, 0x64	; 100
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	f9 01       	movw	r30, r18
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <eeprom_test+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     634:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     636:	d9 f7       	brne	.-10     	; 0x62e <eeprom_test+0x194>
	_delay_ms(500);
}
     638:	08 95       	ret

0000063a <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     63a:	e1 99       	sbic	0x1c, 1	; 28
     63c:	fe cf       	rjmp	.-4      	; 0x63a <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     63e:	9f bb       	out	0x1f, r25	; 31
     640:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     642:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     644:	8d b3       	in	r24, 0x1d	; 29
}
     646:	08 95       	ret

00000648 <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
     652:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
}
     654:	0f 90       	pop	r0
     656:	0f be       	out	0x3f, r0	; 63
     658:	0f 90       	pop	r0
     65a:	1f 90       	pop	r1
     65c:	18 95       	reti

0000065e <__fixunssfsi>:
     65e:	ef 92       	push	r14
     660:	ff 92       	push	r15
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	7b 01       	movw	r14, r22
     668:	8c 01       	movw	r16, r24
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	5f e4       	ldi	r21, 0x4F	; 79
     672:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__gesf2>
     676:	88 23       	and	r24, r24
     678:	8c f0       	brlt	.+34     	; 0x69c <__fixunssfsi+0x3e>
     67a:	c8 01       	movw	r24, r16
     67c:	b7 01       	movw	r22, r14
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	5f e4       	ldi	r21, 0x4F	; 79
     686:	0e 94 a7 04 	call	0x94e	; 0x94e <__subsf3>
     68a:	0e 94 ed 06 	call	0xdda	; 0xdda <__fixsfsi>
     68e:	9b 01       	movw	r18, r22
     690:	ac 01       	movw	r20, r24
     692:	20 50       	subi	r18, 0x00	; 0
     694:	30 40       	sbci	r19, 0x00	; 0
     696:	40 40       	sbci	r20, 0x00	; 0
     698:	50 48       	sbci	r21, 0x80	; 128
     69a:	06 c0       	rjmp	.+12     	; 0x6a8 <__fixunssfsi+0x4a>
     69c:	c8 01       	movw	r24, r16
     69e:	b7 01       	movw	r22, r14
     6a0:	0e 94 ed 06 	call	0xdda	; 0xdda <__fixsfsi>
     6a4:	9b 01       	movw	r18, r22
     6a6:	ac 01       	movw	r20, r24
     6a8:	b9 01       	movw	r22, r18
     6aa:	ca 01       	movw	r24, r20
     6ac:	1f 91       	pop	r17
     6ae:	0f 91       	pop	r16
     6b0:	ff 90       	pop	r15
     6b2:	ef 90       	pop	r14
     6b4:	08 95       	ret

000006b6 <_fpadd_parts>:
     6b6:	a0 e0       	ldi	r26, 0x00	; 0
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	e1 e6       	ldi	r30, 0x61	; 97
     6bc:	f3 e0       	ldi	r31, 0x03	; 3
     6be:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__>
     6c2:	dc 01       	movw	r26, r24
     6c4:	2b 01       	movw	r4, r22
     6c6:	fa 01       	movw	r30, r20
     6c8:	9c 91       	ld	r25, X
     6ca:	92 30       	cpi	r25, 0x02	; 2
     6cc:	08 f4       	brcc	.+2      	; 0x6d0 <_fpadd_parts+0x1a>
     6ce:	39 c1       	rjmp	.+626    	; 0x942 <__stack+0xe3>
     6d0:	eb 01       	movw	r28, r22
     6d2:	88 81       	ld	r24, Y
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	08 f4       	brcc	.+2      	; 0x6da <_fpadd_parts+0x24>
     6d8:	33 c1       	rjmp	.+614    	; 0x940 <__stack+0xe1>
     6da:	94 30       	cpi	r25, 0x04	; 4
     6dc:	69 f4       	brne	.+26     	; 0x6f8 <_fpadd_parts+0x42>
     6de:	84 30       	cpi	r24, 0x04	; 4
     6e0:	09 f0       	breq	.+2      	; 0x6e4 <_fpadd_parts+0x2e>
     6e2:	2f c1       	rjmp	.+606    	; 0x942 <__stack+0xe3>
     6e4:	11 96       	adiw	r26, 0x01	; 1
     6e6:	9c 91       	ld	r25, X
     6e8:	11 97       	sbiw	r26, 0x01	; 1
     6ea:	89 81       	ldd	r24, Y+1	; 0x01
     6ec:	98 17       	cp	r25, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <_fpadd_parts+0x3c>
     6f0:	28 c1       	rjmp	.+592    	; 0x942 <__stack+0xe3>
     6f2:	a0 e6       	ldi	r26, 0x60	; 96
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	25 c1       	rjmp	.+586    	; 0x942 <__stack+0xe3>
     6f8:	84 30       	cpi	r24, 0x04	; 4
     6fa:	09 f4       	brne	.+2      	; 0x6fe <_fpadd_parts+0x48>
     6fc:	21 c1       	rjmp	.+578    	; 0x940 <__stack+0xe1>
     6fe:	82 30       	cpi	r24, 0x02	; 2
     700:	a9 f4       	brne	.+42     	; 0x72c <_fpadd_parts+0x76>
     702:	92 30       	cpi	r25, 0x02	; 2
     704:	09 f0       	breq	.+2      	; 0x708 <_fpadd_parts+0x52>
     706:	1d c1       	rjmp	.+570    	; 0x942 <__stack+0xe3>
     708:	9a 01       	movw	r18, r20
     70a:	ad 01       	movw	r20, r26
     70c:	88 e0       	ldi	r24, 0x08	; 8
     70e:	ea 01       	movw	r28, r20
     710:	09 90       	ld	r0, Y+
     712:	ae 01       	movw	r20, r28
     714:	e9 01       	movw	r28, r18
     716:	09 92       	st	Y+, r0
     718:	9e 01       	movw	r18, r28
     71a:	81 50       	subi	r24, 0x01	; 1
     71c:	c1 f7       	brne	.-16     	; 0x70e <_fpadd_parts+0x58>
     71e:	e2 01       	movw	r28, r4
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	9c 91       	ld	r25, X
     726:	89 23       	and	r24, r25
     728:	81 83       	std	Z+1, r24	; 0x01
     72a:	08 c1       	rjmp	.+528    	; 0x93c <__stack+0xdd>
     72c:	92 30       	cpi	r25, 0x02	; 2
     72e:	09 f4       	brne	.+2      	; 0x732 <_fpadd_parts+0x7c>
     730:	07 c1       	rjmp	.+526    	; 0x940 <__stack+0xe1>
     732:	12 96       	adiw	r26, 0x02	; 2
     734:	2d 90       	ld	r2, X+
     736:	3c 90       	ld	r3, X
     738:	13 97       	sbiw	r26, 0x03	; 3
     73a:	eb 01       	movw	r28, r22
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	9b 81       	ldd	r25, Y+3	; 0x03
     740:	14 96       	adiw	r26, 0x04	; 4
     742:	ad 90       	ld	r10, X+
     744:	bd 90       	ld	r11, X+
     746:	cd 90       	ld	r12, X+
     748:	dc 90       	ld	r13, X
     74a:	17 97       	sbiw	r26, 0x07	; 7
     74c:	ec 80       	ldd	r14, Y+4	; 0x04
     74e:	fd 80       	ldd	r15, Y+5	; 0x05
     750:	0e 81       	ldd	r16, Y+6	; 0x06
     752:	1f 81       	ldd	r17, Y+7	; 0x07
     754:	91 01       	movw	r18, r2
     756:	28 1b       	sub	r18, r24
     758:	39 0b       	sbc	r19, r25
     75a:	b9 01       	movw	r22, r18
     75c:	37 ff       	sbrs	r19, 7
     75e:	04 c0       	rjmp	.+8      	; 0x768 <_fpadd_parts+0xb2>
     760:	66 27       	eor	r22, r22
     762:	77 27       	eor	r23, r23
     764:	62 1b       	sub	r22, r18
     766:	73 0b       	sbc	r23, r19
     768:	60 32       	cpi	r22, 0x20	; 32
     76a:	71 05       	cpc	r23, r1
     76c:	0c f0       	brlt	.+2      	; 0x770 <_fpadd_parts+0xba>
     76e:	61 c0       	rjmp	.+194    	; 0x832 <_fpadd_parts+0x17c>
     770:	12 16       	cp	r1, r18
     772:	13 06       	cpc	r1, r19
     774:	6c f5       	brge	.+90     	; 0x7d0 <_fpadd_parts+0x11a>
     776:	37 01       	movw	r6, r14
     778:	48 01       	movw	r8, r16
     77a:	06 2e       	mov	r0, r22
     77c:	04 c0       	rjmp	.+8      	; 0x786 <_fpadd_parts+0xd0>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <_fpadd_parts+0xc8>
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	50 e0       	ldi	r21, 0x00	; 0
     792:	04 c0       	rjmp	.+8      	; 0x79c <_fpadd_parts+0xe6>
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	44 1f       	adc	r20, r20
     79a:	55 1f       	adc	r21, r21
     79c:	6a 95       	dec	r22
     79e:	d2 f7       	brpl	.-12     	; 0x794 <_fpadd_parts+0xde>
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	30 40       	sbci	r19, 0x00	; 0
     7a4:	40 40       	sbci	r20, 0x00	; 0
     7a6:	50 40       	sbci	r21, 0x00	; 0
     7a8:	2e 21       	and	r18, r14
     7aa:	3f 21       	and	r19, r15
     7ac:	40 23       	and	r20, r16
     7ae:	51 23       	and	r21, r17
     7b0:	21 15       	cp	r18, r1
     7b2:	31 05       	cpc	r19, r1
     7b4:	41 05       	cpc	r20, r1
     7b6:	51 05       	cpc	r21, r1
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <_fpadd_parts+0x10c>
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	40 e0       	ldi	r20, 0x00	; 0
     7c0:	50 e0       	ldi	r21, 0x00	; 0
     7c2:	79 01       	movw	r14, r18
     7c4:	8a 01       	movw	r16, r20
     7c6:	e6 28       	or	r14, r6
     7c8:	f7 28       	or	r15, r7
     7ca:	08 29       	or	r16, r8
     7cc:	19 29       	or	r17, r9
     7ce:	3c c0       	rjmp	.+120    	; 0x848 <_fpadd_parts+0x192>
     7d0:	23 2b       	or	r18, r19
     7d2:	d1 f1       	breq	.+116    	; 0x848 <_fpadd_parts+0x192>
     7d4:	26 0e       	add	r2, r22
     7d6:	37 1e       	adc	r3, r23
     7d8:	35 01       	movw	r6, r10
     7da:	46 01       	movw	r8, r12
     7dc:	06 2e       	mov	r0, r22
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <_fpadd_parts+0x132>
     7e0:	96 94       	lsr	r9
     7e2:	87 94       	ror	r8
     7e4:	77 94       	ror	r7
     7e6:	67 94       	ror	r6
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <_fpadd_parts+0x12a>
     7ec:	21 e0       	ldi	r18, 0x01	; 1
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	04 c0       	rjmp	.+8      	; 0x7fe <_fpadd_parts+0x148>
     7f6:	22 0f       	add	r18, r18
     7f8:	33 1f       	adc	r19, r19
     7fa:	44 1f       	adc	r20, r20
     7fc:	55 1f       	adc	r21, r21
     7fe:	6a 95       	dec	r22
     800:	d2 f7       	brpl	.-12     	; 0x7f6 <_fpadd_parts+0x140>
     802:	21 50       	subi	r18, 0x01	; 1
     804:	30 40       	sbci	r19, 0x00	; 0
     806:	40 40       	sbci	r20, 0x00	; 0
     808:	50 40       	sbci	r21, 0x00	; 0
     80a:	2a 21       	and	r18, r10
     80c:	3b 21       	and	r19, r11
     80e:	4c 21       	and	r20, r12
     810:	5d 21       	and	r21, r13
     812:	21 15       	cp	r18, r1
     814:	31 05       	cpc	r19, r1
     816:	41 05       	cpc	r20, r1
     818:	51 05       	cpc	r21, r1
     81a:	21 f0       	breq	.+8      	; 0x824 <_fpadd_parts+0x16e>
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	59 01       	movw	r10, r18
     826:	6a 01       	movw	r12, r20
     828:	a6 28       	or	r10, r6
     82a:	b7 28       	or	r11, r7
     82c:	c8 28       	or	r12, r8
     82e:	d9 28       	or	r13, r9
     830:	0b c0       	rjmp	.+22     	; 0x848 <_fpadd_parts+0x192>
     832:	82 15       	cp	r24, r2
     834:	93 05       	cpc	r25, r3
     836:	2c f0       	brlt	.+10     	; 0x842 <_fpadd_parts+0x18c>
     838:	1c 01       	movw	r2, r24
     83a:	aa 24       	eor	r10, r10
     83c:	bb 24       	eor	r11, r11
     83e:	65 01       	movw	r12, r10
     840:	03 c0       	rjmp	.+6      	; 0x848 <_fpadd_parts+0x192>
     842:	ee 24       	eor	r14, r14
     844:	ff 24       	eor	r15, r15
     846:	87 01       	movw	r16, r14
     848:	11 96       	adiw	r26, 0x01	; 1
     84a:	9c 91       	ld	r25, X
     84c:	d2 01       	movw	r26, r4
     84e:	11 96       	adiw	r26, 0x01	; 1
     850:	8c 91       	ld	r24, X
     852:	98 17       	cp	r25, r24
     854:	09 f4       	brne	.+2      	; 0x858 <_fpadd_parts+0x1a2>
     856:	45 c0       	rjmp	.+138    	; 0x8e2 <__stack+0x83>
     858:	99 23       	and	r25, r25
     85a:	39 f0       	breq	.+14     	; 0x86a <__stack+0xb>
     85c:	a8 01       	movw	r20, r16
     85e:	97 01       	movw	r18, r14
     860:	2a 19       	sub	r18, r10
     862:	3b 09       	sbc	r19, r11
     864:	4c 09       	sbc	r20, r12
     866:	5d 09       	sbc	r21, r13
     868:	06 c0       	rjmp	.+12     	; 0x876 <__stack+0x17>
     86a:	a6 01       	movw	r20, r12
     86c:	95 01       	movw	r18, r10
     86e:	2e 19       	sub	r18, r14
     870:	3f 09       	sbc	r19, r15
     872:	40 0b       	sbc	r20, r16
     874:	51 0b       	sbc	r21, r17
     876:	57 fd       	sbrc	r21, 7
     878:	08 c0       	rjmp	.+16     	; 0x88a <__stack+0x2b>
     87a:	11 82       	std	Z+1, r1	; 0x01
     87c:	33 82       	std	Z+3, r3	; 0x03
     87e:	22 82       	std	Z+2, r2	; 0x02
     880:	24 83       	std	Z+4, r18	; 0x04
     882:	35 83       	std	Z+5, r19	; 0x05
     884:	46 83       	std	Z+6, r20	; 0x06
     886:	57 83       	std	Z+7, r21	; 0x07
     888:	1d c0       	rjmp	.+58     	; 0x8c4 <__stack+0x65>
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	81 83       	std	Z+1, r24	; 0x01
     88e:	33 82       	std	Z+3, r3	; 0x03
     890:	22 82       	std	Z+2, r2	; 0x02
     892:	88 27       	eor	r24, r24
     894:	99 27       	eor	r25, r25
     896:	dc 01       	movw	r26, r24
     898:	82 1b       	sub	r24, r18
     89a:	93 0b       	sbc	r25, r19
     89c:	a4 0b       	sbc	r26, r20
     89e:	b5 0b       	sbc	r27, r21
     8a0:	84 83       	std	Z+4, r24	; 0x04
     8a2:	95 83       	std	Z+5, r25	; 0x05
     8a4:	a6 83       	std	Z+6, r26	; 0x06
     8a6:	b7 83       	std	Z+7, r27	; 0x07
     8a8:	0d c0       	rjmp	.+26     	; 0x8c4 <__stack+0x65>
     8aa:	22 0f       	add	r18, r18
     8ac:	33 1f       	adc	r19, r19
     8ae:	44 1f       	adc	r20, r20
     8b0:	55 1f       	adc	r21, r21
     8b2:	24 83       	std	Z+4, r18	; 0x04
     8b4:	35 83       	std	Z+5, r19	; 0x05
     8b6:	46 83       	std	Z+6, r20	; 0x06
     8b8:	57 83       	std	Z+7, r21	; 0x07
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	93 81       	ldd	r25, Z+3	; 0x03
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	93 83       	std	Z+3, r25	; 0x03
     8c2:	82 83       	std	Z+2, r24	; 0x02
     8c4:	24 81       	ldd	r18, Z+4	; 0x04
     8c6:	35 81       	ldd	r19, Z+5	; 0x05
     8c8:	46 81       	ldd	r20, Z+6	; 0x06
     8ca:	57 81       	ldd	r21, Z+7	; 0x07
     8cc:	da 01       	movw	r26, r20
     8ce:	c9 01       	movw	r24, r18
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	a1 09       	sbc	r26, r1
     8d4:	b1 09       	sbc	r27, r1
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	af 4f       	sbci	r26, 0xFF	; 255
     8dc:	bf 43       	sbci	r27, 0x3F	; 63
     8de:	28 f3       	brcs	.-54     	; 0x8aa <__stack+0x4b>
     8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <__stack+0x99>
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	33 82       	std	Z+3, r3	; 0x03
     8e6:	22 82       	std	Z+2, r2	; 0x02
     8e8:	ea 0c       	add	r14, r10
     8ea:	fb 1c       	adc	r15, r11
     8ec:	0c 1d       	adc	r16, r12
     8ee:	1d 1d       	adc	r17, r13
     8f0:	e4 82       	std	Z+4, r14	; 0x04
     8f2:	f5 82       	std	Z+5, r15	; 0x05
     8f4:	06 83       	std	Z+6, r16	; 0x06
     8f6:	17 83       	std	Z+7, r17	; 0x07
     8f8:	83 e0       	ldi	r24, 0x03	; 3
     8fa:	80 83       	st	Z, r24
     8fc:	24 81       	ldd	r18, Z+4	; 0x04
     8fe:	35 81       	ldd	r19, Z+5	; 0x05
     900:	46 81       	ldd	r20, Z+6	; 0x06
     902:	57 81       	ldd	r21, Z+7	; 0x07
     904:	57 ff       	sbrs	r21, 7
     906:	1a c0       	rjmp	.+52     	; 0x93c <__stack+0xdd>
     908:	c9 01       	movw	r24, r18
     90a:	aa 27       	eor	r26, r26
     90c:	97 fd       	sbrc	r25, 7
     90e:	a0 95       	com	r26
     910:	ba 2f       	mov	r27, r26
     912:	81 70       	andi	r24, 0x01	; 1
     914:	90 70       	andi	r25, 0x00	; 0
     916:	a0 70       	andi	r26, 0x00	; 0
     918:	b0 70       	andi	r27, 0x00	; 0
     91a:	56 95       	lsr	r21
     91c:	47 95       	ror	r20
     91e:	37 95       	ror	r19
     920:	27 95       	ror	r18
     922:	82 2b       	or	r24, r18
     924:	93 2b       	or	r25, r19
     926:	a4 2b       	or	r26, r20
     928:	b5 2b       	or	r27, r21
     92a:	84 83       	std	Z+4, r24	; 0x04
     92c:	95 83       	std	Z+5, r25	; 0x05
     92e:	a6 83       	std	Z+6, r26	; 0x06
     930:	b7 83       	std	Z+7, r27	; 0x07
     932:	82 81       	ldd	r24, Z+2	; 0x02
     934:	93 81       	ldd	r25, Z+3	; 0x03
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	93 83       	std	Z+3, r25	; 0x03
     93a:	82 83       	std	Z+2, r24	; 0x02
     93c:	df 01       	movw	r26, r30
     93e:	01 c0       	rjmp	.+2      	; 0x942 <__stack+0xe3>
     940:	d2 01       	movw	r26, r4
     942:	cd 01       	movw	r24, r26
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	e2 e1       	ldi	r30, 0x12	; 18
     94a:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__>

0000094e <__subsf3>:
     94e:	a0 e2       	ldi	r26, 0x20	; 32
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	ed ea       	ldi	r30, 0xAD	; 173
     954:	f4 e0       	ldi	r31, 0x04	; 4
     956:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__+0x18>
     95a:	69 83       	std	Y+1, r22	; 0x01
     95c:	7a 83       	std	Y+2, r23	; 0x02
     95e:	8b 83       	std	Y+3, r24	; 0x03
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	2d 83       	std	Y+5, r18	; 0x05
     964:	3e 83       	std	Y+6, r19	; 0x06
     966:	4f 83       	std	Y+7, r20	; 0x07
     968:	58 87       	std	Y+8, r21	; 0x08
     96a:	e9 e0       	ldi	r30, 0x09	; 9
     96c:	ee 2e       	mov	r14, r30
     96e:	f1 2c       	mov	r15, r1
     970:	ec 0e       	add	r14, r28
     972:	fd 1e       	adc	r15, r29
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	b7 01       	movw	r22, r14
     97a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     97e:	8e 01       	movw	r16, r28
     980:	0f 5e       	subi	r16, 0xEF	; 239
     982:	1f 4f       	sbci	r17, 0xFF	; 255
     984:	ce 01       	movw	r24, r28
     986:	05 96       	adiw	r24, 0x05	; 5
     988:	b8 01       	movw	r22, r16
     98a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     98e:	8a 89       	ldd	r24, Y+18	; 0x12
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	89 27       	eor	r24, r25
     994:	8a 8b       	std	Y+18, r24	; 0x12
     996:	c7 01       	movw	r24, r14
     998:	b8 01       	movw	r22, r16
     99a:	ae 01       	movw	r20, r28
     99c:	47 5e       	subi	r20, 0xE7	; 231
     99e:	5f 4f       	sbci	r21, 0xFF	; 255
     9a0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_fpadd_parts>
     9a4:	0e 94 90 07 	call	0xf20	; 0xf20 <__pack_f>
     9a8:	a0 96       	adiw	r28, 0x20	; 32
     9aa:	e6 e0       	ldi	r30, 0x06	; 6
     9ac:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__+0x18>

000009b0 <__addsf3>:
     9b0:	a0 e2       	ldi	r26, 0x20	; 32
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	ee ed       	ldi	r30, 0xDE	; 222
     9b6:	f4 e0       	ldi	r31, 0x04	; 4
     9b8:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__+0x18>
     9bc:	69 83       	std	Y+1, r22	; 0x01
     9be:	7a 83       	std	Y+2, r23	; 0x02
     9c0:	8b 83       	std	Y+3, r24	; 0x03
     9c2:	9c 83       	std	Y+4, r25	; 0x04
     9c4:	2d 83       	std	Y+5, r18	; 0x05
     9c6:	3e 83       	std	Y+6, r19	; 0x06
     9c8:	4f 83       	std	Y+7, r20	; 0x07
     9ca:	58 87       	std	Y+8, r21	; 0x08
     9cc:	f9 e0       	ldi	r31, 0x09	; 9
     9ce:	ef 2e       	mov	r14, r31
     9d0:	f1 2c       	mov	r15, r1
     9d2:	ec 0e       	add	r14, r28
     9d4:	fd 1e       	adc	r15, r29
     9d6:	ce 01       	movw	r24, r28
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	b7 01       	movw	r22, r14
     9dc:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     9e0:	8e 01       	movw	r16, r28
     9e2:	0f 5e       	subi	r16, 0xEF	; 239
     9e4:	1f 4f       	sbci	r17, 0xFF	; 255
     9e6:	ce 01       	movw	r24, r28
     9e8:	05 96       	adiw	r24, 0x05	; 5
     9ea:	b8 01       	movw	r22, r16
     9ec:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	ae 01       	movw	r20, r28
     9f6:	47 5e       	subi	r20, 0xE7	; 231
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <_fpadd_parts>
     9fe:	0e 94 90 07 	call	0xf20	; 0xf20 <__pack_f>
     a02:	a0 96       	adiw	r28, 0x20	; 32
     a04:	e6 e0       	ldi	r30, 0x06	; 6
     a06:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__+0x18>

00000a0a <__mulsf3>:
     a0a:	a0 e2       	ldi	r26, 0x20	; 32
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	eb e0       	ldi	r30, 0x0B	; 11
     a10:	f5 e0       	ldi	r31, 0x05	; 5
     a12:	0c 94 36 09 	jmp	0x126c	; 0x126c <__prologue_saves__>
     a16:	69 83       	std	Y+1, r22	; 0x01
     a18:	7a 83       	std	Y+2, r23	; 0x02
     a1a:	8b 83       	std	Y+3, r24	; 0x03
     a1c:	9c 83       	std	Y+4, r25	; 0x04
     a1e:	2d 83       	std	Y+5, r18	; 0x05
     a20:	3e 83       	std	Y+6, r19	; 0x06
     a22:	4f 83       	std	Y+7, r20	; 0x07
     a24:	58 87       	std	Y+8, r21	; 0x08
     a26:	ce 01       	movw	r24, r28
     a28:	01 96       	adiw	r24, 0x01	; 1
     a2a:	be 01       	movw	r22, r28
     a2c:	67 5f       	subi	r22, 0xF7	; 247
     a2e:	7f 4f       	sbci	r23, 0xFF	; 255
     a30:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     a34:	ce 01       	movw	r24, r28
     a36:	05 96       	adiw	r24, 0x05	; 5
     a38:	be 01       	movw	r22, r28
     a3a:	6f 5e       	subi	r22, 0xEF	; 239
     a3c:	7f 4f       	sbci	r23, 0xFF	; 255
     a3e:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     a42:	99 85       	ldd	r25, Y+9	; 0x09
     a44:	92 30       	cpi	r25, 0x02	; 2
     a46:	88 f0       	brcs	.+34     	; 0xa6a <__mulsf3+0x60>
     a48:	89 89       	ldd	r24, Y+17	; 0x11
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	c8 f0       	brcs	.+50     	; 0xa80 <__mulsf3+0x76>
     a4e:	94 30       	cpi	r25, 0x04	; 4
     a50:	19 f4       	brne	.+6      	; 0xa58 <__mulsf3+0x4e>
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	51 f4       	brne	.+20     	; 0xa6a <__mulsf3+0x60>
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__mulsf3+0x56>
     a58:	84 30       	cpi	r24, 0x04	; 4
     a5a:	29 f4       	brne	.+10     	; 0xa66 <__mulsf3+0x5c>
     a5c:	92 30       	cpi	r25, 0x02	; 2
     a5e:	81 f4       	brne	.+32     	; 0xa80 <__mulsf3+0x76>
     a60:	80 e6       	ldi	r24, 0x60	; 96
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	c6 c0       	rjmp	.+396    	; 0xbf2 <__mulsf3+0x1e8>
     a66:	92 30       	cpi	r25, 0x02	; 2
     a68:	49 f4       	brne	.+18     	; 0xa7c <__mulsf3+0x72>
     a6a:	20 e0       	ldi	r18, 0x00	; 0
     a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a6e:	8a 89       	ldd	r24, Y+18	; 0x12
     a70:	98 13       	cpse	r25, r24
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	2a 87       	std	Y+10, r18	; 0x0a
     a76:	ce 01       	movw	r24, r28
     a78:	09 96       	adiw	r24, 0x09	; 9
     a7a:	bb c0       	rjmp	.+374    	; 0xbf2 <__mulsf3+0x1e8>
     a7c:	82 30       	cpi	r24, 0x02	; 2
     a7e:	49 f4       	brne	.+18     	; 0xa92 <__mulsf3+0x88>
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	9a 85       	ldd	r25, Y+10	; 0x0a
     a84:	8a 89       	ldd	r24, Y+18	; 0x12
     a86:	98 13       	cpse	r25, r24
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	2a 8b       	std	Y+18, r18	; 0x12
     a8c:	ce 01       	movw	r24, r28
     a8e:	41 96       	adiw	r24, 0x11	; 17
     a90:	b0 c0       	rjmp	.+352    	; 0xbf2 <__mulsf3+0x1e8>
     a92:	2d 84       	ldd	r2, Y+13	; 0x0d
     a94:	3e 84       	ldd	r3, Y+14	; 0x0e
     a96:	4f 84       	ldd	r4, Y+15	; 0x0f
     a98:	58 88       	ldd	r5, Y+16	; 0x10
     a9a:	6d 88       	ldd	r6, Y+21	; 0x15
     a9c:	7e 88       	ldd	r7, Y+22	; 0x16
     a9e:	8f 88       	ldd	r8, Y+23	; 0x17
     aa0:	98 8c       	ldd	r9, Y+24	; 0x18
     aa2:	ee 24       	eor	r14, r14
     aa4:	ff 24       	eor	r15, r15
     aa6:	87 01       	movw	r16, r14
     aa8:	aa 24       	eor	r10, r10
     aaa:	bb 24       	eor	r11, r11
     aac:	65 01       	movw	r12, r10
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	e0 e0       	ldi	r30, 0x00	; 0
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	c1 01       	movw	r24, r2
     abc:	81 70       	andi	r24, 0x01	; 1
     abe:	90 70       	andi	r25, 0x00	; 0
     ac0:	89 2b       	or	r24, r25
     ac2:	e9 f0       	breq	.+58     	; 0xafe <__mulsf3+0xf4>
     ac4:	e6 0c       	add	r14, r6
     ac6:	f7 1c       	adc	r15, r7
     ac8:	08 1d       	adc	r16, r8
     aca:	19 1d       	adc	r17, r9
     acc:	9a 01       	movw	r18, r20
     ace:	ab 01       	movw	r20, r22
     ad0:	2a 0d       	add	r18, r10
     ad2:	3b 1d       	adc	r19, r11
     ad4:	4c 1d       	adc	r20, r12
     ad6:	5d 1d       	adc	r21, r13
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e6 14       	cp	r14, r6
     ae2:	f7 04       	cpc	r15, r7
     ae4:	08 05       	cpc	r16, r8
     ae6:	19 05       	cpc	r17, r9
     ae8:	20 f4       	brcc	.+8      	; 0xaf2 <__mulsf3+0xe8>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	a0 e0       	ldi	r26, 0x00	; 0
     af0:	b0 e0       	ldi	r27, 0x00	; 0
     af2:	ba 01       	movw	r22, r20
     af4:	a9 01       	movw	r20, r18
     af6:	48 0f       	add	r20, r24
     af8:	59 1f       	adc	r21, r25
     afa:	6a 1f       	adc	r22, r26
     afc:	7b 1f       	adc	r23, r27
     afe:	aa 0c       	add	r10, r10
     b00:	bb 1c       	adc	r11, r11
     b02:	cc 1c       	adc	r12, r12
     b04:	dd 1c       	adc	r13, r13
     b06:	97 fe       	sbrs	r9, 7
     b08:	08 c0       	rjmp	.+16     	; 0xb1a <__mulsf3+0x110>
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	a8 2a       	or	r10, r24
     b14:	b9 2a       	or	r11, r25
     b16:	ca 2a       	or	r12, r26
     b18:	db 2a       	or	r13, r27
     b1a:	31 96       	adiw	r30, 0x01	; 1
     b1c:	e0 32       	cpi	r30, 0x20	; 32
     b1e:	f1 05       	cpc	r31, r1
     b20:	49 f0       	breq	.+18     	; 0xb34 <__mulsf3+0x12a>
     b22:	66 0c       	add	r6, r6
     b24:	77 1c       	adc	r7, r7
     b26:	88 1c       	adc	r8, r8
     b28:	99 1c       	adc	r9, r9
     b2a:	56 94       	lsr	r5
     b2c:	47 94       	ror	r4
     b2e:	37 94       	ror	r3
     b30:	27 94       	ror	r2
     b32:	c3 cf       	rjmp	.-122    	; 0xaba <__mulsf3+0xb0>
     b34:	fa 85       	ldd	r31, Y+10	; 0x0a
     b36:	ea 89       	ldd	r30, Y+18	; 0x12
     b38:	2b 89       	ldd	r18, Y+19	; 0x13
     b3a:	3c 89       	ldd	r19, Y+20	; 0x14
     b3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b40:	28 0f       	add	r18, r24
     b42:	39 1f       	adc	r19, r25
     b44:	2e 5f       	subi	r18, 0xFE	; 254
     b46:	3f 4f       	sbci	r19, 0xFF	; 255
     b48:	17 c0       	rjmp	.+46     	; 0xb78 <__mulsf3+0x16e>
     b4a:	ca 01       	movw	r24, r20
     b4c:	81 70       	andi	r24, 0x01	; 1
     b4e:	90 70       	andi	r25, 0x00	; 0
     b50:	89 2b       	or	r24, r25
     b52:	61 f0       	breq	.+24     	; 0xb6c <__mulsf3+0x162>
     b54:	16 95       	lsr	r17
     b56:	07 95       	ror	r16
     b58:	f7 94       	ror	r15
     b5a:	e7 94       	ror	r14
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e8       	ldi	r27, 0x80	; 128
     b64:	e8 2a       	or	r14, r24
     b66:	f9 2a       	or	r15, r25
     b68:	0a 2b       	or	r16, r26
     b6a:	1b 2b       	or	r17, r27
     b6c:	76 95       	lsr	r23
     b6e:	67 95       	ror	r22
     b70:	57 95       	ror	r21
     b72:	47 95       	ror	r20
     b74:	2f 5f       	subi	r18, 0xFF	; 255
     b76:	3f 4f       	sbci	r19, 0xFF	; 255
     b78:	77 fd       	sbrc	r23, 7
     b7a:	e7 cf       	rjmp	.-50     	; 0xb4a <__mulsf3+0x140>
     b7c:	0c c0       	rjmp	.+24     	; 0xb96 <__mulsf3+0x18c>
     b7e:	44 0f       	add	r20, r20
     b80:	55 1f       	adc	r21, r21
     b82:	66 1f       	adc	r22, r22
     b84:	77 1f       	adc	r23, r23
     b86:	17 fd       	sbrc	r17, 7
     b88:	41 60       	ori	r20, 0x01	; 1
     b8a:	ee 0c       	add	r14, r14
     b8c:	ff 1c       	adc	r15, r15
     b8e:	00 1f       	adc	r16, r16
     b90:	11 1f       	adc	r17, r17
     b92:	21 50       	subi	r18, 0x01	; 1
     b94:	30 40       	sbci	r19, 0x00	; 0
     b96:	40 30       	cpi	r20, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	59 07       	cpc	r21, r25
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	69 07       	cpc	r22, r25
     ba0:	90 e4       	ldi	r25, 0x40	; 64
     ba2:	79 07       	cpc	r23, r25
     ba4:	60 f3       	brcs	.-40     	; 0xb7e <__mulsf3+0x174>
     ba6:	2b 8f       	std	Y+27, r18	; 0x1b
     ba8:	3c 8f       	std	Y+28, r19	; 0x1c
     baa:	db 01       	movw	r26, r22
     bac:	ca 01       	movw	r24, r20
     bae:	8f 77       	andi	r24, 0x7F	; 127
     bb0:	90 70       	andi	r25, 0x00	; 0
     bb2:	a0 70       	andi	r26, 0x00	; 0
     bb4:	b0 70       	andi	r27, 0x00	; 0
     bb6:	80 34       	cpi	r24, 0x40	; 64
     bb8:	91 05       	cpc	r25, r1
     bba:	a1 05       	cpc	r26, r1
     bbc:	b1 05       	cpc	r27, r1
     bbe:	61 f4       	brne	.+24     	; 0xbd8 <__mulsf3+0x1ce>
     bc0:	47 fd       	sbrc	r20, 7
     bc2:	0a c0       	rjmp	.+20     	; 0xbd8 <__mulsf3+0x1ce>
     bc4:	e1 14       	cp	r14, r1
     bc6:	f1 04       	cpc	r15, r1
     bc8:	01 05       	cpc	r16, r1
     bca:	11 05       	cpc	r17, r1
     bcc:	29 f0       	breq	.+10     	; 0xbd8 <__mulsf3+0x1ce>
     bce:	40 5c       	subi	r20, 0xC0	; 192
     bd0:	5f 4f       	sbci	r21, 0xFF	; 255
     bd2:	6f 4f       	sbci	r22, 0xFF	; 255
     bd4:	7f 4f       	sbci	r23, 0xFF	; 255
     bd6:	40 78       	andi	r20, 0x80	; 128
     bd8:	1a 8e       	std	Y+26, r1	; 0x1a
     bda:	fe 17       	cp	r31, r30
     bdc:	11 f0       	breq	.+4      	; 0xbe2 <__mulsf3+0x1d8>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	8a 8f       	std	Y+26, r24	; 0x1a
     be2:	4d 8f       	std	Y+29, r20	; 0x1d
     be4:	5e 8f       	std	Y+30, r21	; 0x1e
     be6:	6f 8f       	std	Y+31, r22	; 0x1f
     be8:	78 a3       	std	Y+32, r23	; 0x20
     bea:	83 e0       	ldi	r24, 0x03	; 3
     bec:	89 8f       	std	Y+25, r24	; 0x19
     bee:	ce 01       	movw	r24, r28
     bf0:	49 96       	adiw	r24, 0x19	; 25
     bf2:	0e 94 90 07 	call	0xf20	; 0xf20 <__pack_f>
     bf6:	a0 96       	adiw	r28, 0x20	; 32
     bf8:	e2 e1       	ldi	r30, 0x12	; 18
     bfa:	0c 94 52 09 	jmp	0x12a4	; 0x12a4 <__epilogue_restores__>

00000bfe <__gtsf2>:
     bfe:	a8 e1       	ldi	r26, 0x18	; 24
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	e5 e0       	ldi	r30, 0x05	; 5
     c04:	f6 e0       	ldi	r31, 0x06	; 6
     c06:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__+0x18>
     c0a:	69 83       	std	Y+1, r22	; 0x01
     c0c:	7a 83       	std	Y+2, r23	; 0x02
     c0e:	8b 83       	std	Y+3, r24	; 0x03
     c10:	9c 83       	std	Y+4, r25	; 0x04
     c12:	2d 83       	std	Y+5, r18	; 0x05
     c14:	3e 83       	std	Y+6, r19	; 0x06
     c16:	4f 83       	std	Y+7, r20	; 0x07
     c18:	58 87       	std	Y+8, r21	; 0x08
     c1a:	89 e0       	ldi	r24, 0x09	; 9
     c1c:	e8 2e       	mov	r14, r24
     c1e:	f1 2c       	mov	r15, r1
     c20:	ec 0e       	add	r14, r28
     c22:	fd 1e       	adc	r15, r29
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	b7 01       	movw	r22, r14
     c2a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     c2e:	8e 01       	movw	r16, r28
     c30:	0f 5e       	subi	r16, 0xEF	; 239
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	ce 01       	movw	r24, r28
     c36:	05 96       	adiw	r24, 0x05	; 5
     c38:	b8 01       	movw	r22, r16
     c3a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     c3e:	89 85       	ldd	r24, Y+9	; 0x09
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	40 f0       	brcs	.+16     	; 0xc54 <__gtsf2+0x56>
     c44:	89 89       	ldd	r24, Y+17	; 0x11
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	28 f0       	brcs	.+10     	; 0xc54 <__gtsf2+0x56>
     c4a:	c7 01       	movw	r24, r14
     c4c:	b8 01       	movw	r22, r16
     c4e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fpcmp_parts_f>
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <__gtsf2+0x58>
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	68 96       	adiw	r28, 0x18	; 24
     c58:	e6 e0       	ldi	r30, 0x06	; 6
     c5a:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__+0x18>

00000c5e <__gesf2>:
     c5e:	a8 e1       	ldi	r26, 0x18	; 24
     c60:	b0 e0       	ldi	r27, 0x00	; 0
     c62:	e5 e3       	ldi	r30, 0x35	; 53
     c64:	f6 e0       	ldi	r31, 0x06	; 6
     c66:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__+0x18>
     c6a:	69 83       	std	Y+1, r22	; 0x01
     c6c:	7a 83       	std	Y+2, r23	; 0x02
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	2d 83       	std	Y+5, r18	; 0x05
     c74:	3e 83       	std	Y+6, r19	; 0x06
     c76:	4f 83       	std	Y+7, r20	; 0x07
     c78:	58 87       	std	Y+8, r21	; 0x08
     c7a:	89 e0       	ldi	r24, 0x09	; 9
     c7c:	e8 2e       	mov	r14, r24
     c7e:	f1 2c       	mov	r15, r1
     c80:	ec 0e       	add	r14, r28
     c82:	fd 1e       	adc	r15, r29
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	b7 01       	movw	r22, r14
     c8a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     c8e:	8e 01       	movw	r16, r28
     c90:	0f 5e       	subi	r16, 0xEF	; 239
     c92:	1f 4f       	sbci	r17, 0xFF	; 255
     c94:	ce 01       	movw	r24, r28
     c96:	05 96       	adiw	r24, 0x05	; 5
     c98:	b8 01       	movw	r22, r16
     c9a:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     c9e:	89 85       	ldd	r24, Y+9	; 0x09
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	40 f0       	brcs	.+16     	; 0xcb4 <__gesf2+0x56>
     ca4:	89 89       	ldd	r24, Y+17	; 0x11
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	28 f0       	brcs	.+10     	; 0xcb4 <__gesf2+0x56>
     caa:	c7 01       	movw	r24, r14
     cac:	b8 01       	movw	r22, r16
     cae:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fpcmp_parts_f>
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <__gesf2+0x58>
     cb4:	8f ef       	ldi	r24, 0xFF	; 255
     cb6:	68 96       	adiw	r28, 0x18	; 24
     cb8:	e6 e0       	ldi	r30, 0x06	; 6
     cba:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__+0x18>

00000cbe <__ltsf2>:
     cbe:	a8 e1       	ldi	r26, 0x18	; 24
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e5 e6       	ldi	r30, 0x65	; 101
     cc4:	f6 e0       	ldi	r31, 0x06	; 6
     cc6:	0c 94 42 09 	jmp	0x1284	; 0x1284 <__prologue_saves__+0x18>
     cca:	69 83       	std	Y+1, r22	; 0x01
     ccc:	7a 83       	std	Y+2, r23	; 0x02
     cce:	8b 83       	std	Y+3, r24	; 0x03
     cd0:	9c 83       	std	Y+4, r25	; 0x04
     cd2:	2d 83       	std	Y+5, r18	; 0x05
     cd4:	3e 83       	std	Y+6, r19	; 0x06
     cd6:	4f 83       	std	Y+7, r20	; 0x07
     cd8:	58 87       	std	Y+8, r21	; 0x08
     cda:	89 e0       	ldi	r24, 0x09	; 9
     cdc:	e8 2e       	mov	r14, r24
     cde:	f1 2c       	mov	r15, r1
     ce0:	ec 0e       	add	r14, r28
     ce2:	fd 1e       	adc	r15, r29
     ce4:	ce 01       	movw	r24, r28
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	b7 01       	movw	r22, r14
     cea:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     cee:	8e 01       	movw	r16, r28
     cf0:	0f 5e       	subi	r16, 0xEF	; 239
     cf2:	1f 4f       	sbci	r17, 0xFF	; 255
     cf4:	ce 01       	movw	r24, r28
     cf6:	05 96       	adiw	r24, 0x05	; 5
     cf8:	b8 01       	movw	r22, r16
     cfa:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     cfe:	89 85       	ldd	r24, Y+9	; 0x09
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	40 f0       	brcs	.+16     	; 0xd14 <__ltsf2+0x56>
     d04:	89 89       	ldd	r24, Y+17	; 0x11
     d06:	82 30       	cpi	r24, 0x02	; 2
     d08:	28 f0       	brcs	.+10     	; 0xd14 <__ltsf2+0x56>
     d0a:	c7 01       	movw	r24, r14
     d0c:	b8 01       	movw	r22, r16
     d0e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fpcmp_parts_f>
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <__ltsf2+0x58>
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	68 96       	adiw	r28, 0x18	; 24
     d18:	e6 e0       	ldi	r30, 0x06	; 6
     d1a:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__epilogue_restores__+0x18>

00000d1e <__floatsisf>:
     d1e:	a8 e0       	ldi	r26, 0x08	; 8
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e5 e9       	ldi	r30, 0x95	; 149
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__prologue_saves__+0x12>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	83 e0       	ldi	r24, 0x03	; 3
     d30:	89 83       	std	Y+1, r24	; 0x01
     d32:	da 01       	movw	r26, r20
     d34:	c9 01       	movw	r24, r18
     d36:	88 27       	eor	r24, r24
     d38:	b7 fd       	sbrc	r27, 7
     d3a:	83 95       	inc	r24
     d3c:	99 27       	eor	r25, r25
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	b8 2e       	mov	r11, r24
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	41 05       	cpc	r20, r1
     d4a:	51 05       	cpc	r21, r1
     d4c:	19 f4       	brne	.+6      	; 0xd54 <__floatsisf+0x36>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	3a c0       	rjmp	.+116    	; 0xdc8 <__floatsisf+0xaa>
     d54:	88 23       	and	r24, r24
     d56:	a9 f0       	breq	.+42     	; 0xd82 <__floatsisf+0x64>
     d58:	20 30       	cpi	r18, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	38 07       	cpc	r19, r24
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	48 07       	cpc	r20, r24
     d62:	80 e8       	ldi	r24, 0x80	; 128
     d64:	58 07       	cpc	r21, r24
     d66:	29 f4       	brne	.+10     	; 0xd72 <__floatsisf+0x54>
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	9f ec       	ldi	r25, 0xCF	; 207
     d70:	30 c0       	rjmp	.+96     	; 0xdd2 <__floatsisf+0xb4>
     d72:	ee 24       	eor	r14, r14
     d74:	ff 24       	eor	r15, r15
     d76:	87 01       	movw	r16, r14
     d78:	e2 1a       	sub	r14, r18
     d7a:	f3 0a       	sbc	r15, r19
     d7c:	04 0b       	sbc	r16, r20
     d7e:	15 0b       	sbc	r17, r21
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <__floatsisf+0x68>
     d82:	79 01       	movw	r14, r18
     d84:	8a 01       	movw	r16, r20
     d86:	8e e1       	ldi	r24, 0x1E	; 30
     d88:	c8 2e       	mov	r12, r24
     d8a:	d1 2c       	mov	r13, r1
     d8c:	dc 82       	std	Y+4, r13	; 0x04
     d8e:	cb 82       	std	Y+3, r12	; 0x03
     d90:	ed 82       	std	Y+5, r14	; 0x05
     d92:	fe 82       	std	Y+6, r15	; 0x06
     d94:	0f 83       	std	Y+7, r16	; 0x07
     d96:	18 87       	std	Y+8, r17	; 0x08
     d98:	c8 01       	movw	r24, r16
     d9a:	b7 01       	movw	r22, r14
     d9c:	0e 94 41 07 	call	0xe82	; 0xe82 <__clzsi2>
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	18 16       	cp	r1, r24
     da4:	19 06       	cpc	r1, r25
     da6:	84 f4       	brge	.+32     	; 0xdc8 <__floatsisf+0xaa>
     da8:	08 2e       	mov	r0, r24
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__floatsisf+0x96>
     dac:	ee 0c       	add	r14, r14
     dae:	ff 1c       	adc	r15, r15
     db0:	00 1f       	adc	r16, r16
     db2:	11 1f       	adc	r17, r17
     db4:	0a 94       	dec	r0
     db6:	d2 f7       	brpl	.-12     	; 0xdac <__floatsisf+0x8e>
     db8:	ed 82       	std	Y+5, r14	; 0x05
     dba:	fe 82       	std	Y+6, r15	; 0x06
     dbc:	0f 83       	std	Y+7, r16	; 0x07
     dbe:	18 87       	std	Y+8, r17	; 0x08
     dc0:	c8 1a       	sub	r12, r24
     dc2:	d9 0a       	sbc	r13, r25
     dc4:	dc 82       	std	Y+4, r13	; 0x04
     dc6:	cb 82       	std	Y+3, r12	; 0x03
     dc8:	ba 82       	std	Y+2, r11	; 0x02
     dca:	ce 01       	movw	r24, r28
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	0e 94 90 07 	call	0xf20	; 0xf20 <__pack_f>
     dd2:	28 96       	adiw	r28, 0x08	; 8
     dd4:	e9 e0       	ldi	r30, 0x09	; 9
     dd6:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__epilogue_restores__+0x12>

00000dda <__fixsfsi>:
     dda:	ac e0       	ldi	r26, 0x0C	; 12
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e3 ef       	ldi	r30, 0xF3	; 243
     de0:	f6 e0       	ldi	r31, 0x06	; 6
     de2:	0c 94 46 09 	jmp	0x128c	; 0x128c <__prologue_saves__+0x20>
     de6:	69 83       	std	Y+1, r22	; 0x01
     de8:	7a 83       	std	Y+2, r23	; 0x02
     dea:	8b 83       	std	Y+3, r24	; 0x03
     dec:	9c 83       	std	Y+4, r25	; 0x04
     dee:	ce 01       	movw	r24, r28
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	be 01       	movw	r22, r28
     df4:	6b 5f       	subi	r22, 0xFB	; 251
     df6:	7f 4f       	sbci	r23, 0xFF	; 255
     df8:	0e 94 65 08 	call	0x10ca	; 0x10ca <__unpack_f>
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	82 30       	cpi	r24, 0x02	; 2
     e00:	61 f1       	breq	.+88     	; 0xe5a <__fixsfsi+0x80>
     e02:	82 30       	cpi	r24, 0x02	; 2
     e04:	50 f1       	brcs	.+84     	; 0xe5a <__fixsfsi+0x80>
     e06:	84 30       	cpi	r24, 0x04	; 4
     e08:	21 f4       	brne	.+8      	; 0xe12 <__fixsfsi+0x38>
     e0a:	8e 81       	ldd	r24, Y+6	; 0x06
     e0c:	88 23       	and	r24, r24
     e0e:	51 f1       	breq	.+84     	; 0xe64 <__fixsfsi+0x8a>
     e10:	2e c0       	rjmp	.+92     	; 0xe6e <__fixsfsi+0x94>
     e12:	2f 81       	ldd	r18, Y+7	; 0x07
     e14:	38 85       	ldd	r19, Y+8	; 0x08
     e16:	37 fd       	sbrc	r19, 7
     e18:	20 c0       	rjmp	.+64     	; 0xe5a <__fixsfsi+0x80>
     e1a:	6e 81       	ldd	r22, Y+6	; 0x06
     e1c:	2f 31       	cpi	r18, 0x1F	; 31
     e1e:	31 05       	cpc	r19, r1
     e20:	1c f0       	brlt	.+6      	; 0xe28 <__fixsfsi+0x4e>
     e22:	66 23       	and	r22, r22
     e24:	f9 f0       	breq	.+62     	; 0xe64 <__fixsfsi+0x8a>
     e26:	23 c0       	rjmp	.+70     	; 0xe6e <__fixsfsi+0x94>
     e28:	8e e1       	ldi	r24, 0x1E	; 30
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	82 1b       	sub	r24, r18
     e2e:	93 0b       	sbc	r25, r19
     e30:	29 85       	ldd	r18, Y+9	; 0x09
     e32:	3a 85       	ldd	r19, Y+10	; 0x0a
     e34:	4b 85       	ldd	r20, Y+11	; 0x0b
     e36:	5c 85       	ldd	r21, Y+12	; 0x0c
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <__fixsfsi+0x68>
     e3a:	56 95       	lsr	r21
     e3c:	47 95       	ror	r20
     e3e:	37 95       	ror	r19
     e40:	27 95       	ror	r18
     e42:	8a 95       	dec	r24
     e44:	d2 f7       	brpl	.-12     	; 0xe3a <__fixsfsi+0x60>
     e46:	66 23       	and	r22, r22
     e48:	b1 f0       	breq	.+44     	; 0xe76 <__fixsfsi+0x9c>
     e4a:	50 95       	com	r21
     e4c:	40 95       	com	r20
     e4e:	30 95       	com	r19
     e50:	21 95       	neg	r18
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	4f 4f       	sbci	r20, 0xFF	; 255
     e56:	5f 4f       	sbci	r21, 0xFF	; 255
     e58:	0e c0       	rjmp	.+28     	; 0xe76 <__fixsfsi+0x9c>
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	09 c0       	rjmp	.+18     	; 0xe76 <__fixsfsi+0x9c>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	3f ef       	ldi	r19, 0xFF	; 255
     e68:	4f ef       	ldi	r20, 0xFF	; 255
     e6a:	5f e7       	ldi	r21, 0x7F	; 127
     e6c:	04 c0       	rjmp	.+8      	; 0xe76 <__fixsfsi+0x9c>
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	40 e0       	ldi	r20, 0x00	; 0
     e74:	50 e8       	ldi	r21, 0x80	; 128
     e76:	b9 01       	movw	r22, r18
     e78:	ca 01       	movw	r24, r20
     e7a:	2c 96       	adiw	r28, 0x0c	; 12
     e7c:	e2 e0       	ldi	r30, 0x02	; 2
     e7e:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__epilogue_restores__+0x20>

00000e82 <__clzsi2>:
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	7b 01       	movw	r14, r22
     e8c:	8c 01       	movw	r16, r24
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	e8 16       	cp	r14, r24
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	f8 06       	cpc	r15, r24
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	08 07       	cpc	r16, r24
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	18 07       	cpc	r17, r24
     e9e:	88 f4       	brcc	.+34     	; 0xec2 <__clzsi2+0x40>
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	e8 16       	cp	r14, r24
     ea4:	f1 04       	cpc	r15, r1
     ea6:	01 05       	cpc	r16, r1
     ea8:	11 05       	cpc	r17, r1
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <__clzsi2+0x36>
     eac:	28 f0       	brcs	.+10     	; 0xeb8 <__clzsi2+0x36>
     eae:	88 e0       	ldi	r24, 0x08	; 8
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	17 c0       	rjmp	.+46     	; 0xee6 <__clzsi2+0x64>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	12 c0       	rjmp	.+36     	; 0xee6 <__clzsi2+0x64>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	e8 16       	cp	r14, r24
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	f8 06       	cpc	r15, r24
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	08 07       	cpc	r16, r24
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	18 07       	cpc	r17, r24
     ed2:	28 f0       	brcs	.+10     	; 0xede <__clzsi2+0x5c>
     ed4:	88 e1       	ldi	r24, 0x18	; 24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a0 e0       	ldi	r26, 0x00	; 0
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <__clzsi2+0x64>
     ede:	80 e1       	ldi	r24, 0x10	; 16
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	20 e2       	ldi	r18, 0x20	; 32
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	28 1b       	sub	r18, r24
     ef0:	39 0b       	sbc	r19, r25
     ef2:	4a 0b       	sbc	r20, r26
     ef4:	5b 0b       	sbc	r21, r27
     ef6:	04 c0       	rjmp	.+8      	; 0xf00 <__clzsi2+0x7e>
     ef8:	16 95       	lsr	r17
     efa:	07 95       	ror	r16
     efc:	f7 94       	ror	r15
     efe:	e7 94       	ror	r14
     f00:	8a 95       	dec	r24
     f02:	d2 f7       	brpl	.-12     	; 0xef8 <__clzsi2+0x76>
     f04:	f7 01       	movw	r30, r14
     f06:	e8 59       	subi	r30, 0x98	; 152
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	28 1b       	sub	r18, r24
     f0e:	31 09       	sbc	r19, r1
     f10:	41 09       	sbc	r20, r1
     f12:	51 09       	sbc	r21, r1
     f14:	c9 01       	movw	r24, r18
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	08 95       	ret

00000f20 <__pack_f>:
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	fc 01       	movw	r30, r24
     f2c:	e4 80       	ldd	r14, Z+4	; 0x04
     f2e:	f5 80       	ldd	r15, Z+5	; 0x05
     f30:	06 81       	ldd	r16, Z+6	; 0x06
     f32:	17 81       	ldd	r17, Z+7	; 0x07
     f34:	d1 80       	ldd	r13, Z+1	; 0x01
     f36:	80 81       	ld	r24, Z
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	48 f4       	brcc	.+18     	; 0xf4e <__pack_f+0x2e>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	a0 e1       	ldi	r26, 0x10	; 16
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e8 2a       	or	r14, r24
     f46:	f9 2a       	or	r15, r25
     f48:	0a 2b       	or	r16, r26
     f4a:	1b 2b       	or	r17, r27
     f4c:	a5 c0       	rjmp	.+330    	; 0x1098 <__pack_f+0x178>
     f4e:	84 30       	cpi	r24, 0x04	; 4
     f50:	09 f4       	brne	.+2      	; 0xf54 <__pack_f+0x34>
     f52:	9f c0       	rjmp	.+318    	; 0x1092 <__pack_f+0x172>
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	21 f4       	brne	.+8      	; 0xf60 <__pack_f+0x40>
     f58:	ee 24       	eor	r14, r14
     f5a:	ff 24       	eor	r15, r15
     f5c:	87 01       	movw	r16, r14
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <__pack_f+0x4a>
     f60:	e1 14       	cp	r14, r1
     f62:	f1 04       	cpc	r15, r1
     f64:	01 05       	cpc	r16, r1
     f66:	11 05       	cpc	r17, r1
     f68:	19 f4       	brne	.+6      	; 0xf70 <__pack_f+0x50>
     f6a:	e0 e0       	ldi	r30, 0x00	; 0
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	96 c0       	rjmp	.+300    	; 0x109c <__pack_f+0x17c>
     f70:	62 81       	ldd	r22, Z+2	; 0x02
     f72:	73 81       	ldd	r23, Z+3	; 0x03
     f74:	9f ef       	ldi	r25, 0xFF	; 255
     f76:	62 38       	cpi	r22, 0x82	; 130
     f78:	79 07       	cpc	r23, r25
     f7a:	0c f0       	brlt	.+2      	; 0xf7e <__pack_f+0x5e>
     f7c:	5b c0       	rjmp	.+182    	; 0x1034 <__pack_f+0x114>
     f7e:	22 e8       	ldi	r18, 0x82	; 130
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	26 1b       	sub	r18, r22
     f84:	37 0b       	sbc	r19, r23
     f86:	2a 31       	cpi	r18, 0x1A	; 26
     f88:	31 05       	cpc	r19, r1
     f8a:	2c f0       	brlt	.+10     	; 0xf96 <__pack_f+0x76>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	2a c0       	rjmp	.+84     	; 0xfea <__pack_f+0xca>
     f96:	b8 01       	movw	r22, r16
     f98:	a7 01       	movw	r20, r14
     f9a:	02 2e       	mov	r0, r18
     f9c:	04 c0       	rjmp	.+8      	; 0xfa6 <__pack_f+0x86>
     f9e:	76 95       	lsr	r23
     fa0:	67 95       	ror	r22
     fa2:	57 95       	ror	r21
     fa4:	47 95       	ror	r20
     fa6:	0a 94       	dec	r0
     fa8:	d2 f7       	brpl	.-12     	; 0xf9e <__pack_f+0x7e>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	04 c0       	rjmp	.+8      	; 0xfbc <__pack_f+0x9c>
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	aa 1f       	adc	r26, r26
     fba:	bb 1f       	adc	r27, r27
     fbc:	2a 95       	dec	r18
     fbe:	d2 f7       	brpl	.-12     	; 0xfb4 <__pack_f+0x94>
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	a1 09       	sbc	r26, r1
     fc4:	b1 09       	sbc	r27, r1
     fc6:	8e 21       	and	r24, r14
     fc8:	9f 21       	and	r25, r15
     fca:	a0 23       	and	r26, r16
     fcc:	b1 23       	and	r27, r17
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	a1 05       	cpc	r26, r1
     fd2:	b1 05       	cpc	r27, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <__pack_f+0xbe>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	a0 e0       	ldi	r26, 0x00	; 0
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	9a 01       	movw	r18, r20
     fe0:	ab 01       	movw	r20, r22
     fe2:	28 2b       	or	r18, r24
     fe4:	39 2b       	or	r19, r25
     fe6:	4a 2b       	or	r20, r26
     fe8:	5b 2b       	or	r21, r27
     fea:	da 01       	movw	r26, r20
     fec:	c9 01       	movw	r24, r18
     fee:	8f 77       	andi	r24, 0x7F	; 127
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	a0 70       	andi	r26, 0x00	; 0
     ff4:	b0 70       	andi	r27, 0x00	; 0
     ff6:	80 34       	cpi	r24, 0x40	; 64
     ff8:	91 05       	cpc	r25, r1
     ffa:	a1 05       	cpc	r26, r1
     ffc:	b1 05       	cpc	r27, r1
     ffe:	39 f4       	brne	.+14     	; 0x100e <__pack_f+0xee>
    1000:	27 ff       	sbrs	r18, 7
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <__pack_f+0xf6>
    1004:	20 5c       	subi	r18, 0xC0	; 192
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	4f 4f       	sbci	r20, 0xFF	; 255
    100a:	5f 4f       	sbci	r21, 0xFF	; 255
    100c:	04 c0       	rjmp	.+8      	; 0x1016 <__pack_f+0xf6>
    100e:	21 5c       	subi	r18, 0xC1	; 193
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	4f 4f       	sbci	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	e0 e0       	ldi	r30, 0x00	; 0
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	20 30       	cpi	r18, 0x00	; 0
    101c:	a0 e0       	ldi	r26, 0x00	; 0
    101e:	3a 07       	cpc	r19, r26
    1020:	a0 e0       	ldi	r26, 0x00	; 0
    1022:	4a 07       	cpc	r20, r26
    1024:	a0 e4       	ldi	r26, 0x40	; 64
    1026:	5a 07       	cpc	r21, r26
    1028:	10 f0       	brcs	.+4      	; 0x102e <__pack_f+0x10e>
    102a:	e1 e0       	ldi	r30, 0x01	; 1
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	79 01       	movw	r14, r18
    1030:	8a 01       	movw	r16, r20
    1032:	27 c0       	rjmp	.+78     	; 0x1082 <__pack_f+0x162>
    1034:	60 38       	cpi	r22, 0x80	; 128
    1036:	71 05       	cpc	r23, r1
    1038:	64 f5       	brge	.+88     	; 0x1092 <__pack_f+0x172>
    103a:	fb 01       	movw	r30, r22
    103c:	e1 58       	subi	r30, 0x81	; 129
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	d8 01       	movw	r26, r16
    1042:	c7 01       	movw	r24, r14
    1044:	8f 77       	andi	r24, 0x7F	; 127
    1046:	90 70       	andi	r25, 0x00	; 0
    1048:	a0 70       	andi	r26, 0x00	; 0
    104a:	b0 70       	andi	r27, 0x00	; 0
    104c:	80 34       	cpi	r24, 0x40	; 64
    104e:	91 05       	cpc	r25, r1
    1050:	a1 05       	cpc	r26, r1
    1052:	b1 05       	cpc	r27, r1
    1054:	39 f4       	brne	.+14     	; 0x1064 <__pack_f+0x144>
    1056:	e7 fe       	sbrs	r14, 7
    1058:	0d c0       	rjmp	.+26     	; 0x1074 <__pack_f+0x154>
    105a:	80 e4       	ldi	r24, 0x40	; 64
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a0 e0       	ldi	r26, 0x00	; 0
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	04 c0       	rjmp	.+8      	; 0x106c <__pack_f+0x14c>
    1064:	8f e3       	ldi	r24, 0x3F	; 63
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e8 0e       	add	r14, r24
    106e:	f9 1e       	adc	r15, r25
    1070:	0a 1f       	adc	r16, r26
    1072:	1b 1f       	adc	r17, r27
    1074:	17 ff       	sbrs	r17, 7
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <__pack_f+0x162>
    1078:	16 95       	lsr	r17
    107a:	07 95       	ror	r16
    107c:	f7 94       	ror	r15
    107e:	e7 94       	ror	r14
    1080:	31 96       	adiw	r30, 0x01	; 1
    1082:	87 e0       	ldi	r24, 0x07	; 7
    1084:	16 95       	lsr	r17
    1086:	07 95       	ror	r16
    1088:	f7 94       	ror	r15
    108a:	e7 94       	ror	r14
    108c:	8a 95       	dec	r24
    108e:	d1 f7       	brne	.-12     	; 0x1084 <__pack_f+0x164>
    1090:	05 c0       	rjmp	.+10     	; 0x109c <__pack_f+0x17c>
    1092:	ee 24       	eor	r14, r14
    1094:	ff 24       	eor	r15, r15
    1096:	87 01       	movw	r16, r14
    1098:	ef ef       	ldi	r30, 0xFF	; 255
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	6e 2f       	mov	r22, r30
    109e:	67 95       	ror	r22
    10a0:	66 27       	eor	r22, r22
    10a2:	67 95       	ror	r22
    10a4:	90 2f       	mov	r25, r16
    10a6:	9f 77       	andi	r25, 0x7F	; 127
    10a8:	d7 94       	ror	r13
    10aa:	dd 24       	eor	r13, r13
    10ac:	d7 94       	ror	r13
    10ae:	8e 2f       	mov	r24, r30
    10b0:	86 95       	lsr	r24
    10b2:	49 2f       	mov	r20, r25
    10b4:	46 2b       	or	r20, r22
    10b6:	58 2f       	mov	r21, r24
    10b8:	5d 29       	or	r21, r13
    10ba:	b7 01       	movw	r22, r14
    10bc:	ca 01       	movw	r24, r20
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	ef 90       	pop	r14
    10c6:	df 90       	pop	r13
    10c8:	08 95       	ret

000010ca <__unpack_f>:
    10ca:	fc 01       	movw	r30, r24
    10cc:	db 01       	movw	r26, r22
    10ce:	40 81       	ld	r20, Z
    10d0:	51 81       	ldd	r21, Z+1	; 0x01
    10d2:	22 81       	ldd	r18, Z+2	; 0x02
    10d4:	62 2f       	mov	r22, r18
    10d6:	6f 77       	andi	r22, 0x7F	; 127
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	22 1f       	adc	r18, r18
    10dc:	22 27       	eor	r18, r18
    10de:	22 1f       	adc	r18, r18
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	89 2f       	mov	r24, r25
    10e4:	88 0f       	add	r24, r24
    10e6:	82 2b       	or	r24, r18
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	99 1f       	adc	r25, r25
    10ee:	99 27       	eor	r25, r25
    10f0:	99 1f       	adc	r25, r25
    10f2:	11 96       	adiw	r26, 0x01	; 1
    10f4:	9c 93       	st	X, r25
    10f6:	11 97       	sbiw	r26, 0x01	; 1
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	a9 f5       	brne	.+106    	; 0x1168 <__unpack_f+0x9e>
    10fe:	41 15       	cp	r20, r1
    1100:	51 05       	cpc	r21, r1
    1102:	61 05       	cpc	r22, r1
    1104:	71 05       	cpc	r23, r1
    1106:	11 f4       	brne	.+4      	; 0x110c <__unpack_f+0x42>
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	37 c0       	rjmp	.+110    	; 0x117a <__unpack_f+0xb0>
    110c:	82 e8       	ldi	r24, 0x82	; 130
    110e:	9f ef       	ldi	r25, 0xFF	; 255
    1110:	13 96       	adiw	r26, 0x03	; 3
    1112:	9c 93       	st	X, r25
    1114:	8e 93       	st	-X, r24
    1116:	12 97       	sbiw	r26, 0x02	; 2
    1118:	9a 01       	movw	r18, r20
    111a:	ab 01       	movw	r20, r22
    111c:	67 e0       	ldi	r22, 0x07	; 7
    111e:	22 0f       	add	r18, r18
    1120:	33 1f       	adc	r19, r19
    1122:	44 1f       	adc	r20, r20
    1124:	55 1f       	adc	r21, r21
    1126:	6a 95       	dec	r22
    1128:	d1 f7       	brne	.-12     	; 0x111e <__unpack_f+0x54>
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	8c 93       	st	X, r24
    112e:	0d c0       	rjmp	.+26     	; 0x114a <__unpack_f+0x80>
    1130:	22 0f       	add	r18, r18
    1132:	33 1f       	adc	r19, r19
    1134:	44 1f       	adc	r20, r20
    1136:	55 1f       	adc	r21, r21
    1138:	12 96       	adiw	r26, 0x02	; 2
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	13 97       	sbiw	r26, 0x03	; 3
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	13 96       	adiw	r26, 0x03	; 3
    1144:	9c 93       	st	X, r25
    1146:	8e 93       	st	-X, r24
    1148:	12 97       	sbiw	r26, 0x02	; 2
    114a:	20 30       	cpi	r18, 0x00	; 0
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	38 07       	cpc	r19, r24
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	48 07       	cpc	r20, r24
    1154:	80 e4       	ldi	r24, 0x40	; 64
    1156:	58 07       	cpc	r21, r24
    1158:	58 f3       	brcs	.-42     	; 0x1130 <__unpack_f+0x66>
    115a:	14 96       	adiw	r26, 0x04	; 4
    115c:	2d 93       	st	X+, r18
    115e:	3d 93       	st	X+, r19
    1160:	4d 93       	st	X+, r20
    1162:	5c 93       	st	X, r21
    1164:	17 97       	sbiw	r26, 0x07	; 7
    1166:	08 95       	ret
    1168:	2f 3f       	cpi	r18, 0xFF	; 255
    116a:	31 05       	cpc	r19, r1
    116c:	79 f4       	brne	.+30     	; 0x118c <__unpack_f+0xc2>
    116e:	41 15       	cp	r20, r1
    1170:	51 05       	cpc	r21, r1
    1172:	61 05       	cpc	r22, r1
    1174:	71 05       	cpc	r23, r1
    1176:	19 f4       	brne	.+6      	; 0x117e <__unpack_f+0xb4>
    1178:	84 e0       	ldi	r24, 0x04	; 4
    117a:	8c 93       	st	X, r24
    117c:	08 95       	ret
    117e:	64 ff       	sbrs	r22, 4
    1180:	03 c0       	rjmp	.+6      	; 0x1188 <__unpack_f+0xbe>
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	8c 93       	st	X, r24
    1186:	12 c0       	rjmp	.+36     	; 0x11ac <__unpack_f+0xe2>
    1188:	1c 92       	st	X, r1
    118a:	10 c0       	rjmp	.+32     	; 0x11ac <__unpack_f+0xe2>
    118c:	2f 57       	subi	r18, 0x7F	; 127
    118e:	30 40       	sbci	r19, 0x00	; 0
    1190:	13 96       	adiw	r26, 0x03	; 3
    1192:	3c 93       	st	X, r19
    1194:	2e 93       	st	-X, r18
    1196:	12 97       	sbiw	r26, 0x02	; 2
    1198:	83 e0       	ldi	r24, 0x03	; 3
    119a:	8c 93       	st	X, r24
    119c:	87 e0       	ldi	r24, 0x07	; 7
    119e:	44 0f       	add	r20, r20
    11a0:	55 1f       	adc	r21, r21
    11a2:	66 1f       	adc	r22, r22
    11a4:	77 1f       	adc	r23, r23
    11a6:	8a 95       	dec	r24
    11a8:	d1 f7       	brne	.-12     	; 0x119e <__unpack_f+0xd4>
    11aa:	70 64       	ori	r23, 0x40	; 64
    11ac:	14 96       	adiw	r26, 0x04	; 4
    11ae:	4d 93       	st	X+, r20
    11b0:	5d 93       	st	X+, r21
    11b2:	6d 93       	st	X+, r22
    11b4:	7c 93       	st	X, r23
    11b6:	17 97       	sbiw	r26, 0x07	; 7
    11b8:	08 95       	ret

000011ba <__fpcmp_parts_f>:
    11ba:	1f 93       	push	r17
    11bc:	dc 01       	movw	r26, r24
    11be:	fb 01       	movw	r30, r22
    11c0:	9c 91       	ld	r25, X
    11c2:	92 30       	cpi	r25, 0x02	; 2
    11c4:	08 f4       	brcc	.+2      	; 0x11c8 <__fpcmp_parts_f+0xe>
    11c6:	47 c0       	rjmp	.+142    	; 0x1256 <__fpcmp_parts_f+0x9c>
    11c8:	80 81       	ld	r24, Z
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	08 f4       	brcc	.+2      	; 0x11d0 <__fpcmp_parts_f+0x16>
    11ce:	43 c0       	rjmp	.+134    	; 0x1256 <__fpcmp_parts_f+0x9c>
    11d0:	94 30       	cpi	r25, 0x04	; 4
    11d2:	51 f4       	brne	.+20     	; 0x11e8 <__fpcmp_parts_f+0x2e>
    11d4:	11 96       	adiw	r26, 0x01	; 1
    11d6:	1c 91       	ld	r17, X
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	99 f5       	brne	.+102    	; 0x1242 <__fpcmp_parts_f+0x88>
    11dc:	81 81       	ldd	r24, Z+1	; 0x01
    11de:	68 2f       	mov	r22, r24
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	61 1b       	sub	r22, r17
    11e4:	71 09       	sbc	r23, r1
    11e6:	3f c0       	rjmp	.+126    	; 0x1266 <__fpcmp_parts_f+0xac>
    11e8:	84 30       	cpi	r24, 0x04	; 4
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <__fpcmp_parts_f+0x3a>
    11ec:	92 30       	cpi	r25, 0x02	; 2
    11ee:	31 f4       	brne	.+12     	; 0x11fc <__fpcmp_parts_f+0x42>
    11f0:	82 30       	cpi	r24, 0x02	; 2
    11f2:	b9 f1       	breq	.+110    	; 0x1262 <__fpcmp_parts_f+0xa8>
    11f4:	81 81       	ldd	r24, Z+1	; 0x01
    11f6:	88 23       	and	r24, r24
    11f8:	89 f1       	breq	.+98     	; 0x125c <__fpcmp_parts_f+0xa2>
    11fa:	2d c0       	rjmp	.+90     	; 0x1256 <__fpcmp_parts_f+0x9c>
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	1c 91       	ld	r17, X
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	82 30       	cpi	r24, 0x02	; 2
    1204:	f1 f0       	breq	.+60     	; 0x1242 <__fpcmp_parts_f+0x88>
    1206:	81 81       	ldd	r24, Z+1	; 0x01
    1208:	18 17       	cp	r17, r24
    120a:	d9 f4       	brne	.+54     	; 0x1242 <__fpcmp_parts_f+0x88>
    120c:	12 96       	adiw	r26, 0x02	; 2
    120e:	2d 91       	ld	r18, X+
    1210:	3c 91       	ld	r19, X
    1212:	13 97       	sbiw	r26, 0x03	; 3
    1214:	82 81       	ldd	r24, Z+2	; 0x02
    1216:	93 81       	ldd	r25, Z+3	; 0x03
    1218:	82 17       	cp	r24, r18
    121a:	93 07       	cpc	r25, r19
    121c:	94 f0       	brlt	.+36     	; 0x1242 <__fpcmp_parts_f+0x88>
    121e:	28 17       	cp	r18, r24
    1220:	39 07       	cpc	r19, r25
    1222:	bc f0       	brlt	.+46     	; 0x1252 <__fpcmp_parts_f+0x98>
    1224:	14 96       	adiw	r26, 0x04	; 4
    1226:	8d 91       	ld	r24, X+
    1228:	9d 91       	ld	r25, X+
    122a:	0d 90       	ld	r0, X+
    122c:	bc 91       	ld	r27, X
    122e:	a0 2d       	mov	r26, r0
    1230:	24 81       	ldd	r18, Z+4	; 0x04
    1232:	35 81       	ldd	r19, Z+5	; 0x05
    1234:	46 81       	ldd	r20, Z+6	; 0x06
    1236:	57 81       	ldd	r21, Z+7	; 0x07
    1238:	28 17       	cp	r18, r24
    123a:	39 07       	cpc	r19, r25
    123c:	4a 07       	cpc	r20, r26
    123e:	5b 07       	cpc	r21, r27
    1240:	18 f4       	brcc	.+6      	; 0x1248 <__fpcmp_parts_f+0x8e>
    1242:	11 23       	and	r17, r17
    1244:	41 f0       	breq	.+16     	; 0x1256 <__fpcmp_parts_f+0x9c>
    1246:	0a c0       	rjmp	.+20     	; 0x125c <__fpcmp_parts_f+0xa2>
    1248:	82 17       	cp	r24, r18
    124a:	93 07       	cpc	r25, r19
    124c:	a4 07       	cpc	r26, r20
    124e:	b5 07       	cpc	r27, r21
    1250:	40 f4       	brcc	.+16     	; 0x1262 <__fpcmp_parts_f+0xa8>
    1252:	11 23       	and	r17, r17
    1254:	19 f0       	breq	.+6      	; 0x125c <__fpcmp_parts_f+0xa2>
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	70 e0       	ldi	r23, 0x00	; 0
    125a:	05 c0       	rjmp	.+10     	; 0x1266 <__fpcmp_parts_f+0xac>
    125c:	6f ef       	ldi	r22, 0xFF	; 255
    125e:	7f ef       	ldi	r23, 0xFF	; 255
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <__fpcmp_parts_f+0xac>
    1262:	60 e0       	ldi	r22, 0x00	; 0
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	cb 01       	movw	r24, r22
    1268:	1f 91       	pop	r17
    126a:	08 95       	ret

0000126c <__prologue_saves__>:
    126c:	2f 92       	push	r2
    126e:	3f 92       	push	r3
    1270:	4f 92       	push	r4
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	cf 92       	push	r12
    1282:	df 92       	push	r13
    1284:	ef 92       	push	r14
    1286:	ff 92       	push	r15
    1288:	0f 93       	push	r16
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	ca 1b       	sub	r28, r26
    1296:	db 0b       	sbc	r29, r27
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	09 94       	ijmp

000012a4 <__epilogue_restores__>:
    12a4:	2a 88       	ldd	r2, Y+18	; 0x12
    12a6:	39 88       	ldd	r3, Y+17	; 0x11
    12a8:	48 88       	ldd	r4, Y+16	; 0x10
    12aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    12ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    12ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    12b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    12b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    12b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    12b6:	b9 84       	ldd	r11, Y+9	; 0x09
    12b8:	c8 84       	ldd	r12, Y+8	; 0x08
    12ba:	df 80       	ldd	r13, Y+7	; 0x07
    12bc:	ee 80       	ldd	r14, Y+6	; 0x06
    12be:	fd 80       	ldd	r15, Y+5	; 0x05
    12c0:	0c 81       	ldd	r16, Y+4	; 0x04
    12c2:	1b 81       	ldd	r17, Y+3	; 0x03
    12c4:	aa 81       	ldd	r26, Y+2	; 0x02
    12c6:	b9 81       	ldd	r27, Y+1	; 0x01
    12c8:	ce 0f       	add	r28, r30
    12ca:	d1 1d       	adc	r29, r1
    12cc:	0f b6       	in	r0, 0x3f	; 63
    12ce:	f8 94       	cli
    12d0:	de bf       	out	0x3e, r29	; 62
    12d2:	0f be       	out	0x3f, r0	; 63
    12d4:	cd bf       	out	0x3d, r28	; 61
    12d6:	ed 01       	movw	r28, r26
    12d8:	08 95       	ret

000012da <_exit>:
    12da:	f8 94       	cli

000012dc <__stop_program>:
    12dc:	ff cf       	rjmp	.-2      	; 0x12dc <__stop_program>
