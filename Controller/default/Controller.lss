
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003e  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000012b  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a0  00000000  00000000  00000299  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000166  00000000  00000000  00000339  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000095  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<io.h>
#include<util/delay.h>


int main(void){
    DDRB = 0xFF;  //Set outputs
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  70:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  72:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  74:	87 e0       	ldi	r24, 0x07	; 7
  76:	8b bb       	out	0x1b, r24	; 27
		}
    }
}

void record(){
	PORTB = 0x01; 
  78:	51 e0       	ldi	r21, 0x01	; 1
}

void playBack(){
	PORTB = 0x02;
  7a:	42 e0       	ldi	r20, 0x02	; 2
}

void modify(){
	PORTB = 0x04;
  7c:	34 e0       	ldi	r19, 0x04	; 4
    DDRB = 0xFF;  //Set outputs
	DDRA = 0x00;  //Set inputs
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
    while(1){
		uint8_t rec = PINA & 0x04;
  7e:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
  80:	99 b3       	in	r25, 0x19	; 25
  82:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
  84:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
  86:	82 ff       	sbrs	r24, 2
  88:	04 c0       	rjmp	.+8      	; 0x92 <main+0x26>
  8a:	99 23       	and	r25, r25
  8c:	51 f4       	brne	.+20     	; 0xa2 <main+0x36>
		}
    }
}

void record(){
	PORTB = 0x01; 
  8e:	58 bb       	out	0x18, r21	; 24
  90:	f6 cf       	rjmp	.-20     	; 0x7e <main+0x12>
		uint8_t play = PINA & 0x02;
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		} else if (play && !rec){
  92:	99 23       	and	r25, r25
  94:	31 f0       	breq	.+12     	; 0xa2 <main+0x36>
			if (mod){ // Modify Mode
  96:	20 ff       	sbrs	r18, 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <main+0x32>
void playBack(){
	PORTB = 0x02;
}

void modify(){
	PORTB = 0x04;
  9a:	38 bb       	out	0x18, r19	; 24
  9c:	f0 cf       	rjmp	.-32     	; 0x7e <main+0x12>
void record(){
	PORTB = 0x01; 
}

void playBack(){
	PORTB = 0x02;
  9e:	48 bb       	out	0x18, r20	; 24
  a0:	ee cf       	rjmp	.-36     	; 0x7e <main+0x12>
		}
	
	 
		else // if all off, leds are off
		{
		PORTB = 0x00;
  a2:	18 ba       	out	0x18, r1	; 24
  a4:	ec cf       	rjmp	.-40     	; 0x7e <main+0x12>

000000a6 <record>:
		}
    }
}

void record(){
	PORTB = 0x01; 
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	88 bb       	out	0x18, r24	; 24
}
  aa:	08 95       	ret

000000ac <playBack>:

void playBack(){
	PORTB = 0x02;
  ac:	82 e0       	ldi	r24, 0x02	; 2
  ae:	88 bb       	out	0x18, r24	; 24
}
  b0:	08 95       	ret

000000b2 <modify>:

void modify(){
	PORTB = 0x04;
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	88 bb       	out	0x18, r24	; 24
}
  b6:	08 95       	ret

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
