
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001050  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00001050  000010e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800170  00800170  000011f4  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003dc  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000267c  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013fd  00000000  00000000  00003dec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001713  00000000  00000000  000051e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  000068fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000516  00000000  00000000  00006c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a32  00000000  00000000  00007152  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00007b84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 01 	call	0x244	; 0x244 <main>
      8a:	0c 94 26 08 	jmp	0x104c	; 0x104c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setupMIDI>:
}

/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      96:	88 e1       	ldi	r24, 0x18	; 24
      98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (0 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9a:	86 e0       	ldi	r24, 0x06	; 6
      9c:	80 bd       	out	0x20, r24	; 32
}
      9e:	08 95       	ret

000000a0 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a0:	8f ef       	ldi	r24, 0xFF	; 255
      a2:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a4:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      a6:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      a8:	87 e0       	ldi	r24, 0x07	; 7
      aa:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      ac:	11 ba       	out	0x11, r1	; 17
}
      ae:	08 95       	ret

000000b0 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b0:	87 e4       	ldi	r24, 0x47	; 71
      b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b4:	87 e8       	ldi	r24, 0x87	; 135
      b6:	86 b9       	out	0x06, r24	; 6
}
      b8:	08 95       	ret

000000ba <setupTimer>:
void setupTimer(){
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      ba:	85 e0       	ldi	r24, 0x05	; 5
      bc:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 1953; // 500ms delay  equation = (500*10^-3/(1/3906.25));
      be:	81 ea       	ldi	r24, 0xA1	; 161
      c0:	97 e0       	ldi	r25, 0x07	; 7
      c2:	9b bd       	out	0x2b, r25	; 43
      c4:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
      c6:	1d bc       	out	0x2d, r1	; 45
      c8:	1c bc       	out	0x2c, r1	; 44
}
      ca:	08 95       	ret

000000cc <playBack>:
	//midi_Receive();
	//timer500();
}

void playBack(){
	PORTB = 0x02;
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	88 bb       	out	0x18, r24	; 24
}
      d0:	08 95       	ret

000000d2 <midiReceiveTest>:
void modify(){
	analogLEDTest();
}

void midiReceiveTest(){
	while((TIFR & (1<<OCF1A)) == 0); // wait for timer overflow flag
      d2:	08 b6       	in	r0, 0x38	; 56
      d4:	04 fe       	sbrs	r0, 4
      d6:	fd cf       	rjmp	.-6      	; 0xd2 <midiReceiveTest>
	UDR =  data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
      d8:	5f 9b       	sbis	0x0b, 7	; 11
      da:	fe cf       	rjmp	.-4      	; 0xd8 <midiReceiveTest+0x6>

	/* get and return data from buffer */
	return UDR;
      dc:	8c b1       	in	r24, 0x0c	; 12
	analogLEDTest();
}

void midiReceiveTest(){
	while((TIFR & (1<<OCF1A)) == 0); // wait for timer overflow flag
	if((midi_Receive()) != 0 ) {
      de:	88 23       	and	r24, r24
      e0:	21 f0       	breq	.+8      	; 0xea <midiReceiveTest+0x18>
	UDR =  data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
      e2:	5f 9b       	sbis	0x0b, 7	; 11
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <midiReceiveTest+0x10>

	/* get and return data from buffer */
	return UDR;
      e6:	8c b1       	in	r24, 0x0c	; 12

void midiReceiveTest(){
	while((TIFR & (1<<OCF1A)) == 0); // wait for timer overflow flag
	if((midi_Receive()) != 0 ) {
		//did I recieve a message? do something!
		PORTB = midi_Receive();	
      e8:	88 bb       	out	0x18, r24	; 24
	}
	TCNT1 = 0;
      ea:	1d bc       	out	0x2d, r1	; 45
      ec:	1c bc       	out	0x2c, r1	; 44
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag
      ee:	88 b7       	in	r24, 0x38	; 56
      f0:	80 61       	ori	r24, 0x10	; 16
      f2:	88 bf       	out	0x38, r24	; 56
}
      f4:	08 95       	ret

000000f6 <record>:


void record(){
	 
    //PORTB = 0x01;
   midiReceiveTest();
      f6:	0e 94 69 00 	call	0xd2	; 0xd2 <midiReceiveTest>
	//midiTransitTest();
	//midi_Receive();
	//timer500();
}
      fa:	08 95       	ret

000000fc <wait>:
	midi_Transmit(MIDIoff);
}


void wait(int time)
{
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
   _delay_ms(time);
     10c:	aa 27       	eor	r26, r26
     10e:	97 fd       	sbrc	r25, 7
     110:	a0 95       	com	r26
     112:	ba 2f       	mov	r27, r26
     114:	bc 01       	movw	r22, r24
     116:	cd 01       	movw	r24, r26
     118:	0e 94 48 05 	call	0xa90	; 0xa90 <__floatsisf>
     11c:	5b 01       	movw	r10, r22
     11e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	4a e7       	ldi	r20, 0x7A	; 122
     126:	53 e4       	ldi	r21, 0x43	; 67
     128:	0e 94 be 03 	call	0x77c	; 0x77c <__mulsf3>
     12c:	7b 01       	movw	r14, r22
     12e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	40 e8       	ldi	r20, 0x80	; 128
     136:	5f e3       	ldi	r21, 0x3F	; 63
     138:	0e 94 18 05 	call	0xa30	; 0xa30 <__ltsf2>
     13c:	88 23       	and	r24, r24
     13e:	1c f4       	brge	.+6      	; 0x146 <wait+0x4a>
     140:	61 e0       	ldi	r22, 0x01	; 1
     142:	70 e0       	ldi	r23, 0x00	; 0
     144:	24 c0       	rjmp	.+72     	; 0x18e <wait+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     146:	c8 01       	movw	r24, r16
     148:	b7 01       	movw	r22, r14
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	3f ef       	ldi	r19, 0xFF	; 255
     14e:	4f e7       	ldi	r20, 0x7F	; 127
     150:	57 e4       	ldi	r21, 0x47	; 71
     152:	0e 94 b8 04 	call	0x970	; 0x970 <__gtsf2>
     156:	18 16       	cp	r1, r24
     158:	b4 f4       	brge	.+44     	; 0x186 <wait+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     15a:	c6 01       	movw	r24, r12
     15c:	b5 01       	movw	r22, r10
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	40 e2       	ldi	r20, 0x20	; 32
     164:	51 e4       	ldi	r21, 0x41	; 65
     166:	0e 94 be 03 	call	0x77c	; 0x77c <__mulsf3>
     16a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     16e:	89 e1       	ldi	r24, 0x19	; 25
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	05 c0       	rjmp	.+10     	; 0x17e <wait+0x82>
     174:	fc 01       	movw	r30, r24
     176:	31 97       	sbiw	r30, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <wait+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     17a:	61 50       	subi	r22, 0x01	; 1
     17c:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     17e:	61 15       	cp	r22, r1
     180:	71 05       	cpc	r23, r1
     182:	c1 f7       	brne	.-16     	; 0x174 <wait+0x78>
     184:	07 c0       	rjmp	.+14     	; 0x194 <wait+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     186:	c8 01       	movw	r24, r16
     188:	b7 01       	movw	r22, r14
     18a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <__fixunssfsi>
     18e:	cb 01       	movw	r24, r22
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <wait+0x94>
}
     194:	1f 91       	pop	r17
     196:	0f 91       	pop	r16
     198:	ff 90       	pop	r15
     19a:	ef 90       	pop	r14
     19c:	df 90       	pop	r13
     19e:	cf 90       	pop	r12
     1a0:	bf 90       	pop	r11
     1a2:	af 90       	pop	r10
     1a4:	08 95       	ret

000001a6 <ledOFF>:

void ledOFF(){
	PORTB = 0x00;
     1a6:	18 ba       	out	0x18, r1	; 24
}
     1a8:	08 95       	ret

000001aa <timer500>:


void timer500(){
	while((TIFR & (1<<OCF1A)) == 0); // wait for timer overflow flag
     1aa:	08 b6       	in	r0, 0x38	; 56
     1ac:	04 fe       	sbrs	r0, 4
     1ae:	fd cf       	rjmp	.-6      	; 0x1aa <timer500>
	PORTB ^= (1 << PORTB0);
     1b0:	88 b3       	in	r24, 0x18	; 24
     1b2:	91 e0       	ldi	r25, 0x01	; 1
     1b4:	89 27       	eor	r24, r25
     1b6:	88 bb       	out	0x18, r24	; 24
	TCNT1 = 0;
     1b8:	1d bc       	out	0x2d, r1	; 45
     1ba:	1c bc       	out	0x2c, r1	; 44
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag
     1bc:	88 b7       	in	r24, 0x38	; 56
     1be:	80 61       	ori	r24, 0x10	; 16
     1c0:	88 bf       	out	0x38, r24	; 56
}
     1c2:	08 95       	ret

000001c4 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
     1c4:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
     1c6:	34 9b       	sbis	0x06, 4	; 6
     1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
     1ca:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
     1cc:	24 b1       	in	r18, 0x04	; 4
     1ce:	35 b1       	in	r19, 0x05	; 5
}
     1d0:	c9 01       	movw	r24, r18
     1d2:	08 95       	ret

000001d4 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
     1d4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <ReadADC>
     1d8:	9c 01       	movw	r18, r24
     1da:	90 93 7b 01 	sts	0x017B, r25
     1de:	80 93 7a 01 	sts	0x017A, r24
		if (adc_value > 30){
     1e2:	8f 31       	cpi	r24, 0x1F	; 31
     1e4:	91 05       	cpc	r25, r1
     1e6:	28 f1       	brcs	.+74     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     1ec:	2d 33       	cpi	r18, 0x3D	; 61
     1ee:	31 05       	cpc	r19, r1
     1f0:	00 f1       	brcs	.+64     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     1f2:	82 e0       	ldi	r24, 0x02	; 2
     1f4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     1f6:	2b 35       	cpi	r18, 0x5B	; 91
     1f8:	31 05       	cpc	r19, r1
     1fa:	d8 f0       	brcs	.+54     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     1fc:	84 e0       	ldi	r24, 0x04	; 4
     1fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     200:	29 37       	cpi	r18, 0x79	; 121
     202:	31 05       	cpc	r19, r1
     204:	b0 f0       	brcs	.+44     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     206:	88 e0       	ldi	r24, 0x08	; 8
     208:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     20a:	27 39       	cpi	r18, 0x97	; 151
     20c:	31 05       	cpc	r19, r1
     20e:	88 f0       	brcs	.+34     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     210:	80 e1       	ldi	r24, 0x10	; 16
     212:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     214:	25 3b       	cpi	r18, 0xB5	; 181
     216:	31 05       	cpc	r19, r1
     218:	60 f0       	brcs	.+24     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     21e:	23 3d       	cpi	r18, 0xD3	; 211
     220:	31 05       	cpc	r19, r1
     222:	38 f0       	brcs	.+14     	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     224:	80 e4       	ldi	r24, 0x40	; 64
     226:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     228:	21 3f       	cpi	r18, 0xF1	; 241
     22a:	31 05       	cpc	r19, r1
     22c:	10 f0       	brcs	.+4      	; 0x232 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     232:	20 3f       	cpi	r18, 0xF0	; 240
     234:	31 05       	cpc	r19, r1
     236:	10 f0       	brcs	.+4      	; 0x23c <analogLEDTest+0x68>
			PORTB = 0xFF;
     238:	8f ef       	ldi	r24, 0xFF	; 255
     23a:	88 bb       	out	0x18, r24	; 24
     23c:	08 95       	ret

0000023e <modify>:
void playBack(){
	PORTB = 0x02;
}

void modify(){
	analogLEDTest();
     23e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <analogLEDTest>
}
     242:	08 95       	ret

00000244 <main>:




/***** Main Loop *****/
int main(void){
     244:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (0 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     246:	8f ef       	ldi	r24, 0xFF	; 255
     248:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     24a:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     24c:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     24e:	27 e0       	ldi	r18, 0x07	; 7
     250:	2b bb       	out	0x1b, r18	; 27
	DDRD = 0x00;
     252:	11 ba       	out	0x11, r1	; 17
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
}
void setupTimer(){
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
     254:	85 e0       	ldi	r24, 0x05	; 5
     256:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 1953; // 500ms delay  equation = (500*10^-3/(1/3906.25));
     258:	81 ea       	ldi	r24, 0xA1	; 161
     25a:	97 e0       	ldi	r25, 0x07	; 7
     25c:	9b bd       	out	0x2b, r25	; 43
     25e:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;
     260:	1d bc       	out	0x2d, r1	; 45
     262:	1c bc       	out	0x2c, r1	; 44
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     264:	87 e4       	ldi	r24, 0x47	; 71
     266:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     268:	87 e8       	ldi	r24, 0x87	; 135
     26a:	86 b9       	out	0x06, r24	; 6
}

/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     26c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     26e:	29 b9       	out	0x09, r18	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     270:	88 e1       	ldi	r24, 0x18	; 24
     272:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (0 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     274:	86 e0       	ldi	r24, 0x06	; 6
     276:	80 bd       	out	0x20, r24	; 32
	//midi_Receive();
	//timer500();
}

void playBack(){
	PORTB = 0x02;
     278:	12 e0       	ldi	r17, 0x02	; 2
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     27a:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
     27c:	99 b3       	in	r25, 0x19	; 25
     27e:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
     280:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
     282:	82 ff       	sbrs	r24, 2
     284:	05 c0       	rjmp	.+10     	; 0x290 <main+0x4c>
     286:	99 23       	and	r25, r25
     288:	61 f4       	brne	.+24     	; 0x2a2 <main+0x5e>


void record(){
	 
    //PORTB = 0x01;
   midiReceiveTest();
     28a:	0e 94 69 00 	call	0xd2	; 0xd2 <midiReceiveTest>
     28e:	f5 cf       	rjmp	.-22     	; 0x27a <main+0x36>
		uint8_t play = PINA & 0x02;
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		} else if (play && !rec){
     290:	99 23       	and	r25, r25
     292:	39 f0       	breq	.+14     	; 0x2a2 <main+0x5e>
			if (mod){ // Modify Mode
     294:	20 ff       	sbrs	r18, 0
     296:	03 c0       	rjmp	.+6      	; 0x29e <main+0x5a>
void playBack(){
	PORTB = 0x02;
}

void modify(){
	analogLEDTest();
     298:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <analogLEDTest>
     29c:	ee cf       	rjmp	.-36     	; 0x27a <main+0x36>
	//midi_Receive();
	//timer500();
}

void playBack(){
	PORTB = 0x02;
     29e:	18 bb       	out	0x18, r17	; 24
     2a0:	ec cf       	rjmp	.-40     	; 0x27a <main+0x36>
{
   _delay_ms(time);
}

void ledOFF(){
	PORTB = 0x00;
     2a2:	18 ba       	out	0x18, r1	; 24
     2a4:	ea cf       	rjmp	.-44     	; 0x27a <main+0x36>

000002a6 <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(! UCSRA & (1 << UDRE) );
     2a6:	9b b1       	in	r25, 0x0b	; 11

	/* Put data into buffer, sends the data */
	UDR =  data;
     2a8:	8c b9       	out	0x0c, r24	; 12
}
     2aa:	08 95       	ret

000002ac <midiTransitTest>:
	_delay_ms(300);	
	}
	
}
void midiTransitTest(){
	while ((UCSRA & (1 << UDRE)) == 0) {};
     2ac:	5d 9b       	sbis	0x0b, 5	; 11
     2ae:	fe cf       	rjmp	.-4      	; 0x2ac <midiTransitTest>

	midi_Transmit(MIDIon);
     2b0:	80 91 60 00 	lds	r24, 0x0060
     2b4:	90 91 61 00 	lds	r25, 0x0061
     2b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <midi_Transmit>
	midi_Transmit(MIDIb1);
     2bc:	80 91 62 00 	lds	r24, 0x0062
     2c0:	90 91 63 00 	lds	r25, 0x0063
     2c4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <midi_Transmit>
	midi_Transmit(MIDIb2);
     2c8:	80 91 64 00 	lds	r24, 0x0064
     2cc:	90 91 65 00 	lds	r25, 0x0065
     2d0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <midi_Transmit>
	midi_Transmit(MIDIoff);
     2d4:	80 91 66 00 	lds	r24, 0x0066
     2d8:	90 91 67 00 	lds	r25, 0x0067
     2dc:	0e 94 53 01 	call	0x2a6	; 0x2a6 <midi_Transmit>
}
     2e0:	08 95       	ret

000002e2 <playSong>:
		eeprom_address= eeprom_address + 1;
		notecount= notecount + 1;
	}
}

void playSong(){
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
	eeprom_address= 0x00;
     2e6:	10 92 79 01 	sts	0x0179, r1
     2ea:	10 92 78 01 	sts	0x0178, r1
     2ee:	c9 e1       	ldi	r28, 0x19	; 25
     2f0:	d0 e0       	ldi	r29, 0x00	; 0
     2f2:	10 c0       	rjmp	.+32     	; 0x314 <playSong+0x32>
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     2f4:	e1 99       	sbic	0x1c, 1	; 28
     2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <playSong+0x12>
	/* Set up address register */
	EEAR = uiAddress;
     2f8:	3f bb       	out	0x1f, r19	; 31
     2fa:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     2fc:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     2fe:	8d b3       	in	r24, 0x1d	; 29
}

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < notecount){
	midi_Transmit(EEPROM_read(eeprom_address));
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 53 01 	call	0x2a6	; 0x2a6 <midi_Transmit>
     306:	88 eb       	ldi	r24, 0xB8	; 184
     308:	9b e0       	ldi	r25, 0x0B	; 11
     30a:	fe 01       	movw	r30, r28
     30c:	31 97       	sbiw	r30, 0x01	; 1
     30e:	f1 f7       	brne	.-4      	; 0x30c <playSong+0x2a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     310:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     312:	d9 f7       	brne	.-10     	; 0x30a <playSong+0x28>
	}
}

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < notecount){
     314:	20 91 78 01 	lds	r18, 0x0178
     318:	30 91 79 01 	lds	r19, 0x0179
     31c:	80 91 76 01 	lds	r24, 0x0176
     320:	90 91 77 01 	lds	r25, 0x0177
     324:	28 17       	cp	r18, r24
     326:	39 07       	cpc	r19, r25
     328:	28 f3       	brcs	.-54     	; 0x2f4 <playSong+0x12>
	midi_Transmit(EEPROM_read(eeprom_address));
	_delay_ms(300);	
	}
	
}
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	08 95       	ret

00000330 <midi_Receive>:
	UDR =  data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     330:	5f 9b       	sbis	0x0b, 7	; 11
     332:	fe cf       	rjmp	.-4      	; 0x330 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     334:	8c b1       	in	r24, 0x0c	; 12
}
     336:	08 95       	ret

00000338 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     338:	01 c0       	rjmp	.+2      	; 0x33c <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     33a:	8c b1       	in	r24, 0x0c	; 12
     33c:	5f 99       	sbic	0x0b, 7	; 11
     33e:	fd cf       	rjmp	.-6      	; 0x33a <midi_Flush+0x2>
}
     340:	08 95       	ret

00000342 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     342:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     344:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     346:	08 95       	ret

00000348 <TIM16_ReadTCNT1>:

unsigned int TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     348:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     34a:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     34c:	8c b5       	in	r24, 0x2c	; 44
     34e:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     350:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	08 95       	ret

00000356 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     356:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     358:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     35a:	9d bd       	out	0x2d, r25	; 45
     35c:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     35e:	2f bf       	out	0x3f, r18	; 63
}
     360:	08 95       	ret

00000362 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     362:	e1 99       	sbic	0x1c, 1	; 28
     364:	fe cf       	rjmp	.-4      	; 0x362 <EEPROM_write>

	/* Set up address and data registers */
	EEAR = uiAddress;
     366:	9f bb       	out	0x1f, r25	; 31
     368:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     36a:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     36c:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     36e:	e1 9a       	sbi	0x1c, 1	; 28
}
     370:	08 95       	ret

00000372 <writeSong>:
	TCNT1 = 0;
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag
}

void writeSong(){
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag
     372:	88 b7       	in	r24, 0x38	; 56
     374:	80 61       	ori	r24, 0x10	; 16
     376:	88 bf       	out	0x38, r24	; 56
	UDR =  data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     378:	5f 9b       	sbis	0x0b, 7	; 11
     37a:	fe cf       	rjmp	.-4      	; 0x378 <writeSong+0x6>

	/* get and return data from buffer */
	return UDR;
     37c:	8c b1       	in	r24, 0x0c	; 12

void writeSong(){
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag


	if((midi_Receive()) != 0 ) {
     37e:	88 23       	and	r24, r24
     380:	f9 f0       	breq	.+62     	; 0x3c0 <writeSong+0x4e>
		EEPROM_write(eeprom_address, midi_Receive());
     382:	80 91 78 01 	lds	r24, 0x0178
     386:	90 91 79 01 	lds	r25, 0x0179
	UDR =  data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     38a:	5f 9b       	sbis	0x0b, 7	; 11
     38c:	fe cf       	rjmp	.-4      	; 0x38a <writeSong+0x18>

	/* get and return data from buffer */
	return UDR;
     38e:	6c b1       	in	r22, 0x0c	; 12
void writeSong(){
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag


	if((midi_Receive()) != 0 ) {
		EEPROM_write(eeprom_address, midi_Receive());
     390:	0e 94 b1 01 	call	0x362	; 0x362 <EEPROM_write>
	UDR =  data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     394:	5f 9b       	sbis	0x0b, 7	; 11
     396:	fe cf       	rjmp	.-4      	; 0x394 <writeSong+0x22>

	/* get and return data from buffer */
	return UDR;
     398:	8c b1       	in	r24, 0x0c	; 12
	TIFR |= (1<< OCF1A); //reset timer1 overflow flag


	if((midi_Receive()) != 0 ) {
		EEPROM_write(eeprom_address, midi_Receive());
		PORTB = midi_Receive();	
     39a:	88 bb       	out	0x18, r24	; 24
		eeprom_address= eeprom_address + 1;
     39c:	80 91 78 01 	lds	r24, 0x0178
     3a0:	90 91 79 01 	lds	r25, 0x0179
     3a4:	01 96       	adiw	r24, 0x01	; 1
     3a6:	90 93 79 01 	sts	0x0179, r25
     3aa:	80 93 78 01 	sts	0x0178, r24
		notecount= notecount + 1;
     3ae:	80 91 76 01 	lds	r24, 0x0176
     3b2:	90 91 77 01 	lds	r25, 0x0177
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	90 93 77 01 	sts	0x0177, r25
     3bc:	80 93 76 01 	sts	0x0176, r24
     3c0:	08 95       	ret

000003c2 <EEPROM_read>:
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     3c2:	e1 99       	sbic	0x1c, 1	; 28
     3c4:	fe cf       	rjmp	.-4      	; 0x3c2 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     3c6:	9f bb       	out	0x1f, r25	; 31
     3c8:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     3ca:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     3cc:	8d b3       	in	r24, 0x1d	; 29
}
     3ce:	08 95       	ret

000003d0 <__fixunssfsi>:
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	7b 01       	movw	r14, r22
     3da:	8c 01       	movw	r16, r24
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	5f e4       	ldi	r21, 0x4F	; 79
     3e4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__gesf2>
     3e8:	88 23       	and	r24, r24
     3ea:	8c f0       	brlt	.+34     	; 0x40e <__fixunssfsi+0x3e>
     3ec:	c8 01       	movw	r24, r16
     3ee:	b7 01       	movw	r22, r14
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	5f e4       	ldi	r21, 0x4F	; 79
     3f8:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__subsf3>
     3fc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fixsfsi>
     400:	9b 01       	movw	r18, r22
     402:	ac 01       	movw	r20, r24
     404:	20 50       	subi	r18, 0x00	; 0
     406:	30 40       	sbci	r19, 0x00	; 0
     408:	40 40       	sbci	r20, 0x00	; 0
     40a:	50 48       	sbci	r21, 0x80	; 128
     40c:	06 c0       	rjmp	.+12     	; 0x41a <__fixunssfsi+0x4a>
     40e:	c8 01       	movw	r24, r16
     410:	b7 01       	movw	r22, r14
     412:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__fixsfsi>
     416:	9b 01       	movw	r18, r22
     418:	ac 01       	movw	r20, r24
     41a:	b9 01       	movw	r22, r18
     41c:	ca 01       	movw	r24, r20
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	08 95       	ret

00000428 <_fpadd_parts>:
     428:	a0 e0       	ldi	r26, 0x00	; 0
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	ea e1       	ldi	r30, 0x1A	; 26
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__prologue_saves__>
     434:	dc 01       	movw	r26, r24
     436:	2b 01       	movw	r4, r22
     438:	fa 01       	movw	r30, r20
     43a:	9c 91       	ld	r25, X
     43c:	92 30       	cpi	r25, 0x02	; 2
     43e:	08 f4       	brcc	.+2      	; 0x442 <_fpadd_parts+0x1a>
     440:	39 c1       	rjmp	.+626    	; 0x6b4 <_fpadd_parts+0x28c>
     442:	eb 01       	movw	r28, r22
     444:	88 81       	ld	r24, Y
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	08 f4       	brcc	.+2      	; 0x44c <_fpadd_parts+0x24>
     44a:	33 c1       	rjmp	.+614    	; 0x6b2 <_fpadd_parts+0x28a>
     44c:	94 30       	cpi	r25, 0x04	; 4
     44e:	69 f4       	brne	.+26     	; 0x46a <_fpadd_parts+0x42>
     450:	84 30       	cpi	r24, 0x04	; 4
     452:	09 f0       	breq	.+2      	; 0x456 <_fpadd_parts+0x2e>
     454:	2f c1       	rjmp	.+606    	; 0x6b4 <_fpadd_parts+0x28c>
     456:	11 96       	adiw	r26, 0x01	; 1
     458:	9c 91       	ld	r25, X
     45a:	11 97       	sbiw	r26, 0x01	; 1
     45c:	89 81       	ldd	r24, Y+1	; 0x01
     45e:	98 17       	cp	r25, r24
     460:	09 f4       	brne	.+2      	; 0x464 <_fpadd_parts+0x3c>
     462:	28 c1       	rjmp	.+592    	; 0x6b4 <_fpadd_parts+0x28c>
     464:	a8 e6       	ldi	r26, 0x68	; 104
     466:	b0 e0       	ldi	r27, 0x00	; 0
     468:	25 c1       	rjmp	.+586    	; 0x6b4 <_fpadd_parts+0x28c>
     46a:	84 30       	cpi	r24, 0x04	; 4
     46c:	09 f4       	brne	.+2      	; 0x470 <_fpadd_parts+0x48>
     46e:	21 c1       	rjmp	.+578    	; 0x6b2 <_fpadd_parts+0x28a>
     470:	82 30       	cpi	r24, 0x02	; 2
     472:	a9 f4       	brne	.+42     	; 0x49e <_fpadd_parts+0x76>
     474:	92 30       	cpi	r25, 0x02	; 2
     476:	09 f0       	breq	.+2      	; 0x47a <_fpadd_parts+0x52>
     478:	1d c1       	rjmp	.+570    	; 0x6b4 <_fpadd_parts+0x28c>
     47a:	9a 01       	movw	r18, r20
     47c:	ad 01       	movw	r20, r26
     47e:	88 e0       	ldi	r24, 0x08	; 8
     480:	ea 01       	movw	r28, r20
     482:	09 90       	ld	r0, Y+
     484:	ae 01       	movw	r20, r28
     486:	e9 01       	movw	r28, r18
     488:	09 92       	st	Y+, r0
     48a:	9e 01       	movw	r18, r28
     48c:	81 50       	subi	r24, 0x01	; 1
     48e:	c1 f7       	brne	.-16     	; 0x480 <_fpadd_parts+0x58>
     490:	e2 01       	movw	r28, r4
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	11 96       	adiw	r26, 0x01	; 1
     496:	9c 91       	ld	r25, X
     498:	89 23       	and	r24, r25
     49a:	81 83       	std	Z+1, r24	; 0x01
     49c:	08 c1       	rjmp	.+528    	; 0x6ae <_fpadd_parts+0x286>
     49e:	92 30       	cpi	r25, 0x02	; 2
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <_fpadd_parts+0x7c>
     4a2:	07 c1       	rjmp	.+526    	; 0x6b2 <_fpadd_parts+0x28a>
     4a4:	12 96       	adiw	r26, 0x02	; 2
     4a6:	2d 90       	ld	r2, X+
     4a8:	3c 90       	ld	r3, X
     4aa:	13 97       	sbiw	r26, 0x03	; 3
     4ac:	eb 01       	movw	r28, r22
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
     4b0:	9b 81       	ldd	r25, Y+3	; 0x03
     4b2:	14 96       	adiw	r26, 0x04	; 4
     4b4:	ad 90       	ld	r10, X+
     4b6:	bd 90       	ld	r11, X+
     4b8:	cd 90       	ld	r12, X+
     4ba:	dc 90       	ld	r13, X
     4bc:	17 97       	sbiw	r26, 0x07	; 7
     4be:	ec 80       	ldd	r14, Y+4	; 0x04
     4c0:	fd 80       	ldd	r15, Y+5	; 0x05
     4c2:	0e 81       	ldd	r16, Y+6	; 0x06
     4c4:	1f 81       	ldd	r17, Y+7	; 0x07
     4c6:	91 01       	movw	r18, r2
     4c8:	28 1b       	sub	r18, r24
     4ca:	39 0b       	sbc	r19, r25
     4cc:	b9 01       	movw	r22, r18
     4ce:	37 ff       	sbrs	r19, 7
     4d0:	04 c0       	rjmp	.+8      	; 0x4da <_fpadd_parts+0xb2>
     4d2:	66 27       	eor	r22, r22
     4d4:	77 27       	eor	r23, r23
     4d6:	62 1b       	sub	r22, r18
     4d8:	73 0b       	sbc	r23, r19
     4da:	60 32       	cpi	r22, 0x20	; 32
     4dc:	71 05       	cpc	r23, r1
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <_fpadd_parts+0xba>
     4e0:	61 c0       	rjmp	.+194    	; 0x5a4 <_fpadd_parts+0x17c>
     4e2:	12 16       	cp	r1, r18
     4e4:	13 06       	cpc	r1, r19
     4e6:	6c f5       	brge	.+90     	; 0x542 <_fpadd_parts+0x11a>
     4e8:	37 01       	movw	r6, r14
     4ea:	48 01       	movw	r8, r16
     4ec:	06 2e       	mov	r0, r22
     4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <_fpadd_parts+0xd0>
     4f0:	96 94       	lsr	r9
     4f2:	87 94       	ror	r8
     4f4:	77 94       	ror	r7
     4f6:	67 94       	ror	r6
     4f8:	0a 94       	dec	r0
     4fa:	d2 f7       	brpl	.-12     	; 0x4f0 <_fpadd_parts+0xc8>
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	04 c0       	rjmp	.+8      	; 0x50e <_fpadd_parts+0xe6>
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	44 1f       	adc	r20, r20
     50c:	55 1f       	adc	r21, r21
     50e:	6a 95       	dec	r22
     510:	d2 f7       	brpl	.-12     	; 0x506 <_fpadd_parts+0xde>
     512:	21 50       	subi	r18, 0x01	; 1
     514:	30 40       	sbci	r19, 0x00	; 0
     516:	40 40       	sbci	r20, 0x00	; 0
     518:	50 40       	sbci	r21, 0x00	; 0
     51a:	2e 21       	and	r18, r14
     51c:	3f 21       	and	r19, r15
     51e:	40 23       	and	r20, r16
     520:	51 23       	and	r21, r17
     522:	21 15       	cp	r18, r1
     524:	31 05       	cpc	r19, r1
     526:	41 05       	cpc	r20, r1
     528:	51 05       	cpc	r21, r1
     52a:	21 f0       	breq	.+8      	; 0x534 <_fpadd_parts+0x10c>
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	79 01       	movw	r14, r18
     536:	8a 01       	movw	r16, r20
     538:	e6 28       	or	r14, r6
     53a:	f7 28       	or	r15, r7
     53c:	08 29       	or	r16, r8
     53e:	19 29       	or	r17, r9
     540:	3c c0       	rjmp	.+120    	; 0x5ba <_fpadd_parts+0x192>
     542:	23 2b       	or	r18, r19
     544:	d1 f1       	breq	.+116    	; 0x5ba <_fpadd_parts+0x192>
     546:	26 0e       	add	r2, r22
     548:	37 1e       	adc	r3, r23
     54a:	35 01       	movw	r6, r10
     54c:	46 01       	movw	r8, r12
     54e:	06 2e       	mov	r0, r22
     550:	04 c0       	rjmp	.+8      	; 0x55a <_fpadd_parts+0x132>
     552:	96 94       	lsr	r9
     554:	87 94       	ror	r8
     556:	77 94       	ror	r7
     558:	67 94       	ror	r6
     55a:	0a 94       	dec	r0
     55c:	d2 f7       	brpl	.-12     	; 0x552 <_fpadd_parts+0x12a>
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	40 e0       	ldi	r20, 0x00	; 0
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	04 c0       	rjmp	.+8      	; 0x570 <_fpadd_parts+0x148>
     568:	22 0f       	add	r18, r18
     56a:	33 1f       	adc	r19, r19
     56c:	44 1f       	adc	r20, r20
     56e:	55 1f       	adc	r21, r21
     570:	6a 95       	dec	r22
     572:	d2 f7       	brpl	.-12     	; 0x568 <_fpadd_parts+0x140>
     574:	21 50       	subi	r18, 0x01	; 1
     576:	30 40       	sbci	r19, 0x00	; 0
     578:	40 40       	sbci	r20, 0x00	; 0
     57a:	50 40       	sbci	r21, 0x00	; 0
     57c:	2a 21       	and	r18, r10
     57e:	3b 21       	and	r19, r11
     580:	4c 21       	and	r20, r12
     582:	5d 21       	and	r21, r13
     584:	21 15       	cp	r18, r1
     586:	31 05       	cpc	r19, r1
     588:	41 05       	cpc	r20, r1
     58a:	51 05       	cpc	r21, r1
     58c:	21 f0       	breq	.+8      	; 0x596 <_fpadd_parts+0x16e>
     58e:	21 e0       	ldi	r18, 0x01	; 1
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	50 e0       	ldi	r21, 0x00	; 0
     596:	59 01       	movw	r10, r18
     598:	6a 01       	movw	r12, r20
     59a:	a6 28       	or	r10, r6
     59c:	b7 28       	or	r11, r7
     59e:	c8 28       	or	r12, r8
     5a0:	d9 28       	or	r13, r9
     5a2:	0b c0       	rjmp	.+22     	; 0x5ba <_fpadd_parts+0x192>
     5a4:	82 15       	cp	r24, r2
     5a6:	93 05       	cpc	r25, r3
     5a8:	2c f0       	brlt	.+10     	; 0x5b4 <_fpadd_parts+0x18c>
     5aa:	1c 01       	movw	r2, r24
     5ac:	aa 24       	eor	r10, r10
     5ae:	bb 24       	eor	r11, r11
     5b0:	65 01       	movw	r12, r10
     5b2:	03 c0       	rjmp	.+6      	; 0x5ba <_fpadd_parts+0x192>
     5b4:	ee 24       	eor	r14, r14
     5b6:	ff 24       	eor	r15, r15
     5b8:	87 01       	movw	r16, r14
     5ba:	11 96       	adiw	r26, 0x01	; 1
     5bc:	9c 91       	ld	r25, X
     5be:	d2 01       	movw	r26, r4
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	8c 91       	ld	r24, X
     5c4:	98 17       	cp	r25, r24
     5c6:	09 f4       	brne	.+2      	; 0x5ca <_fpadd_parts+0x1a2>
     5c8:	45 c0       	rjmp	.+138    	; 0x654 <_fpadd_parts+0x22c>
     5ca:	99 23       	and	r25, r25
     5cc:	39 f0       	breq	.+14     	; 0x5dc <_fpadd_parts+0x1b4>
     5ce:	a8 01       	movw	r20, r16
     5d0:	97 01       	movw	r18, r14
     5d2:	2a 19       	sub	r18, r10
     5d4:	3b 09       	sbc	r19, r11
     5d6:	4c 09       	sbc	r20, r12
     5d8:	5d 09       	sbc	r21, r13
     5da:	06 c0       	rjmp	.+12     	; 0x5e8 <_fpadd_parts+0x1c0>
     5dc:	a6 01       	movw	r20, r12
     5de:	95 01       	movw	r18, r10
     5e0:	2e 19       	sub	r18, r14
     5e2:	3f 09       	sbc	r19, r15
     5e4:	40 0b       	sbc	r20, r16
     5e6:	51 0b       	sbc	r21, r17
     5e8:	57 fd       	sbrc	r21, 7
     5ea:	08 c0       	rjmp	.+16     	; 0x5fc <_fpadd_parts+0x1d4>
     5ec:	11 82       	std	Z+1, r1	; 0x01
     5ee:	33 82       	std	Z+3, r3	; 0x03
     5f0:	22 82       	std	Z+2, r2	; 0x02
     5f2:	24 83       	std	Z+4, r18	; 0x04
     5f4:	35 83       	std	Z+5, r19	; 0x05
     5f6:	46 83       	std	Z+6, r20	; 0x06
     5f8:	57 83       	std	Z+7, r21	; 0x07
     5fa:	1d c0       	rjmp	.+58     	; 0x636 <_fpadd_parts+0x20e>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	81 83       	std	Z+1, r24	; 0x01
     600:	33 82       	std	Z+3, r3	; 0x03
     602:	22 82       	std	Z+2, r2	; 0x02
     604:	88 27       	eor	r24, r24
     606:	99 27       	eor	r25, r25
     608:	dc 01       	movw	r26, r24
     60a:	82 1b       	sub	r24, r18
     60c:	93 0b       	sbc	r25, r19
     60e:	a4 0b       	sbc	r26, r20
     610:	b5 0b       	sbc	r27, r21
     612:	84 83       	std	Z+4, r24	; 0x04
     614:	95 83       	std	Z+5, r25	; 0x05
     616:	a6 83       	std	Z+6, r26	; 0x06
     618:	b7 83       	std	Z+7, r27	; 0x07
     61a:	0d c0       	rjmp	.+26     	; 0x636 <_fpadd_parts+0x20e>
     61c:	22 0f       	add	r18, r18
     61e:	33 1f       	adc	r19, r19
     620:	44 1f       	adc	r20, r20
     622:	55 1f       	adc	r21, r21
     624:	24 83       	std	Z+4, r18	; 0x04
     626:	35 83       	std	Z+5, r19	; 0x05
     628:	46 83       	std	Z+6, r20	; 0x06
     62a:	57 83       	std	Z+7, r21	; 0x07
     62c:	82 81       	ldd	r24, Z+2	; 0x02
     62e:	93 81       	ldd	r25, Z+3	; 0x03
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	93 83       	std	Z+3, r25	; 0x03
     634:	82 83       	std	Z+2, r24	; 0x02
     636:	24 81       	ldd	r18, Z+4	; 0x04
     638:	35 81       	ldd	r19, Z+5	; 0x05
     63a:	46 81       	ldd	r20, Z+6	; 0x06
     63c:	57 81       	ldd	r21, Z+7	; 0x07
     63e:	da 01       	movw	r26, r20
     640:	c9 01       	movw	r24, r18
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	a1 09       	sbc	r26, r1
     646:	b1 09       	sbc	r27, r1
     648:	8f 5f       	subi	r24, 0xFF	; 255
     64a:	9f 4f       	sbci	r25, 0xFF	; 255
     64c:	af 4f       	sbci	r26, 0xFF	; 255
     64e:	bf 43       	sbci	r27, 0x3F	; 63
     650:	28 f3       	brcs	.-54     	; 0x61c <_fpadd_parts+0x1f4>
     652:	0b c0       	rjmp	.+22     	; 0x66a <_fpadd_parts+0x242>
     654:	91 83       	std	Z+1, r25	; 0x01
     656:	33 82       	std	Z+3, r3	; 0x03
     658:	22 82       	std	Z+2, r2	; 0x02
     65a:	ea 0c       	add	r14, r10
     65c:	fb 1c       	adc	r15, r11
     65e:	0c 1d       	adc	r16, r12
     660:	1d 1d       	adc	r17, r13
     662:	e4 82       	std	Z+4, r14	; 0x04
     664:	f5 82       	std	Z+5, r15	; 0x05
     666:	06 83       	std	Z+6, r16	; 0x06
     668:	17 83       	std	Z+7, r17	; 0x07
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	80 83       	st	Z, r24
     66e:	24 81       	ldd	r18, Z+4	; 0x04
     670:	35 81       	ldd	r19, Z+5	; 0x05
     672:	46 81       	ldd	r20, Z+6	; 0x06
     674:	57 81       	ldd	r21, Z+7	; 0x07
     676:	57 ff       	sbrs	r21, 7
     678:	1a c0       	rjmp	.+52     	; 0x6ae <_fpadd_parts+0x286>
     67a:	c9 01       	movw	r24, r18
     67c:	aa 27       	eor	r26, r26
     67e:	97 fd       	sbrc	r25, 7
     680:	a0 95       	com	r26
     682:	ba 2f       	mov	r27, r26
     684:	81 70       	andi	r24, 0x01	; 1
     686:	90 70       	andi	r25, 0x00	; 0
     688:	a0 70       	andi	r26, 0x00	; 0
     68a:	b0 70       	andi	r27, 0x00	; 0
     68c:	56 95       	lsr	r21
     68e:	47 95       	ror	r20
     690:	37 95       	ror	r19
     692:	27 95       	ror	r18
     694:	82 2b       	or	r24, r18
     696:	93 2b       	or	r25, r19
     698:	a4 2b       	or	r26, r20
     69a:	b5 2b       	or	r27, r21
     69c:	84 83       	std	Z+4, r24	; 0x04
     69e:	95 83       	std	Z+5, r25	; 0x05
     6a0:	a6 83       	std	Z+6, r26	; 0x06
     6a2:	b7 83       	std	Z+7, r27	; 0x07
     6a4:	82 81       	ldd	r24, Z+2	; 0x02
     6a6:	93 81       	ldd	r25, Z+3	; 0x03
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	93 83       	std	Z+3, r25	; 0x03
     6ac:	82 83       	std	Z+2, r24	; 0x02
     6ae:	df 01       	movw	r26, r30
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <_fpadd_parts+0x28c>
     6b2:	d2 01       	movw	r26, r4
     6b4:	cd 01       	movw	r24, r26
     6b6:	cd b7       	in	r28, 0x3d	; 61
     6b8:	de b7       	in	r29, 0x3e	; 62
     6ba:	e2 e1       	ldi	r30, 0x12	; 18
     6bc:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__epilogue_restores__>

000006c0 <__subsf3>:
     6c0:	a0 e2       	ldi	r26, 0x20	; 32
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	e6 e6       	ldi	r30, 0x66	; 102
     6c6:	f3 e0       	ldi	r31, 0x03	; 3
     6c8:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__+0x18>
     6cc:	69 83       	std	Y+1, r22	; 0x01
     6ce:	7a 83       	std	Y+2, r23	; 0x02
     6d0:	8b 83       	std	Y+3, r24	; 0x03
     6d2:	9c 83       	std	Y+4, r25	; 0x04
     6d4:	2d 83       	std	Y+5, r18	; 0x05
     6d6:	3e 83       	std	Y+6, r19	; 0x06
     6d8:	4f 83       	std	Y+7, r20	; 0x07
     6da:	58 87       	std	Y+8, r21	; 0x08
     6dc:	e9 e0       	ldi	r30, 0x09	; 9
     6de:	ee 2e       	mov	r14, r30
     6e0:	f1 2c       	mov	r15, r1
     6e2:	ec 0e       	add	r14, r28
     6e4:	fd 1e       	adc	r15, r29
     6e6:	ce 01       	movw	r24, r28
     6e8:	01 96       	adiw	r24, 0x01	; 1
     6ea:	b7 01       	movw	r22, r14
     6ec:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     6f0:	8e 01       	movw	r16, r28
     6f2:	0f 5e       	subi	r16, 0xEF	; 239
     6f4:	1f 4f       	sbci	r17, 0xFF	; 255
     6f6:	ce 01       	movw	r24, r28
     6f8:	05 96       	adiw	r24, 0x05	; 5
     6fa:	b8 01       	movw	r22, r16
     6fc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     700:	8a 89       	ldd	r24, Y+18	; 0x12
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	89 27       	eor	r24, r25
     706:	8a 8b       	std	Y+18, r24	; 0x12
     708:	c7 01       	movw	r24, r14
     70a:	b8 01       	movw	r22, r16
     70c:	ae 01       	movw	r20, r28
     70e:	47 5e       	subi	r20, 0xE7	; 231
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	0e 94 14 02 	call	0x428	; 0x428 <_fpadd_parts>
     716:	0e 94 49 06 	call	0xc92	; 0xc92 <__pack_f>
     71a:	a0 96       	adiw	r28, 0x20	; 32
     71c:	e6 e0       	ldi	r30, 0x06	; 6
     71e:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__+0x18>

00000722 <__addsf3>:
     722:	a0 e2       	ldi	r26, 0x20	; 32
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e7 e9       	ldi	r30, 0x97	; 151
     728:	f3 e0       	ldi	r31, 0x03	; 3
     72a:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__+0x18>
     72e:	69 83       	std	Y+1, r22	; 0x01
     730:	7a 83       	std	Y+2, r23	; 0x02
     732:	8b 83       	std	Y+3, r24	; 0x03
     734:	9c 83       	std	Y+4, r25	; 0x04
     736:	2d 83       	std	Y+5, r18	; 0x05
     738:	3e 83       	std	Y+6, r19	; 0x06
     73a:	4f 83       	std	Y+7, r20	; 0x07
     73c:	58 87       	std	Y+8, r21	; 0x08
     73e:	f9 e0       	ldi	r31, 0x09	; 9
     740:	ef 2e       	mov	r14, r31
     742:	f1 2c       	mov	r15, r1
     744:	ec 0e       	add	r14, r28
     746:	fd 1e       	adc	r15, r29
     748:	ce 01       	movw	r24, r28
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	b7 01       	movw	r22, r14
     74e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     752:	8e 01       	movw	r16, r28
     754:	0f 5e       	subi	r16, 0xEF	; 239
     756:	1f 4f       	sbci	r17, 0xFF	; 255
     758:	ce 01       	movw	r24, r28
     75a:	05 96       	adiw	r24, 0x05	; 5
     75c:	b8 01       	movw	r22, r16
     75e:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     762:	c7 01       	movw	r24, r14
     764:	b8 01       	movw	r22, r16
     766:	ae 01       	movw	r20, r28
     768:	47 5e       	subi	r20, 0xE7	; 231
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	0e 94 14 02 	call	0x428	; 0x428 <_fpadd_parts>
     770:	0e 94 49 06 	call	0xc92	; 0xc92 <__pack_f>
     774:	a0 96       	adiw	r28, 0x20	; 32
     776:	e6 e0       	ldi	r30, 0x06	; 6
     778:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__+0x18>

0000077c <__mulsf3>:
     77c:	a0 e2       	ldi	r26, 0x20	; 32
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e4 ec       	ldi	r30, 0xC4	; 196
     782:	f3 e0       	ldi	r31, 0x03	; 3
     784:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__prologue_saves__>
     788:	69 83       	std	Y+1, r22	; 0x01
     78a:	7a 83       	std	Y+2, r23	; 0x02
     78c:	8b 83       	std	Y+3, r24	; 0x03
     78e:	9c 83       	std	Y+4, r25	; 0x04
     790:	2d 83       	std	Y+5, r18	; 0x05
     792:	3e 83       	std	Y+6, r19	; 0x06
     794:	4f 83       	std	Y+7, r20	; 0x07
     796:	58 87       	std	Y+8, r21	; 0x08
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	be 01       	movw	r22, r28
     79e:	67 5f       	subi	r22, 0xF7	; 247
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     7a6:	ce 01       	movw	r24, r28
     7a8:	05 96       	adiw	r24, 0x05	; 5
     7aa:	be 01       	movw	r22, r28
     7ac:	6f 5e       	subi	r22, 0xEF	; 239
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     7b4:	99 85       	ldd	r25, Y+9	; 0x09
     7b6:	92 30       	cpi	r25, 0x02	; 2
     7b8:	88 f0       	brcs	.+34     	; 0x7dc <__mulsf3+0x60>
     7ba:	89 89       	ldd	r24, Y+17	; 0x11
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	c8 f0       	brcs	.+50     	; 0x7f2 <__mulsf3+0x76>
     7c0:	94 30       	cpi	r25, 0x04	; 4
     7c2:	19 f4       	brne	.+6      	; 0x7ca <__mulsf3+0x4e>
     7c4:	82 30       	cpi	r24, 0x02	; 2
     7c6:	51 f4       	brne	.+20     	; 0x7dc <__mulsf3+0x60>
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <__mulsf3+0x56>
     7ca:	84 30       	cpi	r24, 0x04	; 4
     7cc:	29 f4       	brne	.+10     	; 0x7d8 <__mulsf3+0x5c>
     7ce:	92 30       	cpi	r25, 0x02	; 2
     7d0:	81 f4       	brne	.+32     	; 0x7f2 <__mulsf3+0x76>
     7d2:	88 e6       	ldi	r24, 0x68	; 104
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	c6 c0       	rjmp	.+396    	; 0x964 <__stack+0x105>
     7d8:	92 30       	cpi	r25, 0x02	; 2
     7da:	49 f4       	brne	.+18     	; 0x7ee <__mulsf3+0x72>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e0:	8a 89       	ldd	r24, Y+18	; 0x12
     7e2:	98 13       	cpse	r25, r24
     7e4:	21 e0       	ldi	r18, 0x01	; 1
     7e6:	2a 87       	std	Y+10, r18	; 0x0a
     7e8:	ce 01       	movw	r24, r28
     7ea:	09 96       	adiw	r24, 0x09	; 9
     7ec:	bb c0       	rjmp	.+374    	; 0x964 <__stack+0x105>
     7ee:	82 30       	cpi	r24, 0x02	; 2
     7f0:	49 f4       	brne	.+18     	; 0x804 <__mulsf3+0x88>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f6:	8a 89       	ldd	r24, Y+18	; 0x12
     7f8:	98 13       	cpse	r25, r24
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	2a 8b       	std	Y+18, r18	; 0x12
     7fe:	ce 01       	movw	r24, r28
     800:	41 96       	adiw	r24, 0x11	; 17
     802:	b0 c0       	rjmp	.+352    	; 0x964 <__stack+0x105>
     804:	2d 84       	ldd	r2, Y+13	; 0x0d
     806:	3e 84       	ldd	r3, Y+14	; 0x0e
     808:	4f 84       	ldd	r4, Y+15	; 0x0f
     80a:	58 88       	ldd	r5, Y+16	; 0x10
     80c:	6d 88       	ldd	r6, Y+21	; 0x15
     80e:	7e 88       	ldd	r7, Y+22	; 0x16
     810:	8f 88       	ldd	r8, Y+23	; 0x17
     812:	98 8c       	ldd	r9, Y+24	; 0x18
     814:	ee 24       	eor	r14, r14
     816:	ff 24       	eor	r15, r15
     818:	87 01       	movw	r16, r14
     81a:	aa 24       	eor	r10, r10
     81c:	bb 24       	eor	r11, r11
     81e:	65 01       	movw	r12, r10
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	e0 e0       	ldi	r30, 0x00	; 0
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	c1 01       	movw	r24, r2
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	90 70       	andi	r25, 0x00	; 0
     832:	89 2b       	or	r24, r25
     834:	e9 f0       	breq	.+58     	; 0x870 <__stack+0x11>
     836:	e6 0c       	add	r14, r6
     838:	f7 1c       	adc	r15, r7
     83a:	08 1d       	adc	r16, r8
     83c:	19 1d       	adc	r17, r9
     83e:	9a 01       	movw	r18, r20
     840:	ab 01       	movw	r20, r22
     842:	2a 0d       	add	r18, r10
     844:	3b 1d       	adc	r19, r11
     846:	4c 1d       	adc	r20, r12
     848:	5d 1d       	adc	r21, r13
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	a0 e0       	ldi	r26, 0x00	; 0
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	e6 14       	cp	r14, r6
     854:	f7 04       	cpc	r15, r7
     856:	08 05       	cpc	r16, r8
     858:	19 05       	cpc	r17, r9
     85a:	20 f4       	brcc	.+8      	; 0x864 <__stack+0x5>
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	a0 e0       	ldi	r26, 0x00	; 0
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	ba 01       	movw	r22, r20
     866:	a9 01       	movw	r20, r18
     868:	48 0f       	add	r20, r24
     86a:	59 1f       	adc	r21, r25
     86c:	6a 1f       	adc	r22, r26
     86e:	7b 1f       	adc	r23, r27
     870:	aa 0c       	add	r10, r10
     872:	bb 1c       	adc	r11, r11
     874:	cc 1c       	adc	r12, r12
     876:	dd 1c       	adc	r13, r13
     878:	97 fe       	sbrs	r9, 7
     87a:	08 c0       	rjmp	.+16     	; 0x88c <__stack+0x2d>
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a0 e0       	ldi	r26, 0x00	; 0
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	a8 2a       	or	r10, r24
     886:	b9 2a       	or	r11, r25
     888:	ca 2a       	or	r12, r26
     88a:	db 2a       	or	r13, r27
     88c:	31 96       	adiw	r30, 0x01	; 1
     88e:	e0 32       	cpi	r30, 0x20	; 32
     890:	f1 05       	cpc	r31, r1
     892:	49 f0       	breq	.+18     	; 0x8a6 <__stack+0x47>
     894:	66 0c       	add	r6, r6
     896:	77 1c       	adc	r7, r7
     898:	88 1c       	adc	r8, r8
     89a:	99 1c       	adc	r9, r9
     89c:	56 94       	lsr	r5
     89e:	47 94       	ror	r4
     8a0:	37 94       	ror	r3
     8a2:	27 94       	ror	r2
     8a4:	c3 cf       	rjmp	.-122    	; 0x82c <__mulsf3+0xb0>
     8a6:	fa 85       	ldd	r31, Y+10	; 0x0a
     8a8:	ea 89       	ldd	r30, Y+18	; 0x12
     8aa:	2b 89       	ldd	r18, Y+19	; 0x13
     8ac:	3c 89       	ldd	r19, Y+20	; 0x14
     8ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b2:	28 0f       	add	r18, r24
     8b4:	39 1f       	adc	r19, r25
     8b6:	2e 5f       	subi	r18, 0xFE	; 254
     8b8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ba:	17 c0       	rjmp	.+46     	; 0x8ea <__stack+0x8b>
     8bc:	ca 01       	movw	r24, r20
     8be:	81 70       	andi	r24, 0x01	; 1
     8c0:	90 70       	andi	r25, 0x00	; 0
     8c2:	89 2b       	or	r24, r25
     8c4:	61 f0       	breq	.+24     	; 0x8de <__stack+0x7f>
     8c6:	16 95       	lsr	r17
     8c8:	07 95       	ror	r16
     8ca:	f7 94       	ror	r15
     8cc:	e7 94       	ror	r14
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	a0 e0       	ldi	r26, 0x00	; 0
     8d4:	b0 e8       	ldi	r27, 0x80	; 128
     8d6:	e8 2a       	or	r14, r24
     8d8:	f9 2a       	or	r15, r25
     8da:	0a 2b       	or	r16, r26
     8dc:	1b 2b       	or	r17, r27
     8de:	76 95       	lsr	r23
     8e0:	67 95       	ror	r22
     8e2:	57 95       	ror	r21
     8e4:	47 95       	ror	r20
     8e6:	2f 5f       	subi	r18, 0xFF	; 255
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	77 fd       	sbrc	r23, 7
     8ec:	e7 cf       	rjmp	.-50     	; 0x8bc <__stack+0x5d>
     8ee:	0c c0       	rjmp	.+24     	; 0x908 <__stack+0xa9>
     8f0:	44 0f       	add	r20, r20
     8f2:	55 1f       	adc	r21, r21
     8f4:	66 1f       	adc	r22, r22
     8f6:	77 1f       	adc	r23, r23
     8f8:	17 fd       	sbrc	r17, 7
     8fa:	41 60       	ori	r20, 0x01	; 1
     8fc:	ee 0c       	add	r14, r14
     8fe:	ff 1c       	adc	r15, r15
     900:	00 1f       	adc	r16, r16
     902:	11 1f       	adc	r17, r17
     904:	21 50       	subi	r18, 0x01	; 1
     906:	30 40       	sbci	r19, 0x00	; 0
     908:	40 30       	cpi	r20, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	59 07       	cpc	r21, r25
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	69 07       	cpc	r22, r25
     912:	90 e4       	ldi	r25, 0x40	; 64
     914:	79 07       	cpc	r23, r25
     916:	60 f3       	brcs	.-40     	; 0x8f0 <__stack+0x91>
     918:	2b 8f       	std	Y+27, r18	; 0x1b
     91a:	3c 8f       	std	Y+28, r19	; 0x1c
     91c:	db 01       	movw	r26, r22
     91e:	ca 01       	movw	r24, r20
     920:	8f 77       	andi	r24, 0x7F	; 127
     922:	90 70       	andi	r25, 0x00	; 0
     924:	a0 70       	andi	r26, 0x00	; 0
     926:	b0 70       	andi	r27, 0x00	; 0
     928:	80 34       	cpi	r24, 0x40	; 64
     92a:	91 05       	cpc	r25, r1
     92c:	a1 05       	cpc	r26, r1
     92e:	b1 05       	cpc	r27, r1
     930:	61 f4       	brne	.+24     	; 0x94a <__stack+0xeb>
     932:	47 fd       	sbrc	r20, 7
     934:	0a c0       	rjmp	.+20     	; 0x94a <__stack+0xeb>
     936:	e1 14       	cp	r14, r1
     938:	f1 04       	cpc	r15, r1
     93a:	01 05       	cpc	r16, r1
     93c:	11 05       	cpc	r17, r1
     93e:	29 f0       	breq	.+10     	; 0x94a <__stack+0xeb>
     940:	40 5c       	subi	r20, 0xC0	; 192
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	6f 4f       	sbci	r22, 0xFF	; 255
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	40 78       	andi	r20, 0x80	; 128
     94a:	1a 8e       	std	Y+26, r1	; 0x1a
     94c:	fe 17       	cp	r31, r30
     94e:	11 f0       	breq	.+4      	; 0x954 <__stack+0xf5>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	8a 8f       	std	Y+26, r24	; 0x1a
     954:	4d 8f       	std	Y+29, r20	; 0x1d
     956:	5e 8f       	std	Y+30, r21	; 0x1e
     958:	6f 8f       	std	Y+31, r22	; 0x1f
     95a:	78 a3       	std	Y+32, r23	; 0x20
     95c:	83 e0       	ldi	r24, 0x03	; 3
     95e:	89 8f       	std	Y+25, r24	; 0x19
     960:	ce 01       	movw	r24, r28
     962:	49 96       	adiw	r24, 0x19	; 25
     964:	0e 94 49 06 	call	0xc92	; 0xc92 <__pack_f>
     968:	a0 96       	adiw	r28, 0x20	; 32
     96a:	e2 e1       	ldi	r30, 0x12	; 18
     96c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__epilogue_restores__>

00000970 <__gtsf2>:
     970:	a8 e1       	ldi	r26, 0x18	; 24
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	ee eb       	ldi	r30, 0xBE	; 190
     976:	f4 e0       	ldi	r31, 0x04	; 4
     978:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__+0x18>
     97c:	69 83       	std	Y+1, r22	; 0x01
     97e:	7a 83       	std	Y+2, r23	; 0x02
     980:	8b 83       	std	Y+3, r24	; 0x03
     982:	9c 83       	std	Y+4, r25	; 0x04
     984:	2d 83       	std	Y+5, r18	; 0x05
     986:	3e 83       	std	Y+6, r19	; 0x06
     988:	4f 83       	std	Y+7, r20	; 0x07
     98a:	58 87       	std	Y+8, r21	; 0x08
     98c:	89 e0       	ldi	r24, 0x09	; 9
     98e:	e8 2e       	mov	r14, r24
     990:	f1 2c       	mov	r15, r1
     992:	ec 0e       	add	r14, r28
     994:	fd 1e       	adc	r15, r29
     996:	ce 01       	movw	r24, r28
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	b7 01       	movw	r22, r14
     99c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     9a0:	8e 01       	movw	r16, r28
     9a2:	0f 5e       	subi	r16, 0xEF	; 239
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	ce 01       	movw	r24, r28
     9a8:	05 96       	adiw	r24, 0x05	; 5
     9aa:	b8 01       	movw	r22, r16
     9ac:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     9b0:	89 85       	ldd	r24, Y+9	; 0x09
     9b2:	82 30       	cpi	r24, 0x02	; 2
     9b4:	40 f0       	brcs	.+16     	; 0x9c6 <__gtsf2+0x56>
     9b6:	89 89       	ldd	r24, Y+17	; 0x11
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	28 f0       	brcs	.+10     	; 0x9c6 <__gtsf2+0x56>
     9bc:	c7 01       	movw	r24, r14
     9be:	b8 01       	movw	r22, r16
     9c0:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fpcmp_parts_f>
     9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <__gtsf2+0x58>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	68 96       	adiw	r28, 0x18	; 24
     9ca:	e6 e0       	ldi	r30, 0x06	; 6
     9cc:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__+0x18>

000009d0 <__gesf2>:
     9d0:	a8 e1       	ldi	r26, 0x18	; 24
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	ee ee       	ldi	r30, 0xEE	; 238
     9d6:	f4 e0       	ldi	r31, 0x04	; 4
     9d8:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__+0x18>
     9dc:	69 83       	std	Y+1, r22	; 0x01
     9de:	7a 83       	std	Y+2, r23	; 0x02
     9e0:	8b 83       	std	Y+3, r24	; 0x03
     9e2:	9c 83       	std	Y+4, r25	; 0x04
     9e4:	2d 83       	std	Y+5, r18	; 0x05
     9e6:	3e 83       	std	Y+6, r19	; 0x06
     9e8:	4f 83       	std	Y+7, r20	; 0x07
     9ea:	58 87       	std	Y+8, r21	; 0x08
     9ec:	89 e0       	ldi	r24, 0x09	; 9
     9ee:	e8 2e       	mov	r14, r24
     9f0:	f1 2c       	mov	r15, r1
     9f2:	ec 0e       	add	r14, r28
     9f4:	fd 1e       	adc	r15, r29
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	b7 01       	movw	r22, r14
     9fc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     a00:	8e 01       	movw	r16, r28
     a02:	0f 5e       	subi	r16, 0xEF	; 239
     a04:	1f 4f       	sbci	r17, 0xFF	; 255
     a06:	ce 01       	movw	r24, r28
     a08:	05 96       	adiw	r24, 0x05	; 5
     a0a:	b8 01       	movw	r22, r16
     a0c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     a10:	89 85       	ldd	r24, Y+9	; 0x09
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	40 f0       	brcs	.+16     	; 0xa26 <__gesf2+0x56>
     a16:	89 89       	ldd	r24, Y+17	; 0x11
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	28 f0       	brcs	.+10     	; 0xa26 <__gesf2+0x56>
     a1c:	c7 01       	movw	r24, r14
     a1e:	b8 01       	movw	r22, r16
     a20:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fpcmp_parts_f>
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <__gesf2+0x58>
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	68 96       	adiw	r28, 0x18	; 24
     a2a:	e6 e0       	ldi	r30, 0x06	; 6
     a2c:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__+0x18>

00000a30 <__ltsf2>:
     a30:	a8 e1       	ldi	r26, 0x18	; 24
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	ee e1       	ldi	r30, 0x1E	; 30
     a36:	f5 e0       	ldi	r31, 0x05	; 5
     a38:	0c 94 fb 07 	jmp	0xff6	; 0xff6 <__prologue_saves__+0x18>
     a3c:	69 83       	std	Y+1, r22	; 0x01
     a3e:	7a 83       	std	Y+2, r23	; 0x02
     a40:	8b 83       	std	Y+3, r24	; 0x03
     a42:	9c 83       	std	Y+4, r25	; 0x04
     a44:	2d 83       	std	Y+5, r18	; 0x05
     a46:	3e 83       	std	Y+6, r19	; 0x06
     a48:	4f 83       	std	Y+7, r20	; 0x07
     a4a:	58 87       	std	Y+8, r21	; 0x08
     a4c:	89 e0       	ldi	r24, 0x09	; 9
     a4e:	e8 2e       	mov	r14, r24
     a50:	f1 2c       	mov	r15, r1
     a52:	ec 0e       	add	r14, r28
     a54:	fd 1e       	adc	r15, r29
     a56:	ce 01       	movw	r24, r28
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	b7 01       	movw	r22, r14
     a5c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     a60:	8e 01       	movw	r16, r28
     a62:	0f 5e       	subi	r16, 0xEF	; 239
     a64:	1f 4f       	sbci	r17, 0xFF	; 255
     a66:	ce 01       	movw	r24, r28
     a68:	05 96       	adiw	r24, 0x05	; 5
     a6a:	b8 01       	movw	r22, r16
     a6c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     a70:	89 85       	ldd	r24, Y+9	; 0x09
     a72:	82 30       	cpi	r24, 0x02	; 2
     a74:	40 f0       	brcs	.+16     	; 0xa86 <__ltsf2+0x56>
     a76:	89 89       	ldd	r24, Y+17	; 0x11
     a78:	82 30       	cpi	r24, 0x02	; 2
     a7a:	28 f0       	brcs	.+10     	; 0xa86 <__ltsf2+0x56>
     a7c:	c7 01       	movw	r24, r14
     a7e:	b8 01       	movw	r22, r16
     a80:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fpcmp_parts_f>
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <__ltsf2+0x58>
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	68 96       	adiw	r28, 0x18	; 24
     a8a:	e6 e0       	ldi	r30, 0x06	; 6
     a8c:	0c 94 17 08 	jmp	0x102e	; 0x102e <__epilogue_restores__+0x18>

00000a90 <__floatsisf>:
     a90:	a8 e0       	ldi	r26, 0x08	; 8
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	ee e4       	ldi	r30, 0x4E	; 78
     a96:	f5 e0       	ldi	r31, 0x05	; 5
     a98:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__prologue_saves__+0x12>
     a9c:	9b 01       	movw	r18, r22
     a9e:	ac 01       	movw	r20, r24
     aa0:	83 e0       	ldi	r24, 0x03	; 3
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	da 01       	movw	r26, r20
     aa6:	c9 01       	movw	r24, r18
     aa8:	88 27       	eor	r24, r24
     aaa:	b7 fd       	sbrc	r27, 7
     aac:	83 95       	inc	r24
     aae:	99 27       	eor	r25, r25
     ab0:	aa 27       	eor	r26, r26
     ab2:	bb 27       	eor	r27, r27
     ab4:	b8 2e       	mov	r11, r24
     ab6:	21 15       	cp	r18, r1
     ab8:	31 05       	cpc	r19, r1
     aba:	41 05       	cpc	r20, r1
     abc:	51 05       	cpc	r21, r1
     abe:	19 f4       	brne	.+6      	; 0xac6 <__floatsisf+0x36>
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	89 83       	std	Y+1, r24	; 0x01
     ac4:	3a c0       	rjmp	.+116    	; 0xb3a <__floatsisf+0xaa>
     ac6:	88 23       	and	r24, r24
     ac8:	a9 f0       	breq	.+42     	; 0xaf4 <__floatsisf+0x64>
     aca:	20 30       	cpi	r18, 0x00	; 0
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	38 07       	cpc	r19, r24
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	48 07       	cpc	r20, r24
     ad4:	80 e8       	ldi	r24, 0x80	; 128
     ad6:	58 07       	cpc	r21, r24
     ad8:	29 f4       	brne	.+10     	; 0xae4 <__floatsisf+0x54>
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	9f ec       	ldi	r25, 0xCF	; 207
     ae2:	30 c0       	rjmp	.+96     	; 0xb44 <__floatsisf+0xb4>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	e2 1a       	sub	r14, r18
     aec:	f3 0a       	sbc	r15, r19
     aee:	04 0b       	sbc	r16, r20
     af0:	15 0b       	sbc	r17, r21
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <__floatsisf+0x68>
     af4:	79 01       	movw	r14, r18
     af6:	8a 01       	movw	r16, r20
     af8:	8e e1       	ldi	r24, 0x1E	; 30
     afa:	c8 2e       	mov	r12, r24
     afc:	d1 2c       	mov	r13, r1
     afe:	dc 82       	std	Y+4, r13	; 0x04
     b00:	cb 82       	std	Y+3, r12	; 0x03
     b02:	ed 82       	std	Y+5, r14	; 0x05
     b04:	fe 82       	std	Y+6, r15	; 0x06
     b06:	0f 83       	std	Y+7, r16	; 0x07
     b08:	18 87       	std	Y+8, r17	; 0x08
     b0a:	c8 01       	movw	r24, r16
     b0c:	b7 01       	movw	r22, r14
     b0e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__clzsi2>
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	18 16       	cp	r1, r24
     b16:	19 06       	cpc	r1, r25
     b18:	84 f4       	brge	.+32     	; 0xb3a <__floatsisf+0xaa>
     b1a:	08 2e       	mov	r0, r24
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__floatsisf+0x96>
     b1e:	ee 0c       	add	r14, r14
     b20:	ff 1c       	adc	r15, r15
     b22:	00 1f       	adc	r16, r16
     b24:	11 1f       	adc	r17, r17
     b26:	0a 94       	dec	r0
     b28:	d2 f7       	brpl	.-12     	; 0xb1e <__floatsisf+0x8e>
     b2a:	ed 82       	std	Y+5, r14	; 0x05
     b2c:	fe 82       	std	Y+6, r15	; 0x06
     b2e:	0f 83       	std	Y+7, r16	; 0x07
     b30:	18 87       	std	Y+8, r17	; 0x08
     b32:	c8 1a       	sub	r12, r24
     b34:	d9 0a       	sbc	r13, r25
     b36:	dc 82       	std	Y+4, r13	; 0x04
     b38:	cb 82       	std	Y+3, r12	; 0x03
     b3a:	ba 82       	std	Y+2, r11	; 0x02
     b3c:	ce 01       	movw	r24, r28
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	0e 94 49 06 	call	0xc92	; 0xc92 <__pack_f>
     b44:	28 96       	adiw	r28, 0x08	; 8
     b46:	e9 e0       	ldi	r30, 0x09	; 9
     b48:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__epilogue_restores__+0x12>

00000b4c <__fixsfsi>:
     b4c:	ac e0       	ldi	r26, 0x0C	; 12
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	ec ea       	ldi	r30, 0xAC	; 172
     b52:	f5 e0       	ldi	r31, 0x05	; 5
     b54:	0c 94 ff 07 	jmp	0xffe	; 0xffe <__prologue_saves__+0x20>
     b58:	69 83       	std	Y+1, r22	; 0x01
     b5a:	7a 83       	std	Y+2, r23	; 0x02
     b5c:	8b 83       	std	Y+3, r24	; 0x03
     b5e:	9c 83       	std	Y+4, r25	; 0x04
     b60:	ce 01       	movw	r24, r28
     b62:	01 96       	adiw	r24, 0x01	; 1
     b64:	be 01       	movw	r22, r28
     b66:	6b 5f       	subi	r22, 0xFB	; 251
     b68:	7f 4f       	sbci	r23, 0xFF	; 255
     b6a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__unpack_f>
     b6e:	8d 81       	ldd	r24, Y+5	; 0x05
     b70:	82 30       	cpi	r24, 0x02	; 2
     b72:	61 f1       	breq	.+88     	; 0xbcc <__fixsfsi+0x80>
     b74:	82 30       	cpi	r24, 0x02	; 2
     b76:	50 f1       	brcs	.+84     	; 0xbcc <__fixsfsi+0x80>
     b78:	84 30       	cpi	r24, 0x04	; 4
     b7a:	21 f4       	brne	.+8      	; 0xb84 <__fixsfsi+0x38>
     b7c:	8e 81       	ldd	r24, Y+6	; 0x06
     b7e:	88 23       	and	r24, r24
     b80:	51 f1       	breq	.+84     	; 0xbd6 <__fixsfsi+0x8a>
     b82:	2e c0       	rjmp	.+92     	; 0xbe0 <__fixsfsi+0x94>
     b84:	2f 81       	ldd	r18, Y+7	; 0x07
     b86:	38 85       	ldd	r19, Y+8	; 0x08
     b88:	37 fd       	sbrc	r19, 7
     b8a:	20 c0       	rjmp	.+64     	; 0xbcc <__fixsfsi+0x80>
     b8c:	6e 81       	ldd	r22, Y+6	; 0x06
     b8e:	2f 31       	cpi	r18, 0x1F	; 31
     b90:	31 05       	cpc	r19, r1
     b92:	1c f0       	brlt	.+6      	; 0xb9a <__fixsfsi+0x4e>
     b94:	66 23       	and	r22, r22
     b96:	f9 f0       	breq	.+62     	; 0xbd6 <__fixsfsi+0x8a>
     b98:	23 c0       	rjmp	.+70     	; 0xbe0 <__fixsfsi+0x94>
     b9a:	8e e1       	ldi	r24, 0x1E	; 30
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	82 1b       	sub	r24, r18
     ba0:	93 0b       	sbc	r25, r19
     ba2:	29 85       	ldd	r18, Y+9	; 0x09
     ba4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ba6:	4b 85       	ldd	r20, Y+11	; 0x0b
     ba8:	5c 85       	ldd	r21, Y+12	; 0x0c
     baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__fixsfsi+0x68>
     bac:	56 95       	lsr	r21
     bae:	47 95       	ror	r20
     bb0:	37 95       	ror	r19
     bb2:	27 95       	ror	r18
     bb4:	8a 95       	dec	r24
     bb6:	d2 f7       	brpl	.-12     	; 0xbac <__fixsfsi+0x60>
     bb8:	66 23       	and	r22, r22
     bba:	b1 f0       	breq	.+44     	; 0xbe8 <__fixsfsi+0x9c>
     bbc:	50 95       	com	r21
     bbe:	40 95       	com	r20
     bc0:	30 95       	com	r19
     bc2:	21 95       	neg	r18
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
     bc6:	4f 4f       	sbci	r20, 0xFF	; 255
     bc8:	5f 4f       	sbci	r21, 0xFF	; 255
     bca:	0e c0       	rjmp	.+28     	; 0xbe8 <__fixsfsi+0x9c>
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <__fixsfsi+0x9c>
     bd6:	2f ef       	ldi	r18, 0xFF	; 255
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f ef       	ldi	r20, 0xFF	; 255
     bdc:	5f e7       	ldi	r21, 0x7F	; 127
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__fixsfsi+0x9c>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e8       	ldi	r21, 0x80	; 128
     be8:	b9 01       	movw	r22, r18
     bea:	ca 01       	movw	r24, r20
     bec:	2c 96       	adiw	r28, 0x0c	; 12
     bee:	e2 e0       	ldi	r30, 0x02	; 2
     bf0:	0c 94 1b 08 	jmp	0x1036	; 0x1036 <__epilogue_restores__+0x20>

00000bf4 <__clzsi2>:
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	7b 01       	movw	r14, r22
     bfe:	8c 01       	movw	r16, r24
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	e8 16       	cp	r14, r24
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	f8 06       	cpc	r15, r24
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	08 07       	cpc	r16, r24
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	18 07       	cpc	r17, r24
     c10:	88 f4       	brcc	.+34     	; 0xc34 <__clzsi2+0x40>
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	e8 16       	cp	r14, r24
     c16:	f1 04       	cpc	r15, r1
     c18:	01 05       	cpc	r16, r1
     c1a:	11 05       	cpc	r17, r1
     c1c:	31 f0       	breq	.+12     	; 0xc2a <__clzsi2+0x36>
     c1e:	28 f0       	brcs	.+10     	; 0xc2a <__clzsi2+0x36>
     c20:	88 e0       	ldi	r24, 0x08	; 8
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	a0 e0       	ldi	r26, 0x00	; 0
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	17 c0       	rjmp	.+46     	; 0xc58 <__clzsi2+0x64>
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	12 c0       	rjmp	.+36     	; 0xc58 <__clzsi2+0x64>
     c34:	80 e0       	ldi	r24, 0x00	; 0
     c36:	e8 16       	cp	r14, r24
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	f8 06       	cpc	r15, r24
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	08 07       	cpc	r16, r24
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	18 07       	cpc	r17, r24
     c44:	28 f0       	brcs	.+10     	; 0xc50 <__clzsi2+0x5c>
     c46:	88 e1       	ldi	r24, 0x18	; 24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__clzsi2+0x64>
     c50:	80 e1       	ldi	r24, 0x10	; 16
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	a0 e0       	ldi	r26, 0x00	; 0
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	20 e2       	ldi	r18, 0x20	; 32
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	40 e0       	ldi	r20, 0x00	; 0
     c5e:	50 e0       	ldi	r21, 0x00	; 0
     c60:	28 1b       	sub	r18, r24
     c62:	39 0b       	sbc	r19, r25
     c64:	4a 0b       	sbc	r20, r26
     c66:	5b 0b       	sbc	r21, r27
     c68:	04 c0       	rjmp	.+8      	; 0xc72 <__clzsi2+0x7e>
     c6a:	16 95       	lsr	r17
     c6c:	07 95       	ror	r16
     c6e:	f7 94       	ror	r15
     c70:	e7 94       	ror	r14
     c72:	8a 95       	dec	r24
     c74:	d2 f7       	brpl	.-12     	; 0xc6a <__clzsi2+0x76>
     c76:	f7 01       	movw	r30, r14
     c78:	e0 59       	subi	r30, 0x90	; 144
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	80 81       	ld	r24, Z
     c7e:	28 1b       	sub	r18, r24
     c80:	31 09       	sbc	r19, r1
     c82:	41 09       	sbc	r20, r1
     c84:	51 09       	sbc	r21, r1
     c86:	c9 01       	movw	r24, r18
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	08 95       	ret

00000c92 <__pack_f>:
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	fc 01       	movw	r30, r24
     c9e:	e4 80       	ldd	r14, Z+4	; 0x04
     ca0:	f5 80       	ldd	r15, Z+5	; 0x05
     ca2:	06 81       	ldd	r16, Z+6	; 0x06
     ca4:	17 81       	ldd	r17, Z+7	; 0x07
     ca6:	d1 80       	ldd	r13, Z+1	; 0x01
     ca8:	80 81       	ld	r24, Z
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	48 f4       	brcc	.+18     	; 0xcc0 <__pack_f+0x2e>
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	a0 e1       	ldi	r26, 0x10	; 16
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e8 2a       	or	r14, r24
     cb8:	f9 2a       	or	r15, r25
     cba:	0a 2b       	or	r16, r26
     cbc:	1b 2b       	or	r17, r27
     cbe:	a5 c0       	rjmp	.+330    	; 0xe0a <__pack_f+0x178>
     cc0:	84 30       	cpi	r24, 0x04	; 4
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <__pack_f+0x34>
     cc4:	9f c0       	rjmp	.+318    	; 0xe04 <__pack_f+0x172>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <__pack_f+0x40>
     cca:	ee 24       	eor	r14, r14
     ccc:	ff 24       	eor	r15, r15
     cce:	87 01       	movw	r16, r14
     cd0:	05 c0       	rjmp	.+10     	; 0xcdc <__pack_f+0x4a>
     cd2:	e1 14       	cp	r14, r1
     cd4:	f1 04       	cpc	r15, r1
     cd6:	01 05       	cpc	r16, r1
     cd8:	11 05       	cpc	r17, r1
     cda:	19 f4       	brne	.+6      	; 0xce2 <__pack_f+0x50>
     cdc:	e0 e0       	ldi	r30, 0x00	; 0
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	96 c0       	rjmp	.+300    	; 0xe0e <__pack_f+0x17c>
     ce2:	62 81       	ldd	r22, Z+2	; 0x02
     ce4:	73 81       	ldd	r23, Z+3	; 0x03
     ce6:	9f ef       	ldi	r25, 0xFF	; 255
     ce8:	62 38       	cpi	r22, 0x82	; 130
     cea:	79 07       	cpc	r23, r25
     cec:	0c f0       	brlt	.+2      	; 0xcf0 <__pack_f+0x5e>
     cee:	5b c0       	rjmp	.+182    	; 0xda6 <__pack_f+0x114>
     cf0:	22 e8       	ldi	r18, 0x82	; 130
     cf2:	3f ef       	ldi	r19, 0xFF	; 255
     cf4:	26 1b       	sub	r18, r22
     cf6:	37 0b       	sbc	r19, r23
     cf8:	2a 31       	cpi	r18, 0x1A	; 26
     cfa:	31 05       	cpc	r19, r1
     cfc:	2c f0       	brlt	.+10     	; 0xd08 <__pack_f+0x76>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	2a c0       	rjmp	.+84     	; 0xd5c <__pack_f+0xca>
     d08:	b8 01       	movw	r22, r16
     d0a:	a7 01       	movw	r20, r14
     d0c:	02 2e       	mov	r0, r18
     d0e:	04 c0       	rjmp	.+8      	; 0xd18 <__pack_f+0x86>
     d10:	76 95       	lsr	r23
     d12:	67 95       	ror	r22
     d14:	57 95       	ror	r21
     d16:	47 95       	ror	r20
     d18:	0a 94       	dec	r0
     d1a:	d2 f7       	brpl	.-12     	; 0xd10 <__pack_f+0x7e>
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a0 e0       	ldi	r26, 0x00	; 0
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <__pack_f+0x9c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	aa 1f       	adc	r26, r26
     d2c:	bb 1f       	adc	r27, r27
     d2e:	2a 95       	dec	r18
     d30:	d2 f7       	brpl	.-12     	; 0xd26 <__pack_f+0x94>
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	a1 09       	sbc	r26, r1
     d36:	b1 09       	sbc	r27, r1
     d38:	8e 21       	and	r24, r14
     d3a:	9f 21       	and	r25, r15
     d3c:	a0 23       	and	r26, r16
     d3e:	b1 23       	and	r27, r17
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	a1 05       	cpc	r26, r1
     d44:	b1 05       	cpc	r27, r1
     d46:	21 f0       	breq	.+8      	; 0xd50 <__pack_f+0xbe>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	9a 01       	movw	r18, r20
     d52:	ab 01       	movw	r20, r22
     d54:	28 2b       	or	r18, r24
     d56:	39 2b       	or	r19, r25
     d58:	4a 2b       	or	r20, r26
     d5a:	5b 2b       	or	r21, r27
     d5c:	da 01       	movw	r26, r20
     d5e:	c9 01       	movw	r24, r18
     d60:	8f 77       	andi	r24, 0x7F	; 127
     d62:	90 70       	andi	r25, 0x00	; 0
     d64:	a0 70       	andi	r26, 0x00	; 0
     d66:	b0 70       	andi	r27, 0x00	; 0
     d68:	80 34       	cpi	r24, 0x40	; 64
     d6a:	91 05       	cpc	r25, r1
     d6c:	a1 05       	cpc	r26, r1
     d6e:	b1 05       	cpc	r27, r1
     d70:	39 f4       	brne	.+14     	; 0xd80 <__pack_f+0xee>
     d72:	27 ff       	sbrs	r18, 7
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <__pack_f+0xf6>
     d76:	20 5c       	subi	r18, 0xC0	; 192
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	4f 4f       	sbci	r20, 0xFF	; 255
     d7c:	5f 4f       	sbci	r21, 0xFF	; 255
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <__pack_f+0xf6>
     d80:	21 5c       	subi	r18, 0xC1	; 193
     d82:	3f 4f       	sbci	r19, 0xFF	; 255
     d84:	4f 4f       	sbci	r20, 0xFF	; 255
     d86:	5f 4f       	sbci	r21, 0xFF	; 255
     d88:	e0 e0       	ldi	r30, 0x00	; 0
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	20 30       	cpi	r18, 0x00	; 0
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	3a 07       	cpc	r19, r26
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	4a 07       	cpc	r20, r26
     d96:	a0 e4       	ldi	r26, 0x40	; 64
     d98:	5a 07       	cpc	r21, r26
     d9a:	10 f0       	brcs	.+4      	; 0xda0 <__pack_f+0x10e>
     d9c:	e1 e0       	ldi	r30, 0x01	; 1
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	79 01       	movw	r14, r18
     da2:	8a 01       	movw	r16, r20
     da4:	27 c0       	rjmp	.+78     	; 0xdf4 <__pack_f+0x162>
     da6:	60 38       	cpi	r22, 0x80	; 128
     da8:	71 05       	cpc	r23, r1
     daa:	64 f5       	brge	.+88     	; 0xe04 <__pack_f+0x172>
     dac:	fb 01       	movw	r30, r22
     dae:	e1 58       	subi	r30, 0x81	; 129
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	d8 01       	movw	r26, r16
     db4:	c7 01       	movw	r24, r14
     db6:	8f 77       	andi	r24, 0x7F	; 127
     db8:	90 70       	andi	r25, 0x00	; 0
     dba:	a0 70       	andi	r26, 0x00	; 0
     dbc:	b0 70       	andi	r27, 0x00	; 0
     dbe:	80 34       	cpi	r24, 0x40	; 64
     dc0:	91 05       	cpc	r25, r1
     dc2:	a1 05       	cpc	r26, r1
     dc4:	b1 05       	cpc	r27, r1
     dc6:	39 f4       	brne	.+14     	; 0xdd6 <__pack_f+0x144>
     dc8:	e7 fe       	sbrs	r14, 7
     dca:	0d c0       	rjmp	.+26     	; 0xde6 <__pack_f+0x154>
     dcc:	80 e4       	ldi	r24, 0x40	; 64
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	a0 e0       	ldi	r26, 0x00	; 0
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	04 c0       	rjmp	.+8      	; 0xdde <__pack_f+0x14c>
     dd6:	8f e3       	ldi	r24, 0x3F	; 63
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 0e       	add	r14, r24
     de0:	f9 1e       	adc	r15, r25
     de2:	0a 1f       	adc	r16, r26
     de4:	1b 1f       	adc	r17, r27
     de6:	17 ff       	sbrs	r17, 7
     de8:	05 c0       	rjmp	.+10     	; 0xdf4 <__pack_f+0x162>
     dea:	16 95       	lsr	r17
     dec:	07 95       	ror	r16
     dee:	f7 94       	ror	r15
     df0:	e7 94       	ror	r14
     df2:	31 96       	adiw	r30, 0x01	; 1
     df4:	87 e0       	ldi	r24, 0x07	; 7
     df6:	16 95       	lsr	r17
     df8:	07 95       	ror	r16
     dfa:	f7 94       	ror	r15
     dfc:	e7 94       	ror	r14
     dfe:	8a 95       	dec	r24
     e00:	d1 f7       	brne	.-12     	; 0xdf6 <__pack_f+0x164>
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <__pack_f+0x17c>
     e04:	ee 24       	eor	r14, r14
     e06:	ff 24       	eor	r15, r15
     e08:	87 01       	movw	r16, r14
     e0a:	ef ef       	ldi	r30, 0xFF	; 255
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	6e 2f       	mov	r22, r30
     e10:	67 95       	ror	r22
     e12:	66 27       	eor	r22, r22
     e14:	67 95       	ror	r22
     e16:	90 2f       	mov	r25, r16
     e18:	9f 77       	andi	r25, 0x7F	; 127
     e1a:	d7 94       	ror	r13
     e1c:	dd 24       	eor	r13, r13
     e1e:	d7 94       	ror	r13
     e20:	8e 2f       	mov	r24, r30
     e22:	86 95       	lsr	r24
     e24:	49 2f       	mov	r20, r25
     e26:	46 2b       	or	r20, r22
     e28:	58 2f       	mov	r21, r24
     e2a:	5d 29       	or	r21, r13
     e2c:	b7 01       	movw	r22, r14
     e2e:	ca 01       	movw	r24, r20
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	08 95       	ret

00000e3c <__unpack_f>:
     e3c:	fc 01       	movw	r30, r24
     e3e:	db 01       	movw	r26, r22
     e40:	40 81       	ld	r20, Z
     e42:	51 81       	ldd	r21, Z+1	; 0x01
     e44:	22 81       	ldd	r18, Z+2	; 0x02
     e46:	62 2f       	mov	r22, r18
     e48:	6f 77       	andi	r22, 0x7F	; 127
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	22 1f       	adc	r18, r18
     e4e:	22 27       	eor	r18, r18
     e50:	22 1f       	adc	r18, r18
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	89 2f       	mov	r24, r25
     e56:	88 0f       	add	r24, r24
     e58:	82 2b       	or	r24, r18
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	99 1f       	adc	r25, r25
     e60:	99 27       	eor	r25, r25
     e62:	99 1f       	adc	r25, r25
     e64:	11 96       	adiw	r26, 0x01	; 1
     e66:	9c 93       	st	X, r25
     e68:	11 97       	sbiw	r26, 0x01	; 1
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	a9 f5       	brne	.+106    	; 0xeda <__unpack_f+0x9e>
     e70:	41 15       	cp	r20, r1
     e72:	51 05       	cpc	r21, r1
     e74:	61 05       	cpc	r22, r1
     e76:	71 05       	cpc	r23, r1
     e78:	11 f4       	brne	.+4      	; 0xe7e <__unpack_f+0x42>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	37 c0       	rjmp	.+110    	; 0xeec <__unpack_f+0xb0>
     e7e:	82 e8       	ldi	r24, 0x82	; 130
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	13 96       	adiw	r26, 0x03	; 3
     e84:	9c 93       	st	X, r25
     e86:	8e 93       	st	-X, r24
     e88:	12 97       	sbiw	r26, 0x02	; 2
     e8a:	9a 01       	movw	r18, r20
     e8c:	ab 01       	movw	r20, r22
     e8e:	67 e0       	ldi	r22, 0x07	; 7
     e90:	22 0f       	add	r18, r18
     e92:	33 1f       	adc	r19, r19
     e94:	44 1f       	adc	r20, r20
     e96:	55 1f       	adc	r21, r21
     e98:	6a 95       	dec	r22
     e9a:	d1 f7       	brne	.-12     	; 0xe90 <__unpack_f+0x54>
     e9c:	83 e0       	ldi	r24, 0x03	; 3
     e9e:	8c 93       	st	X, r24
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <__unpack_f+0x80>
     ea2:	22 0f       	add	r18, r18
     ea4:	33 1f       	adc	r19, r19
     ea6:	44 1f       	adc	r20, r20
     ea8:	55 1f       	adc	r21, r21
     eaa:	12 96       	adiw	r26, 0x02	; 2
     eac:	8d 91       	ld	r24, X+
     eae:	9c 91       	ld	r25, X
     eb0:	13 97       	sbiw	r26, 0x03	; 3
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	13 96       	adiw	r26, 0x03	; 3
     eb6:	9c 93       	st	X, r25
     eb8:	8e 93       	st	-X, r24
     eba:	12 97       	sbiw	r26, 0x02	; 2
     ebc:	20 30       	cpi	r18, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	38 07       	cpc	r19, r24
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	48 07       	cpc	r20, r24
     ec6:	80 e4       	ldi	r24, 0x40	; 64
     ec8:	58 07       	cpc	r21, r24
     eca:	58 f3       	brcs	.-42     	; 0xea2 <__unpack_f+0x66>
     ecc:	14 96       	adiw	r26, 0x04	; 4
     ece:	2d 93       	st	X+, r18
     ed0:	3d 93       	st	X+, r19
     ed2:	4d 93       	st	X+, r20
     ed4:	5c 93       	st	X, r21
     ed6:	17 97       	sbiw	r26, 0x07	; 7
     ed8:	08 95       	ret
     eda:	2f 3f       	cpi	r18, 0xFF	; 255
     edc:	31 05       	cpc	r19, r1
     ede:	79 f4       	brne	.+30     	; 0xefe <__unpack_f+0xc2>
     ee0:	41 15       	cp	r20, r1
     ee2:	51 05       	cpc	r21, r1
     ee4:	61 05       	cpc	r22, r1
     ee6:	71 05       	cpc	r23, r1
     ee8:	19 f4       	brne	.+6      	; 0xef0 <__unpack_f+0xb4>
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	8c 93       	st	X, r24
     eee:	08 95       	ret
     ef0:	64 ff       	sbrs	r22, 4
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <__unpack_f+0xbe>
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	8c 93       	st	X, r24
     ef8:	12 c0       	rjmp	.+36     	; 0xf1e <__unpack_f+0xe2>
     efa:	1c 92       	st	X, r1
     efc:	10 c0       	rjmp	.+32     	; 0xf1e <__unpack_f+0xe2>
     efe:	2f 57       	subi	r18, 0x7F	; 127
     f00:	30 40       	sbci	r19, 0x00	; 0
     f02:	13 96       	adiw	r26, 0x03	; 3
     f04:	3c 93       	st	X, r19
     f06:	2e 93       	st	-X, r18
     f08:	12 97       	sbiw	r26, 0x02	; 2
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	8c 93       	st	X, r24
     f0e:	87 e0       	ldi	r24, 0x07	; 7
     f10:	44 0f       	add	r20, r20
     f12:	55 1f       	adc	r21, r21
     f14:	66 1f       	adc	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	8a 95       	dec	r24
     f1a:	d1 f7       	brne	.-12     	; 0xf10 <__unpack_f+0xd4>
     f1c:	70 64       	ori	r23, 0x40	; 64
     f1e:	14 96       	adiw	r26, 0x04	; 4
     f20:	4d 93       	st	X+, r20
     f22:	5d 93       	st	X+, r21
     f24:	6d 93       	st	X+, r22
     f26:	7c 93       	st	X, r23
     f28:	17 97       	sbiw	r26, 0x07	; 7
     f2a:	08 95       	ret

00000f2c <__fpcmp_parts_f>:
     f2c:	1f 93       	push	r17
     f2e:	dc 01       	movw	r26, r24
     f30:	fb 01       	movw	r30, r22
     f32:	9c 91       	ld	r25, X
     f34:	92 30       	cpi	r25, 0x02	; 2
     f36:	08 f4       	brcc	.+2      	; 0xf3a <__fpcmp_parts_f+0xe>
     f38:	47 c0       	rjmp	.+142    	; 0xfc8 <__fpcmp_parts_f+0x9c>
     f3a:	80 81       	ld	r24, Z
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	08 f4       	brcc	.+2      	; 0xf42 <__fpcmp_parts_f+0x16>
     f40:	43 c0       	rjmp	.+134    	; 0xfc8 <__fpcmp_parts_f+0x9c>
     f42:	94 30       	cpi	r25, 0x04	; 4
     f44:	51 f4       	brne	.+20     	; 0xf5a <__fpcmp_parts_f+0x2e>
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	1c 91       	ld	r17, X
     f4a:	84 30       	cpi	r24, 0x04	; 4
     f4c:	99 f5       	brne	.+102    	; 0xfb4 <__fpcmp_parts_f+0x88>
     f4e:	81 81       	ldd	r24, Z+1	; 0x01
     f50:	68 2f       	mov	r22, r24
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	61 1b       	sub	r22, r17
     f56:	71 09       	sbc	r23, r1
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <__fpcmp_parts_f+0xac>
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	21 f0       	breq	.+8      	; 0xf66 <__fpcmp_parts_f+0x3a>
     f5e:	92 30       	cpi	r25, 0x02	; 2
     f60:	31 f4       	brne	.+12     	; 0xf6e <__fpcmp_parts_f+0x42>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	b9 f1       	breq	.+110    	; 0xfd4 <__fpcmp_parts_f+0xa8>
     f66:	81 81       	ldd	r24, Z+1	; 0x01
     f68:	88 23       	and	r24, r24
     f6a:	89 f1       	breq	.+98     	; 0xfce <__fpcmp_parts_f+0xa2>
     f6c:	2d c0       	rjmp	.+90     	; 0xfc8 <__fpcmp_parts_f+0x9c>
     f6e:	11 96       	adiw	r26, 0x01	; 1
     f70:	1c 91       	ld	r17, X
     f72:	11 97       	sbiw	r26, 0x01	; 1
     f74:	82 30       	cpi	r24, 0x02	; 2
     f76:	f1 f0       	breq	.+60     	; 0xfb4 <__fpcmp_parts_f+0x88>
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	18 17       	cp	r17, r24
     f7c:	d9 f4       	brne	.+54     	; 0xfb4 <__fpcmp_parts_f+0x88>
     f7e:	12 96       	adiw	r26, 0x02	; 2
     f80:	2d 91       	ld	r18, X+
     f82:	3c 91       	ld	r19, X
     f84:	13 97       	sbiw	r26, 0x03	; 3
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	82 17       	cp	r24, r18
     f8c:	93 07       	cpc	r25, r19
     f8e:	94 f0       	brlt	.+36     	; 0xfb4 <__fpcmp_parts_f+0x88>
     f90:	28 17       	cp	r18, r24
     f92:	39 07       	cpc	r19, r25
     f94:	bc f0       	brlt	.+46     	; 0xfc4 <__fpcmp_parts_f+0x98>
     f96:	14 96       	adiw	r26, 0x04	; 4
     f98:	8d 91       	ld	r24, X+
     f9a:	9d 91       	ld	r25, X+
     f9c:	0d 90       	ld	r0, X+
     f9e:	bc 91       	ld	r27, X
     fa0:	a0 2d       	mov	r26, r0
     fa2:	24 81       	ldd	r18, Z+4	; 0x04
     fa4:	35 81       	ldd	r19, Z+5	; 0x05
     fa6:	46 81       	ldd	r20, Z+6	; 0x06
     fa8:	57 81       	ldd	r21, Z+7	; 0x07
     faa:	28 17       	cp	r18, r24
     fac:	39 07       	cpc	r19, r25
     fae:	4a 07       	cpc	r20, r26
     fb0:	5b 07       	cpc	r21, r27
     fb2:	18 f4       	brcc	.+6      	; 0xfba <__fpcmp_parts_f+0x8e>
     fb4:	11 23       	and	r17, r17
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <__fpcmp_parts_f+0x9c>
     fb8:	0a c0       	rjmp	.+20     	; 0xfce <__fpcmp_parts_f+0xa2>
     fba:	82 17       	cp	r24, r18
     fbc:	93 07       	cpc	r25, r19
     fbe:	a4 07       	cpc	r26, r20
     fc0:	b5 07       	cpc	r27, r21
     fc2:	40 f4       	brcc	.+16     	; 0xfd4 <__fpcmp_parts_f+0xa8>
     fc4:	11 23       	and	r17, r17
     fc6:	19 f0       	breq	.+6      	; 0xfce <__fpcmp_parts_f+0xa2>
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	70 e0       	ldi	r23, 0x00	; 0
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <__fpcmp_parts_f+0xac>
     fce:	6f ef       	ldi	r22, 0xFF	; 255
     fd0:	7f ef       	ldi	r23, 0xFF	; 255
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <__fpcmp_parts_f+0xac>
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	cb 01       	movw	r24, r22
     fda:	1f 91       	pop	r17
     fdc:	08 95       	ret

00000fde <__prologue_saves__>:
     fde:	2f 92       	push	r2
     fe0:	3f 92       	push	r3
     fe2:	4f 92       	push	r4
     fe4:	5f 92       	push	r5
     fe6:	6f 92       	push	r6
     fe8:	7f 92       	push	r7
     fea:	8f 92       	push	r8
     fec:	9f 92       	push	r9
     fee:	af 92       	push	r10
     ff0:	bf 92       	push	r11
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	ca 1b       	sub	r28, r26
    1008:	db 0b       	sbc	r29, r27
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	09 94       	ijmp

00001016 <__epilogue_restores__>:
    1016:	2a 88       	ldd	r2, Y+18	; 0x12
    1018:	39 88       	ldd	r3, Y+17	; 0x11
    101a:	48 88       	ldd	r4, Y+16	; 0x10
    101c:	5f 84       	ldd	r5, Y+15	; 0x0f
    101e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1020:	7d 84       	ldd	r7, Y+13	; 0x0d
    1022:	8c 84       	ldd	r8, Y+12	; 0x0c
    1024:	9b 84       	ldd	r9, Y+11	; 0x0b
    1026:	aa 84       	ldd	r10, Y+10	; 0x0a
    1028:	b9 84       	ldd	r11, Y+9	; 0x09
    102a:	c8 84       	ldd	r12, Y+8	; 0x08
    102c:	df 80       	ldd	r13, Y+7	; 0x07
    102e:	ee 80       	ldd	r14, Y+6	; 0x06
    1030:	fd 80       	ldd	r15, Y+5	; 0x05
    1032:	0c 81       	ldd	r16, Y+4	; 0x04
    1034:	1b 81       	ldd	r17, Y+3	; 0x03
    1036:	aa 81       	ldd	r26, Y+2	; 0x02
    1038:	b9 81       	ldd	r27, Y+1	; 0x01
    103a:	ce 0f       	add	r28, r30
    103c:	d1 1d       	adc	r29, r1
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	ed 01       	movw	r28, r26
    104a:	08 95       	ret

0000104c <_exit>:
    104c:	f8 94       	cli

0000104e <__stop_program>:
    104e:	ff cf       	rjmp	.-2      	; 0x104e <__stop_program>
