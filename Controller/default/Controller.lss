
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00000b6c  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800168  00800168  00000d08  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000301  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018f0  00000000  00000000  00001109  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d4b  00000000  00000000  000029f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f67  00000000  00000000  00003744  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  000046ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  000048ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005e4  00000000  00000000  00004d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00005324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a8 e6       	ldi	r26, 0x68	; 104
  64:	b1 e0       	ldi	r27, 0x01	; 1
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ec e6       	ldi	r30, 0x6C	; 108
  78:	fb e0       	ldi	r31, 0x0B	; 11
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
  86:	0e 94 a5 01 	call	0x34a	; 0x34a <main>
  8a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outputs
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  a4:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  a6:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  ac:	11 ba       	out	0x11, r1	; 17
}
  ae:	08 95       	ret

000000b0 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  b0:	87 e4       	ldi	r24, 0x47	; 71
  b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  b4:	87 e8       	ldi	r24, 0x87	; 135
  b6:	86 b9       	out	0x06, r24	; 6
}
  b8:	08 95       	ret

000000ba <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  ba:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	89 bf       	out	0x39, r24	; 57
	sei();
  c4:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (1000*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  c6:	80 ea       	ldi	r24, 0xA0	; 160
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	99 bd       	out	0x29, r25	; 41
  cc:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  ce:	1d bc       	out	0x2d, r1	; 45
  d0:	1c bc       	out	0x2c, r1	; 44

}
  d2:	08 95       	ret

000000d4 <ledOFF>:
	start_addr = 0;
	
}

void ledOFF(){
	PORTB = 0x00;
  d4:	18 ba       	out	0x18, r1	; 24
}
  d6:	08 95       	ret

000000d8 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  d8:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  de:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  e0:	24 b1       	in	r18, 0x04	; 4
  e2:	35 b1       	in	r19, 0x05	; 5
}
  e4:	c9 01       	movw	r24, r18
  e6:	08 95       	ret

000000e8 <midi_Transmit>:



void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while((PINA & 0x02) && !(UCSRA & (1 << UDRE)) ) ;
  e8:	c9 9b       	sbis	0x19, 1	; 25
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <midi_Transmit+0x8>
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
  f0:	8c b9       	out	0x0c, r24	; 12
}
  f2:	08 95       	ret

000000f4 <playSong>:
	}
	stop_addr = eeprom_address;
	
}

void playSong(){
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	9d c0       	rjmp	.+314    	; 0x240 <playSong+0x14c>
	while(start_addr < stop_addr && (PINA & 0x02) ){
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
	}
	stop_addr = eeprom_address;
	
}

void playSong(){
 10a:	c9 01       	movw	r24, r18
 10c:	84 0f       	add	r24, r20
 10e:	95 1f       	adc	r25, r21
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 110:	e1 99       	sbic	0x1c, 1	; 28
 112:	fe cf       	rjmp	.-4      	; 0x110 <playSong+0x1c>
	/* Set up address register */
	EEAR = uiAddress;
 114:	9f bb       	out	0x1f, r25	; 31
 116:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 118:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 11a:	8d b3       	in	r24, 0x1d	; 29
	while(start_addr < stop_addr && (PINA & 0x02) ){
		float speedMod = 1;

		for(int i = 0; i < 5; i++){

			midiData[i] = EEPROM_read(start_addr);
 11c:	f9 01       	movw	r30, r18
 11e:	e6 58       	subi	r30, 0x86	; 134
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	80 83       	st	Z, r24
			start_addr++;
			if(i==4){
 124:	24 30       	cpi	r18, 0x04	; 4
 126:	31 05       	cpc	r19, r1
 128:	11 f4       	brne	.+4      	; 0x12e <playSong+0x3a>
				TCNT1 = 0;
 12a:	1d bc       	out	0x2d, r1	; 45
 12c:	1c bc       	out	0x2c, r1	; 44

void playSong(){
	while(start_addr < stop_addr && (PINA & 0x02) ){
		float speedMod = 1;

		for(int i = 0; i < 5; i++){
 12e:	2f 5f       	subi	r18, 0xFF	; 255
 130:	3f 4f       	sbci	r19, 0xFF	; 255
 132:	25 30       	cpi	r18, 0x05	; 5
 134:	31 05       	cpc	r19, r1
 136:	49 f7       	brne	.-46     	; 0x10a <playSong+0x16>
 138:	4b 5f       	subi	r20, 0xFB	; 251
 13a:	5f 4f       	sbci	r21, 0xFF	; 255
 13c:	50 93 75 01 	sts	0x0175, r21
 140:	40 93 74 01 	sts	0x0174, r20
			}
		}

		uint16_t lsb = midiData[3];
		uint16_t msb = midiData[4];
		uint16_t timeInterval = lsb + (0xFF00 & (msb << 8) );
 144:	d0 91 7e 01 	lds	r29, 0x017E
 148:	c0 e0       	ldi	r28, 0x00	; 0
 14a:	80 91 7d 01 	lds	r24, 0x017D
 14e:	6e 01       	movw	r12, r28
 150:	c8 0e       	add	r12, r24
 152:	d1 1c       	adc	r13, r1
		if((PINA & 0x02 ) && (PINA & 0x01)){
 154:	c9 9b       	sbis	0x19, 1	; 25
 156:	39 c0       	rjmp	.+114    	; 0x1ca <playSong+0xd6>
 158:	c8 9b       	sbis	0x19, 0	; 25
 15a:	37 c0       	rjmp	.+110    	; 0x1ca <playSong+0xd6>

		if(ReadADC() > 0 && ReadADC() < 60){
 15c:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 160:	89 2b       	or	r24, r25
 162:	79 f0       	breq	.+30     	; 0x182 <playSong+0x8e>
 164:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 168:	cc 97       	sbiw	r24, 0x3c	; 60
 16a:	58 f4       	brcc	.+22     	; 0x182 <playSong+0x8e>
 16c:	0f 2e       	mov	r0, r31
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	ef 2e       	mov	r14, r31
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	ff 2e       	mov	r15, r31
 176:	f0 e4       	ldi	r31, 0x40	; 64
 178:	0f 2f       	mov	r16, r31
 17a:	f0 e4       	ldi	r31, 0x40	; 64
 17c:	1f 2f       	mov	r17, r31
 17e:	f0 2d       	mov	r31, r0
 180:	2e c0       	rjmp	.+92     	; 0x1de <playSong+0xea>
			speedMod = 3;
		}else if(ReadADC() > 60 && ReadADC() < 200){
 182:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 186:	cd 97       	sbiw	r24, 0x3d	; 61
 188:	80 f0       	brcs	.+32     	; 0x1aa <playSong+0xb6>
 18a:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 18e:	88 3c       	cpi	r24, 0xC8	; 200
 190:	91 05       	cpc	r25, r1
 192:	58 f4       	brcc	.+22     	; 0x1aa <playSong+0xb6>
 194:	0f 2e       	mov	r0, r31
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ef 2e       	mov	r14, r31
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	ff 2e       	mov	r15, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	0f 2f       	mov	r16, r31
 1a2:	ff e3       	ldi	r31, 0x3F	; 63
 1a4:	1f 2f       	mov	r17, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	1a c0       	rjmp	.+52     	; 0x1de <playSong+0xea>
			speedMod = .5;
		}
		else if(ReadADC() > 200){
 1aa:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 1ae:	89 3c       	cpi	r24, 0xC9	; 201
 1b0:	91 05       	cpc	r25, r1
 1b2:	58 f0       	brcs	.+22     	; 0x1ca <playSong+0xd6>
 1b4:	0f 2e       	mov	r0, r31
 1b6:	fd ec       	ldi	r31, 0xCD	; 205
 1b8:	ef 2e       	mov	r14, r31
 1ba:	fc ec       	ldi	r31, 0xCC	; 204
 1bc:	ff 2e       	mov	r15, r31
 1be:	fc ec       	ldi	r31, 0xCC	; 204
 1c0:	0f 2f       	mov	r16, r31
 1c2:	fd e3       	ldi	r31, 0x3D	; 61
 1c4:	1f 2f       	mov	r17, r31
 1c6:	f0 2d       	mov	r31, r0
 1c8:	0a c0       	rjmp	.+20     	; 0x1de <playSong+0xea>
 1ca:	0f 2e       	mov	r0, r31
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	ef 2e       	mov	r14, r31
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ff 2e       	mov	r15, r31
 1d4:	f0 e8       	ldi	r31, 0x80	; 128
 1d6:	0f 2f       	mov	r16, r31
 1d8:	ff e3       	ldi	r31, 0x3F	; 63
 1da:	1f 2f       	mov	r17, r31
 1dc:	f0 2d       	mov	r31, r0
		}else{
			speedMod = 1;
		}
		

		if(start_addr != 5){
 1de:	80 91 74 01 	lds	r24, 0x0174
 1e2:	90 91 75 01 	lds	r25, 0x0175
 1e6:	05 97       	sbiw	r24, 0x05	; 5
 1e8:	b9 f0       	breq	.+46     	; 0x218 <playSong+0x124>
			while(TCNT1 < timeInterval * speedMod);
 1ea:	b6 01       	movw	r22, r12
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 0f 03 	call	0x61e	; 0x61e <__floatunsisf>
 1f4:	a8 01       	movw	r20, r16
 1f6:	97 01       	movw	r18, r14
 1f8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__mulsf3>
 1fc:	7b 01       	movw	r14, r22
 1fe:	8c 01       	movw	r16, r24
 200:	6c b5       	in	r22, 0x2c	; 44
 202:	7d b5       	in	r23, 0x2d	; 45
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 0f 03 	call	0x61e	; 0x61e <__floatunsisf>
 20c:	a8 01       	movw	r20, r16
 20e:	97 01       	movw	r18, r14
 210:	0e 94 df 02 	call	0x5be	; 0x5be <__ltsf2>
 214:	87 fd       	sbrc	r24, 7
 216:	f4 cf       	rjmp	.-24     	; 0x200 <playSong+0x10c>
 218:	00 e0       	ldi	r16, 0x00	; 0
 21a:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 21c:	f8 01       	movw	r30, r16
 21e:	e6 58       	subi	r30, 0x86	; 134
 220:	fe 4f       	sbci	r31, 0xFE	; 254
 222:	80 81       	ld	r24, Z
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 74 00 	call	0xe8	; 0xe8 <midi_Transmit>
			if(i==1){
 22a:	01 30       	cpi	r16, 0x01	; 1
 22c:	11 05       	cpc	r17, r1
 22e:	19 f4       	brne	.+6      	; 0x236 <playSong+0x142>
				PORTB = midiData[i];
 230:	80 91 7b 01 	lds	r24, 0x017B
 234:	88 bb       	out	0x18, r24	; 24

		if(start_addr != 5){
			while(TCNT1 < timeInterval * speedMod);
		}
		
		for(int i = 0; i < 3; i++){
 236:	0f 5f       	subi	r16, 0xFF	; 255
 238:	1f 4f       	sbci	r17, 0xFF	; 255
 23a:	03 30       	cpi	r16, 0x03	; 3
 23c:	11 05       	cpc	r17, r1
 23e:	71 f7       	brne	.-36     	; 0x21c <playSong+0x128>
	stop_addr = eeprom_address;
	
}

void playSong(){
	while(start_addr < stop_addr && (PINA & 0x02) ){
 240:	40 91 74 01 	lds	r20, 0x0174
 244:	50 91 75 01 	lds	r21, 0x0175
 248:	80 91 76 01 	lds	r24, 0x0176
 24c:	90 91 77 01 	lds	r25, 0x0177
 250:	48 17       	cp	r20, r24
 252:	59 07       	cpc	r21, r25
 254:	10 f4       	brcc	.+4      	; 0x25a <playSong+0x166>
 256:	c9 99       	sbic	0x19, 1	; 25
 258:	56 cf       	rjmp	.-340    	; 0x106 <playSong+0x12>
				PORTB = midiData[i];
			}		
		}
		
	}
	start_addr = 0;
 25a:	10 92 75 01 	sts	0x0175, r1
 25e:	10 92 74 01 	sts	0x0174, r1
	
}
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	08 95       	ret

00000274 <modify>:
	playSong();
}


void modify(){
	playSong();
 274:	0e 94 7a 00 	call	0xf4	; 0xf4 <playSong>
}
 278:	08 95       	ret

0000027a <playBack>:
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 27a:	0e 94 7a 00 	call	0xf4	; 0xf4 <playSong>
}
 27e:	08 95       	ret

00000280 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 280:	ca 9b       	sbis	0x19, 2	; 25
 282:	02 c0       	rjmp	.+4      	; 0x288 <midi_Receive+0x8>
 284:	5f 9b       	sbis	0x0b, 7	; 11
 286:	fc cf       	rjmp	.-8      	; 0x280 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 288:	8c b1       	in	r24, 0x0c	; 12
}
 28a:	08 95       	ret

0000028c <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 28c:	01 c0       	rjmp	.+2      	; 0x290 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 28e:	8c b1       	in	r24, 0x0c	; 12
 290:	5f 99       	sbic	0x0b, 7	; 11
 292:	fd cf       	rjmp	.-6      	; 0x28e <midi_Flush+0x2>
}
 294:	08 95       	ret

00000296 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 296:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 298:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 29a:	08 95       	ret

0000029c <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 29c:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 29e:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 2a0:	8c b5       	in	r24, 0x2c	; 44
 2a2:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 2a4:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 2a6:	08 95       	ret

000002a8 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 2a8:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 2aa:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 2ac:	9d bd       	out	0x2d, r25	; 45
 2ae:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 2b0:	2f bf       	out	0x3f, r18	; 63
}
 2b2:	08 95       	ret

000002b4 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 2b4:	e1 99       	sbic	0x1c, 1	; 28
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 2b8:	9f bb       	out	0x1f, r25	; 31
 2ba:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 2bc:	6d bb       	out	0x1d, r22	; 29


	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 2be:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 2c0:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 2c2:	08 95       	ret

000002c4 <writeSong2>:

}

/***** Create Methods *****/

void writeSong2(){
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 2cc:	ca 9b       	sbis	0x19, 2	; 25
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <writeSong2+0x10>
 2d0:	5f 9b       	sbis	0x0b, 7	; 11
 2d2:	fc cf       	rjmp	.-8      	; 0x2cc <writeSong2+0x8>

	/* get and return data from buffer */
	return UDR;
 2d4:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 2d6:	f9 01       	movw	r30, r18
 2d8:	e6 58       	subi	r30, 0x86	; 134
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	80 83       	st	Z, r24
		if(i==0){
 2de:	21 15       	cp	r18, r1
 2e0:	31 05       	cpc	r19, r1
 2e2:	39 f4       	brne	.+14     	; 0x2f2 <writeSong2+0x2e>
			 lsb = TCNT1&0xFF;
 2e4:	8c b5       	in	r24, 0x2c	; 44
 2e6:	9d b5       	in	r25, 0x2d	; 45
 2e8:	48 2f       	mov	r20, r24
			 msb = (TCNT1>>8);
 2ea:	8c b5       	in	r24, 0x2c	; 44
 2ec:	9d b5       	in	r25, 0x2d	; 45
			 TCNT1 = 0;
 2ee:	1d bc       	out	0x2d, r1	; 45
 2f0:	1c bc       	out	0x2c, r1	; 44
/***** Create Methods *****/

void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
 2f2:	2f 5f       	subi	r18, 0xFF	; 255
 2f4:	3f 4f       	sbci	r19, 0xFF	; 255
 2f6:	23 30       	cpi	r18, 0x03	; 3
 2f8:	31 05       	cpc	r19, r1
 2fa:	44 f3       	brlt	.-48     	; 0x2cc <writeSong2+0x8>
			 lsb = TCNT1&0xFF;
			 msb = (TCNT1>>8);
			 TCNT1 = 0;
		}
	}
	midiData[3]= lsb;
 2fc:	40 93 7d 01 	sts	0x017D, r20
	midiData[4]= msb;
 300:	90 93 7e 01 	sts	0x017E, r25
	PORTB = midiData[1];
 304:	80 91 7b 01 	lds	r24, 0x017B
 308:	88 bb       	out	0x18, r24	; 24
 30a:	ca e7       	ldi	r28, 0x7A	; 122
 30c:	d1 e0       	ldi	r29, 0x01	; 1
	
	
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 30e:	80 91 72 01 	lds	r24, 0x0172
 312:	90 91 73 01 	lds	r25, 0x0173
 316:	69 91       	ld	r22, Y+
 318:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <EEPROM_write>
		eeprom_address++;		
 31c:	80 91 72 01 	lds	r24, 0x0172
 320:	90 91 73 01 	lds	r25, 0x0173
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 73 01 	sts	0x0173, r25
 32a:	80 93 72 01 	sts	0x0172, r24
	midiData[3]= lsb;
	midiData[4]= msb;
	PORTB = midiData[1];
	
	
	for(int j= 0; j < 5; j++){
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	cf 37       	cpi	r28, 0x7F	; 127
 332:	d2 07       	cpc	r29, r18
 334:	61 f7       	brne	.-40     	; 0x30e <writeSong2+0x4a>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	stop_addr = eeprom_address;
 336:	90 93 77 01 	sts	0x0177, r25
 33a:	80 93 76 01 	sts	0x0176, r24
	
}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 344:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeSong2>
	//midiTransitTest();
}
 348:	08 95       	ret

0000034a <main>:
void playSong();
void writeSong2();


/***** Main Loop *****/
int main(void){
 34a:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outputs
 34c:	8f ef       	ldi	r24, 0xFF	; 255
 34e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 350:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 352:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 354:	17 e0       	ldi	r17, 0x07	; 7
 356:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 358:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 35a:	0e 94 5d 00 	call	0xba	; 0xba <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 35e:	87 e4       	ldi	r24, 0x47	; 71
 360:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 362:	87 e8       	ldi	r24, 0x87	; 135
 364:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 366:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 368:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 36a:	88 e1       	ldi	r24, 0x18	; 24
 36c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 36e:	86 e8       	ldi	r24, 0x86	; 134
 370:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BAUD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
 372:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
 374:	99 b3       	in	r25, 0x19	; 25
 376:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
 378:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
 37a:	82 ff       	sbrs	r24, 2
 37c:	05 c0       	rjmp	.+10     	; 0x388 <main+0x3e>
 37e:	99 23       	and	r25, r25
 380:	41 f4       	brne	.+16     	; 0x392 <main+0x48>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 382:	0e 94 62 01 	call	0x2c4	; 0x2c4 <writeSong2>
 386:	f5 cf       	rjmp	.-22     	; 0x372 <main+0x28>
		uint8_t play = PINA & 0x02;
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		} else if(play && !rec){
 388:	99 23       	and	r25, r25
 38a:	19 f0       	breq	.+6      	; 0x392 <main+0x48>
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 38c:	0e 94 7a 00 	call	0xf4	; 0xf4 <playSong>
 390:	f0 cf       	rjmp	.-32     	; 0x372 <main+0x28>
	start_addr = 0;
	
}

void ledOFF(){
	PORTB = 0x00;
 392:	18 ba       	out	0x18, r1	; 24

				playBack();
			}	
		} else {
			ledOFF();
			eeprom_address = 0x00;
 394:	10 92 73 01 	sts	0x0173, r1
 398:	10 92 72 01 	sts	0x0172, r1
 39c:	01 c0       	rjmp	.+2      	; 0x3a0 <main+0x56>
}

/* flushs the buffer of the midi */
void midi_Flush(void){ 
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 39e:	8c b1       	in	r24, 0x0c	; 12
 3a0:	5f 99       	sbic	0x0b, 7	; 11
 3a2:	fd cf       	rjmp	.-6      	; 0x39e <main+0x54>
 3a4:	e6 cf       	rjmp	.-52     	; 0x372 <main+0x28>

000003a6 <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 3a6:	e1 99       	sbic	0x1c, 1	; 28
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 3aa:	9f bb       	out	0x1f, r25	; 31
 3ac:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 3ae:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 3b0:	8d b3       	in	r24, 0x1d	; 29
}
 3b2:	08 95       	ret

000003b4 <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 3be:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

000003ca <__mulsf3>:
 3ca:	a0 e2       	ldi	r26, 0x20	; 32
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	eb ee       	ldi	r30, 0xEB	; 235
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__prologue_saves__>
 3d6:	69 83       	std	Y+1, r22	; 0x01
 3d8:	7a 83       	std	Y+2, r23	; 0x02
 3da:	8b 83       	std	Y+3, r24	; 0x03
 3dc:	9c 83       	std	Y+4, r25	; 0x04
 3de:	2d 83       	std	Y+5, r18	; 0x05
 3e0:	3e 83       	std	Y+6, r19	; 0x06
 3e2:	4f 83       	std	Y+7, r20	; 0x07
 3e4:	58 87       	std	Y+8, r21	; 0x08
 3e6:	ce 01       	movw	r24, r28
 3e8:	01 96       	adiw	r24, 0x01	; 1
 3ea:	be 01       	movw	r22, r28
 3ec:	67 5f       	subi	r22, 0xF7	; 247
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	0e 94 ac 04 	call	0x958	; 0x958 <__unpack_f>
 3f4:	ce 01       	movw	r24, r28
 3f6:	05 96       	adiw	r24, 0x05	; 5
 3f8:	be 01       	movw	r22, r28
 3fa:	6f 5e       	subi	r22, 0xEF	; 239
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255
 3fe:	0e 94 ac 04 	call	0x958	; 0x958 <__unpack_f>
 402:	99 85       	ldd	r25, Y+9	; 0x09
 404:	92 30       	cpi	r25, 0x02	; 2
 406:	88 f0       	brcs	.+34     	; 0x42a <__mulsf3+0x60>
 408:	89 89       	ldd	r24, Y+17	; 0x11
 40a:	82 30       	cpi	r24, 0x02	; 2
 40c:	c8 f0       	brcs	.+50     	; 0x440 <__mulsf3+0x76>
 40e:	94 30       	cpi	r25, 0x04	; 4
 410:	19 f4       	brne	.+6      	; 0x418 <__mulsf3+0x4e>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	51 f4       	brne	.+20     	; 0x42a <__mulsf3+0x60>
 416:	04 c0       	rjmp	.+8      	; 0x420 <__mulsf3+0x56>
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	29 f4       	brne	.+10     	; 0x426 <__mulsf3+0x5c>
 41c:	92 30       	cpi	r25, 0x02	; 2
 41e:	81 f4       	brne	.+32     	; 0x440 <__mulsf3+0x76>
 420:	80 e6       	ldi	r24, 0x60	; 96
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	c6 c0       	rjmp	.+396    	; 0x5b2 <__mulsf3+0x1e8>
 426:	92 30       	cpi	r25, 0x02	; 2
 428:	49 f4       	brne	.+18     	; 0x43c <__mulsf3+0x72>
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	9a 85       	ldd	r25, Y+10	; 0x0a
 42e:	8a 89       	ldd	r24, Y+18	; 0x12
 430:	98 13       	cpse	r25, r24
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	2a 87       	std	Y+10, r18	; 0x0a
 436:	ce 01       	movw	r24, r28
 438:	09 96       	adiw	r24, 0x09	; 9
 43a:	bb c0       	rjmp	.+374    	; 0x5b2 <__mulsf3+0x1e8>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	49 f4       	brne	.+18     	; 0x452 <__mulsf3+0x88>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	9a 85       	ldd	r25, Y+10	; 0x0a
 444:	8a 89       	ldd	r24, Y+18	; 0x12
 446:	98 13       	cpse	r25, r24
 448:	21 e0       	ldi	r18, 0x01	; 1
 44a:	2a 8b       	std	Y+18, r18	; 0x12
 44c:	ce 01       	movw	r24, r28
 44e:	41 96       	adiw	r24, 0x11	; 17
 450:	b0 c0       	rjmp	.+352    	; 0x5b2 <__mulsf3+0x1e8>
 452:	2d 84       	ldd	r2, Y+13	; 0x0d
 454:	3e 84       	ldd	r3, Y+14	; 0x0e
 456:	4f 84       	ldd	r4, Y+15	; 0x0f
 458:	58 88       	ldd	r5, Y+16	; 0x10
 45a:	6d 88       	ldd	r6, Y+21	; 0x15
 45c:	7e 88       	ldd	r7, Y+22	; 0x16
 45e:	8f 88       	ldd	r8, Y+23	; 0x17
 460:	98 8c       	ldd	r9, Y+24	; 0x18
 462:	ee 24       	eor	r14, r14
 464:	ff 24       	eor	r15, r15
 466:	87 01       	movw	r16, r14
 468:	aa 24       	eor	r10, r10
 46a:	bb 24       	eor	r11, r11
 46c:	65 01       	movw	r12, r10
 46e:	40 e0       	ldi	r20, 0x00	; 0
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	70 e0       	ldi	r23, 0x00	; 0
 476:	e0 e0       	ldi	r30, 0x00	; 0
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	c1 01       	movw	r24, r2
 47c:	81 70       	andi	r24, 0x01	; 1
 47e:	90 70       	andi	r25, 0x00	; 0
 480:	89 2b       	or	r24, r25
 482:	e9 f0       	breq	.+58     	; 0x4be <__mulsf3+0xf4>
 484:	e6 0c       	add	r14, r6
 486:	f7 1c       	adc	r15, r7
 488:	08 1d       	adc	r16, r8
 48a:	19 1d       	adc	r17, r9
 48c:	9a 01       	movw	r18, r20
 48e:	ab 01       	movw	r20, r22
 490:	2a 0d       	add	r18, r10
 492:	3b 1d       	adc	r19, r11
 494:	4c 1d       	adc	r20, r12
 496:	5d 1d       	adc	r21, r13
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	a0 e0       	ldi	r26, 0x00	; 0
 49e:	b0 e0       	ldi	r27, 0x00	; 0
 4a0:	e6 14       	cp	r14, r6
 4a2:	f7 04       	cpc	r15, r7
 4a4:	08 05       	cpc	r16, r8
 4a6:	19 05       	cpc	r17, r9
 4a8:	20 f4       	brcc	.+8      	; 0x4b2 <__mulsf3+0xe8>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	a0 e0       	ldi	r26, 0x00	; 0
 4b0:	b0 e0       	ldi	r27, 0x00	; 0
 4b2:	ba 01       	movw	r22, r20
 4b4:	a9 01       	movw	r20, r18
 4b6:	48 0f       	add	r20, r24
 4b8:	59 1f       	adc	r21, r25
 4ba:	6a 1f       	adc	r22, r26
 4bc:	7b 1f       	adc	r23, r27
 4be:	aa 0c       	add	r10, r10
 4c0:	bb 1c       	adc	r11, r11
 4c2:	cc 1c       	adc	r12, r12
 4c4:	dd 1c       	adc	r13, r13
 4c6:	97 fe       	sbrs	r9, 7
 4c8:	08 c0       	rjmp	.+16     	; 0x4da <__mulsf3+0x110>
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	a0 e0       	ldi	r26, 0x00	; 0
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	a8 2a       	or	r10, r24
 4d4:	b9 2a       	or	r11, r25
 4d6:	ca 2a       	or	r12, r26
 4d8:	db 2a       	or	r13, r27
 4da:	31 96       	adiw	r30, 0x01	; 1
 4dc:	e0 32       	cpi	r30, 0x20	; 32
 4de:	f1 05       	cpc	r31, r1
 4e0:	49 f0       	breq	.+18     	; 0x4f4 <__mulsf3+0x12a>
 4e2:	66 0c       	add	r6, r6
 4e4:	77 1c       	adc	r7, r7
 4e6:	88 1c       	adc	r8, r8
 4e8:	99 1c       	adc	r9, r9
 4ea:	56 94       	lsr	r5
 4ec:	47 94       	ror	r4
 4ee:	37 94       	ror	r3
 4f0:	27 94       	ror	r2
 4f2:	c3 cf       	rjmp	.-122    	; 0x47a <__mulsf3+0xb0>
 4f4:	fa 85       	ldd	r31, Y+10	; 0x0a
 4f6:	ea 89       	ldd	r30, Y+18	; 0x12
 4f8:	2b 89       	ldd	r18, Y+19	; 0x13
 4fa:	3c 89       	ldd	r19, Y+20	; 0x14
 4fc:	8b 85       	ldd	r24, Y+11	; 0x0b
 4fe:	9c 85       	ldd	r25, Y+12	; 0x0c
 500:	28 0f       	add	r18, r24
 502:	39 1f       	adc	r19, r25
 504:	2e 5f       	subi	r18, 0xFE	; 254
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	17 c0       	rjmp	.+46     	; 0x538 <__mulsf3+0x16e>
 50a:	ca 01       	movw	r24, r20
 50c:	81 70       	andi	r24, 0x01	; 1
 50e:	90 70       	andi	r25, 0x00	; 0
 510:	89 2b       	or	r24, r25
 512:	61 f0       	breq	.+24     	; 0x52c <__mulsf3+0x162>
 514:	16 95       	lsr	r17
 516:	07 95       	ror	r16
 518:	f7 94       	ror	r15
 51a:	e7 94       	ror	r14
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	a0 e0       	ldi	r26, 0x00	; 0
 522:	b0 e8       	ldi	r27, 0x80	; 128
 524:	e8 2a       	or	r14, r24
 526:	f9 2a       	or	r15, r25
 528:	0a 2b       	or	r16, r26
 52a:	1b 2b       	or	r17, r27
 52c:	76 95       	lsr	r23
 52e:	67 95       	ror	r22
 530:	57 95       	ror	r21
 532:	47 95       	ror	r20
 534:	2f 5f       	subi	r18, 0xFF	; 255
 536:	3f 4f       	sbci	r19, 0xFF	; 255
 538:	77 fd       	sbrc	r23, 7
 53a:	e7 cf       	rjmp	.-50     	; 0x50a <__mulsf3+0x140>
 53c:	0c c0       	rjmp	.+24     	; 0x556 <__mulsf3+0x18c>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	66 1f       	adc	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	17 fd       	sbrc	r17, 7
 548:	41 60       	ori	r20, 0x01	; 1
 54a:	ee 0c       	add	r14, r14
 54c:	ff 1c       	adc	r15, r15
 54e:	00 1f       	adc	r16, r16
 550:	11 1f       	adc	r17, r17
 552:	21 50       	subi	r18, 0x01	; 1
 554:	30 40       	sbci	r19, 0x00	; 0
 556:	40 30       	cpi	r20, 0x00	; 0
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	59 07       	cpc	r21, r25
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	69 07       	cpc	r22, r25
 560:	90 e4       	ldi	r25, 0x40	; 64
 562:	79 07       	cpc	r23, r25
 564:	60 f3       	brcs	.-40     	; 0x53e <__mulsf3+0x174>
 566:	2b 8f       	std	Y+27, r18	; 0x1b
 568:	3c 8f       	std	Y+28, r19	; 0x1c
 56a:	db 01       	movw	r26, r22
 56c:	ca 01       	movw	r24, r20
 56e:	8f 77       	andi	r24, 0x7F	; 127
 570:	90 70       	andi	r25, 0x00	; 0
 572:	a0 70       	andi	r26, 0x00	; 0
 574:	b0 70       	andi	r27, 0x00	; 0
 576:	80 34       	cpi	r24, 0x40	; 64
 578:	91 05       	cpc	r25, r1
 57a:	a1 05       	cpc	r26, r1
 57c:	b1 05       	cpc	r27, r1
 57e:	61 f4       	brne	.+24     	; 0x598 <__mulsf3+0x1ce>
 580:	47 fd       	sbrc	r20, 7
 582:	0a c0       	rjmp	.+20     	; 0x598 <__mulsf3+0x1ce>
 584:	e1 14       	cp	r14, r1
 586:	f1 04       	cpc	r15, r1
 588:	01 05       	cpc	r16, r1
 58a:	11 05       	cpc	r17, r1
 58c:	29 f0       	breq	.+10     	; 0x598 <__mulsf3+0x1ce>
 58e:	40 5c       	subi	r20, 0xC0	; 192
 590:	5f 4f       	sbci	r21, 0xFF	; 255
 592:	6f 4f       	sbci	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	40 78       	andi	r20, 0x80	; 128
 598:	1a 8e       	std	Y+26, r1	; 0x1a
 59a:	fe 17       	cp	r31, r30
 59c:	11 f0       	breq	.+4      	; 0x5a2 <__mulsf3+0x1d8>
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	8a 8f       	std	Y+26, r24	; 0x1a
 5a2:	4d 8f       	std	Y+29, r20	; 0x1d
 5a4:	5e 8f       	std	Y+30, r21	; 0x1e
 5a6:	6f 8f       	std	Y+31, r22	; 0x1f
 5a8:	78 a3       	std	Y+32, r23	; 0x20
 5aa:	83 e0       	ldi	r24, 0x03	; 3
 5ac:	89 8f       	std	Y+25, r24	; 0x19
 5ae:	ce 01       	movw	r24, r28
 5b0:	49 96       	adiw	r24, 0x19	; 25
 5b2:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__pack_f>
 5b6:	a0 96       	adiw	r28, 0x20	; 32
 5b8:	e2 e1       	ldi	r30, 0x12	; 18
 5ba:	0c 94 99 05 	jmp	0xb32	; 0xb32 <__epilogue_restores__>

000005be <__ltsf2>:
 5be:	a8 e1       	ldi	r26, 0x18	; 24
 5c0:	b0 e0       	ldi	r27, 0x00	; 0
 5c2:	e5 ee       	ldi	r30, 0xE5	; 229
 5c4:	f2 e0       	ldi	r31, 0x02	; 2
 5c6:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__prologue_saves__+0x18>
 5ca:	69 83       	std	Y+1, r22	; 0x01
 5cc:	7a 83       	std	Y+2, r23	; 0x02
 5ce:	8b 83       	std	Y+3, r24	; 0x03
 5d0:	9c 83       	std	Y+4, r25	; 0x04
 5d2:	2d 83       	std	Y+5, r18	; 0x05
 5d4:	3e 83       	std	Y+6, r19	; 0x06
 5d6:	4f 83       	std	Y+7, r20	; 0x07
 5d8:	58 87       	std	Y+8, r21	; 0x08
 5da:	89 e0       	ldi	r24, 0x09	; 9
 5dc:	e8 2e       	mov	r14, r24
 5de:	f1 2c       	mov	r15, r1
 5e0:	ec 0e       	add	r14, r28
 5e2:	fd 1e       	adc	r15, r29
 5e4:	ce 01       	movw	r24, r28
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	b7 01       	movw	r22, r14
 5ea:	0e 94 ac 04 	call	0x958	; 0x958 <__unpack_f>
 5ee:	8e 01       	movw	r16, r28
 5f0:	0f 5e       	subi	r16, 0xEF	; 239
 5f2:	1f 4f       	sbci	r17, 0xFF	; 255
 5f4:	ce 01       	movw	r24, r28
 5f6:	05 96       	adiw	r24, 0x05	; 5
 5f8:	b8 01       	movw	r22, r16
 5fa:	0e 94 ac 04 	call	0x958	; 0x958 <__unpack_f>
 5fe:	89 85       	ldd	r24, Y+9	; 0x09
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	40 f0       	brcs	.+16     	; 0x614 <__ltsf2+0x56>
 604:	89 89       	ldd	r24, Y+17	; 0x11
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	28 f0       	brcs	.+10     	; 0x614 <__ltsf2+0x56>
 60a:	c7 01       	movw	r24, r14
 60c:	b8 01       	movw	r22, r16
 60e:	0e 94 24 05 	call	0xa48	; 0xa48 <__fpcmp_parts_f>
 612:	01 c0       	rjmp	.+2      	; 0x616 <__ltsf2+0x58>
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	68 96       	adiw	r28, 0x18	; 24
 618:	e6 e0       	ldi	r30, 0x06	; 6
 61a:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__epilogue_restores__+0x18>

0000061e <__floatunsisf>:
 61e:	a8 e0       	ldi	r26, 0x08	; 8
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	e5 e1       	ldi	r30, 0x15	; 21
 624:	f3 e0       	ldi	r31, 0x03	; 3
 626:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__prologue_saves__+0x10>
 62a:	7b 01       	movw	r14, r22
 62c:	8c 01       	movw	r16, r24
 62e:	61 15       	cp	r22, r1
 630:	71 05       	cpc	r23, r1
 632:	81 05       	cpc	r24, r1
 634:	91 05       	cpc	r25, r1
 636:	19 f4       	brne	.+6      	; 0x63e <__floatunsisf+0x20>
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	60 c0       	rjmp	.+192    	; 0x6fe <__floatunsisf+0xe0>
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	89 83       	std	Y+1, r24	; 0x01
 642:	8e e1       	ldi	r24, 0x1E	; 30
 644:	c8 2e       	mov	r12, r24
 646:	d1 2c       	mov	r13, r1
 648:	dc 82       	std	Y+4, r13	; 0x04
 64a:	cb 82       	std	Y+3, r12	; 0x03
 64c:	ed 82       	std	Y+5, r14	; 0x05
 64e:	fe 82       	std	Y+6, r15	; 0x06
 650:	0f 83       	std	Y+7, r16	; 0x07
 652:	18 87       	std	Y+8, r17	; 0x08
 654:	c8 01       	movw	r24, r16
 656:	b7 01       	movw	r22, r14
 658:	0e 94 88 03 	call	0x710	; 0x710 <__clzsi2>
 65c:	fc 01       	movw	r30, r24
 65e:	31 97       	sbiw	r30, 0x01	; 1
 660:	f7 ff       	sbrs	r31, 7
 662:	3b c0       	rjmp	.+118    	; 0x6da <__floatunsisf+0xbc>
 664:	22 27       	eor	r18, r18
 666:	33 27       	eor	r19, r19
 668:	2e 1b       	sub	r18, r30
 66a:	3f 0b       	sbc	r19, r31
 66c:	57 01       	movw	r10, r14
 66e:	68 01       	movw	r12, r16
 670:	02 2e       	mov	r0, r18
 672:	04 c0       	rjmp	.+8      	; 0x67c <__floatunsisf+0x5e>
 674:	d6 94       	lsr	r13
 676:	c7 94       	ror	r12
 678:	b7 94       	ror	r11
 67a:	a7 94       	ror	r10
 67c:	0a 94       	dec	r0
 67e:	d2 f7       	brpl	.-12     	; 0x674 <__floatunsisf+0x56>
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	a0 e0       	ldi	r26, 0x00	; 0
 68e:	b0 e0       	ldi	r27, 0x00	; 0
 690:	04 c0       	rjmp	.+8      	; 0x69a <__floatunsisf+0x7c>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	aa 1f       	adc	r26, r26
 698:	bb 1f       	adc	r27, r27
 69a:	2a 95       	dec	r18
 69c:	d2 f7       	brpl	.-12     	; 0x692 <__floatunsisf+0x74>
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	a1 09       	sbc	r26, r1
 6a2:	b1 09       	sbc	r27, r1
 6a4:	8e 21       	and	r24, r14
 6a6:	9f 21       	and	r25, r15
 6a8:	a0 23       	and	r26, r16
 6aa:	b1 23       	and	r27, r17
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	a1 05       	cpc	r26, r1
 6b0:	b1 05       	cpc	r27, r1
 6b2:	21 f0       	breq	.+8      	; 0x6bc <__floatunsisf+0x9e>
 6b4:	41 e0       	ldi	r20, 0x01	; 1
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	4a 29       	or	r20, r10
 6be:	5b 29       	or	r21, r11
 6c0:	6c 29       	or	r22, r12
 6c2:	7d 29       	or	r23, r13
 6c4:	4d 83       	std	Y+5, r20	; 0x05
 6c6:	5e 83       	std	Y+6, r21	; 0x06
 6c8:	6f 83       	std	Y+7, r22	; 0x07
 6ca:	78 87       	std	Y+8, r23	; 0x08
 6cc:	8e e1       	ldi	r24, 0x1E	; 30
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	8e 1b       	sub	r24, r30
 6d2:	9f 0b       	sbc	r25, r31
 6d4:	9c 83       	std	Y+4, r25	; 0x04
 6d6:	8b 83       	std	Y+3, r24	; 0x03
 6d8:	12 c0       	rjmp	.+36     	; 0x6fe <__floatunsisf+0xe0>
 6da:	30 97       	sbiw	r30, 0x00	; 0
 6dc:	81 f0       	breq	.+32     	; 0x6fe <__floatunsisf+0xe0>
 6de:	0e 2e       	mov	r0, r30
 6e0:	04 c0       	rjmp	.+8      	; 0x6ea <__floatunsisf+0xcc>
 6e2:	ee 0c       	add	r14, r14
 6e4:	ff 1c       	adc	r15, r15
 6e6:	00 1f       	adc	r16, r16
 6e8:	11 1f       	adc	r17, r17
 6ea:	0a 94       	dec	r0
 6ec:	d2 f7       	brpl	.-12     	; 0x6e2 <__floatunsisf+0xc4>
 6ee:	ed 82       	std	Y+5, r14	; 0x05
 6f0:	fe 82       	std	Y+6, r15	; 0x06
 6f2:	0f 83       	std	Y+7, r16	; 0x07
 6f4:	18 87       	std	Y+8, r17	; 0x08
 6f6:	ce 1a       	sub	r12, r30
 6f8:	df 0a       	sbc	r13, r31
 6fa:	dc 82       	std	Y+4, r13	; 0x04
 6fc:	cb 82       	std	Y+3, r12	; 0x03
 6fe:	1a 82       	std	Y+2, r1	; 0x02
 700:	ce 01       	movw	r24, r28
 702:	01 96       	adiw	r24, 0x01	; 1
 704:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__pack_f>
 708:	28 96       	adiw	r28, 0x08	; 8
 70a:	ea e0       	ldi	r30, 0x0A	; 10
 70c:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__epilogue_restores__+0x10>

00000710 <__clzsi2>:
 710:	ef 92       	push	r14
 712:	ff 92       	push	r15
 714:	0f 93       	push	r16
 716:	1f 93       	push	r17
 718:	7b 01       	movw	r14, r22
 71a:	8c 01       	movw	r16, r24
 71c:	80 e0       	ldi	r24, 0x00	; 0
 71e:	e8 16       	cp	r14, r24
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	f8 06       	cpc	r15, r24
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 07       	cpc	r16, r24
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	18 07       	cpc	r17, r24
 72c:	88 f4       	brcc	.+34     	; 0x750 <__clzsi2+0x40>
 72e:	8f ef       	ldi	r24, 0xFF	; 255
 730:	e8 16       	cp	r14, r24
 732:	f1 04       	cpc	r15, r1
 734:	01 05       	cpc	r16, r1
 736:	11 05       	cpc	r17, r1
 738:	31 f0       	breq	.+12     	; 0x746 <__clzsi2+0x36>
 73a:	28 f0       	brcs	.+10     	; 0x746 <__clzsi2+0x36>
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	a0 e0       	ldi	r26, 0x00	; 0
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	17 c0       	rjmp	.+46     	; 0x774 <__clzsi2+0x64>
 746:	80 e0       	ldi	r24, 0x00	; 0
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	a0 e0       	ldi	r26, 0x00	; 0
 74c:	b0 e0       	ldi	r27, 0x00	; 0
 74e:	12 c0       	rjmp	.+36     	; 0x774 <__clzsi2+0x64>
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	e8 16       	cp	r14, r24
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	f8 06       	cpc	r15, r24
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 07       	cpc	r16, r24
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	18 07       	cpc	r17, r24
 760:	28 f0       	brcs	.+10     	; 0x76c <__clzsi2+0x5c>
 762:	88 e1       	ldi	r24, 0x18	; 24
 764:	90 e0       	ldi	r25, 0x00	; 0
 766:	a0 e0       	ldi	r26, 0x00	; 0
 768:	b0 e0       	ldi	r27, 0x00	; 0
 76a:	04 c0       	rjmp	.+8      	; 0x774 <__clzsi2+0x64>
 76c:	80 e1       	ldi	r24, 0x10	; 16
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	a0 e0       	ldi	r26, 0x00	; 0
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	20 e2       	ldi	r18, 0x20	; 32
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	40 e0       	ldi	r20, 0x00	; 0
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	28 1b       	sub	r18, r24
 77e:	39 0b       	sbc	r19, r25
 780:	4a 0b       	sbc	r20, r26
 782:	5b 0b       	sbc	r21, r27
 784:	04 c0       	rjmp	.+8      	; 0x78e <__clzsi2+0x7e>
 786:	16 95       	lsr	r17
 788:	07 95       	ror	r16
 78a:	f7 94       	ror	r15
 78c:	e7 94       	ror	r14
 78e:	8a 95       	dec	r24
 790:	d2 f7       	brpl	.-12     	; 0x786 <__clzsi2+0x76>
 792:	f7 01       	movw	r30, r14
 794:	e8 59       	subi	r30, 0x98	; 152
 796:	ff 4f       	sbci	r31, 0xFF	; 255
 798:	80 81       	ld	r24, Z
 79a:	28 1b       	sub	r18, r24
 79c:	31 09       	sbc	r19, r1
 79e:	41 09       	sbc	r20, r1
 7a0:	51 09       	sbc	r21, r1
 7a2:	c9 01       	movw	r24, r18
 7a4:	1f 91       	pop	r17
 7a6:	0f 91       	pop	r16
 7a8:	ff 90       	pop	r15
 7aa:	ef 90       	pop	r14
 7ac:	08 95       	ret

000007ae <__pack_f>:
 7ae:	df 92       	push	r13
 7b0:	ef 92       	push	r14
 7b2:	ff 92       	push	r15
 7b4:	0f 93       	push	r16
 7b6:	1f 93       	push	r17
 7b8:	fc 01       	movw	r30, r24
 7ba:	e4 80       	ldd	r14, Z+4	; 0x04
 7bc:	f5 80       	ldd	r15, Z+5	; 0x05
 7be:	06 81       	ldd	r16, Z+6	; 0x06
 7c0:	17 81       	ldd	r17, Z+7	; 0x07
 7c2:	d1 80       	ldd	r13, Z+1	; 0x01
 7c4:	80 81       	ld	r24, Z
 7c6:	82 30       	cpi	r24, 0x02	; 2
 7c8:	48 f4       	brcc	.+18     	; 0x7dc <__pack_f+0x2e>
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	a0 e1       	ldi	r26, 0x10	; 16
 7d0:	b0 e0       	ldi	r27, 0x00	; 0
 7d2:	e8 2a       	or	r14, r24
 7d4:	f9 2a       	or	r15, r25
 7d6:	0a 2b       	or	r16, r26
 7d8:	1b 2b       	or	r17, r27
 7da:	a5 c0       	rjmp	.+330    	; 0x926 <__stack+0xc7>
 7dc:	84 30       	cpi	r24, 0x04	; 4
 7de:	09 f4       	brne	.+2      	; 0x7e2 <__pack_f+0x34>
 7e0:	9f c0       	rjmp	.+318    	; 0x920 <__stack+0xc1>
 7e2:	82 30       	cpi	r24, 0x02	; 2
 7e4:	21 f4       	brne	.+8      	; 0x7ee <__pack_f+0x40>
 7e6:	ee 24       	eor	r14, r14
 7e8:	ff 24       	eor	r15, r15
 7ea:	87 01       	movw	r16, r14
 7ec:	05 c0       	rjmp	.+10     	; 0x7f8 <__pack_f+0x4a>
 7ee:	e1 14       	cp	r14, r1
 7f0:	f1 04       	cpc	r15, r1
 7f2:	01 05       	cpc	r16, r1
 7f4:	11 05       	cpc	r17, r1
 7f6:	19 f4       	brne	.+6      	; 0x7fe <__pack_f+0x50>
 7f8:	e0 e0       	ldi	r30, 0x00	; 0
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	96 c0       	rjmp	.+300    	; 0x92a <__stack+0xcb>
 7fe:	62 81       	ldd	r22, Z+2	; 0x02
 800:	73 81       	ldd	r23, Z+3	; 0x03
 802:	9f ef       	ldi	r25, 0xFF	; 255
 804:	62 38       	cpi	r22, 0x82	; 130
 806:	79 07       	cpc	r23, r25
 808:	0c f0       	brlt	.+2      	; 0x80c <__pack_f+0x5e>
 80a:	5b c0       	rjmp	.+182    	; 0x8c2 <__stack+0x63>
 80c:	22 e8       	ldi	r18, 0x82	; 130
 80e:	3f ef       	ldi	r19, 0xFF	; 255
 810:	26 1b       	sub	r18, r22
 812:	37 0b       	sbc	r19, r23
 814:	2a 31       	cpi	r18, 0x1A	; 26
 816:	31 05       	cpc	r19, r1
 818:	2c f0       	brlt	.+10     	; 0x824 <__pack_f+0x76>
 81a:	20 e0       	ldi	r18, 0x00	; 0
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	40 e0       	ldi	r20, 0x00	; 0
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	2a c0       	rjmp	.+84     	; 0x878 <__stack+0x19>
 824:	b8 01       	movw	r22, r16
 826:	a7 01       	movw	r20, r14
 828:	02 2e       	mov	r0, r18
 82a:	04 c0       	rjmp	.+8      	; 0x834 <__pack_f+0x86>
 82c:	76 95       	lsr	r23
 82e:	67 95       	ror	r22
 830:	57 95       	ror	r21
 832:	47 95       	ror	r20
 834:	0a 94       	dec	r0
 836:	d2 f7       	brpl	.-12     	; 0x82c <__pack_f+0x7e>
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	a0 e0       	ldi	r26, 0x00	; 0
 83e:	b0 e0       	ldi	r27, 0x00	; 0
 840:	04 c0       	rjmp	.+8      	; 0x84a <__pack_f+0x9c>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	aa 1f       	adc	r26, r26
 848:	bb 1f       	adc	r27, r27
 84a:	2a 95       	dec	r18
 84c:	d2 f7       	brpl	.-12     	; 0x842 <__pack_f+0x94>
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	a1 09       	sbc	r26, r1
 852:	b1 09       	sbc	r27, r1
 854:	8e 21       	and	r24, r14
 856:	9f 21       	and	r25, r15
 858:	a0 23       	and	r26, r16
 85a:	b1 23       	and	r27, r17
 85c:	00 97       	sbiw	r24, 0x00	; 0
 85e:	a1 05       	cpc	r26, r1
 860:	b1 05       	cpc	r27, r1
 862:	21 f0       	breq	.+8      	; 0x86c <__stack+0xd>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	a0 e0       	ldi	r26, 0x00	; 0
 86a:	b0 e0       	ldi	r27, 0x00	; 0
 86c:	9a 01       	movw	r18, r20
 86e:	ab 01       	movw	r20, r22
 870:	28 2b       	or	r18, r24
 872:	39 2b       	or	r19, r25
 874:	4a 2b       	or	r20, r26
 876:	5b 2b       	or	r21, r27
 878:	da 01       	movw	r26, r20
 87a:	c9 01       	movw	r24, r18
 87c:	8f 77       	andi	r24, 0x7F	; 127
 87e:	90 70       	andi	r25, 0x00	; 0
 880:	a0 70       	andi	r26, 0x00	; 0
 882:	b0 70       	andi	r27, 0x00	; 0
 884:	80 34       	cpi	r24, 0x40	; 64
 886:	91 05       	cpc	r25, r1
 888:	a1 05       	cpc	r26, r1
 88a:	b1 05       	cpc	r27, r1
 88c:	39 f4       	brne	.+14     	; 0x89c <__stack+0x3d>
 88e:	27 ff       	sbrs	r18, 7
 890:	09 c0       	rjmp	.+18     	; 0x8a4 <__stack+0x45>
 892:	20 5c       	subi	r18, 0xC0	; 192
 894:	3f 4f       	sbci	r19, 0xFF	; 255
 896:	4f 4f       	sbci	r20, 0xFF	; 255
 898:	5f 4f       	sbci	r21, 0xFF	; 255
 89a:	04 c0       	rjmp	.+8      	; 0x8a4 <__stack+0x45>
 89c:	21 5c       	subi	r18, 0xC1	; 193
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	4f 4f       	sbci	r20, 0xFF	; 255
 8a2:	5f 4f       	sbci	r21, 0xFF	; 255
 8a4:	e0 e0       	ldi	r30, 0x00	; 0
 8a6:	f0 e0       	ldi	r31, 0x00	; 0
 8a8:	20 30       	cpi	r18, 0x00	; 0
 8aa:	a0 e0       	ldi	r26, 0x00	; 0
 8ac:	3a 07       	cpc	r19, r26
 8ae:	a0 e0       	ldi	r26, 0x00	; 0
 8b0:	4a 07       	cpc	r20, r26
 8b2:	a0 e4       	ldi	r26, 0x40	; 64
 8b4:	5a 07       	cpc	r21, r26
 8b6:	10 f0       	brcs	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	e1 e0       	ldi	r30, 0x01	; 1
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	79 01       	movw	r14, r18
 8be:	8a 01       	movw	r16, r20
 8c0:	27 c0       	rjmp	.+78     	; 0x910 <__stack+0xb1>
 8c2:	60 38       	cpi	r22, 0x80	; 128
 8c4:	71 05       	cpc	r23, r1
 8c6:	64 f5       	brge	.+88     	; 0x920 <__stack+0xc1>
 8c8:	fb 01       	movw	r30, r22
 8ca:	e1 58       	subi	r30, 0x81	; 129
 8cc:	ff 4f       	sbci	r31, 0xFF	; 255
 8ce:	d8 01       	movw	r26, r16
 8d0:	c7 01       	movw	r24, r14
 8d2:	8f 77       	andi	r24, 0x7F	; 127
 8d4:	90 70       	andi	r25, 0x00	; 0
 8d6:	a0 70       	andi	r26, 0x00	; 0
 8d8:	b0 70       	andi	r27, 0x00	; 0
 8da:	80 34       	cpi	r24, 0x40	; 64
 8dc:	91 05       	cpc	r25, r1
 8de:	a1 05       	cpc	r26, r1
 8e0:	b1 05       	cpc	r27, r1
 8e2:	39 f4       	brne	.+14     	; 0x8f2 <__stack+0x93>
 8e4:	e7 fe       	sbrs	r14, 7
 8e6:	0d c0       	rjmp	.+26     	; 0x902 <__stack+0xa3>
 8e8:	80 e4       	ldi	r24, 0x40	; 64
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	a0 e0       	ldi	r26, 0x00	; 0
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__stack+0x9b>
 8f2:	8f e3       	ldi	r24, 0x3F	; 63
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	a0 e0       	ldi	r26, 0x00	; 0
 8f8:	b0 e0       	ldi	r27, 0x00	; 0
 8fa:	e8 0e       	add	r14, r24
 8fc:	f9 1e       	adc	r15, r25
 8fe:	0a 1f       	adc	r16, r26
 900:	1b 1f       	adc	r17, r27
 902:	17 ff       	sbrs	r17, 7
 904:	05 c0       	rjmp	.+10     	; 0x910 <__stack+0xb1>
 906:	16 95       	lsr	r17
 908:	07 95       	ror	r16
 90a:	f7 94       	ror	r15
 90c:	e7 94       	ror	r14
 90e:	31 96       	adiw	r30, 0x01	; 1
 910:	87 e0       	ldi	r24, 0x07	; 7
 912:	16 95       	lsr	r17
 914:	07 95       	ror	r16
 916:	f7 94       	ror	r15
 918:	e7 94       	ror	r14
 91a:	8a 95       	dec	r24
 91c:	d1 f7       	brne	.-12     	; 0x912 <__stack+0xb3>
 91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0xcb>
 920:	ee 24       	eor	r14, r14
 922:	ff 24       	eor	r15, r15
 924:	87 01       	movw	r16, r14
 926:	ef ef       	ldi	r30, 0xFF	; 255
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	6e 2f       	mov	r22, r30
 92c:	67 95       	ror	r22
 92e:	66 27       	eor	r22, r22
 930:	67 95       	ror	r22
 932:	90 2f       	mov	r25, r16
 934:	9f 77       	andi	r25, 0x7F	; 127
 936:	d7 94       	ror	r13
 938:	dd 24       	eor	r13, r13
 93a:	d7 94       	ror	r13
 93c:	8e 2f       	mov	r24, r30
 93e:	86 95       	lsr	r24
 940:	49 2f       	mov	r20, r25
 942:	46 2b       	or	r20, r22
 944:	58 2f       	mov	r21, r24
 946:	5d 29       	or	r21, r13
 948:	b7 01       	movw	r22, r14
 94a:	ca 01       	movw	r24, r20
 94c:	1f 91       	pop	r17
 94e:	0f 91       	pop	r16
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	df 90       	pop	r13
 956:	08 95       	ret

00000958 <__unpack_f>:
 958:	fc 01       	movw	r30, r24
 95a:	db 01       	movw	r26, r22
 95c:	40 81       	ld	r20, Z
 95e:	51 81       	ldd	r21, Z+1	; 0x01
 960:	22 81       	ldd	r18, Z+2	; 0x02
 962:	62 2f       	mov	r22, r18
 964:	6f 77       	andi	r22, 0x7F	; 127
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	22 1f       	adc	r18, r18
 96a:	22 27       	eor	r18, r18
 96c:	22 1f       	adc	r18, r18
 96e:	93 81       	ldd	r25, Z+3	; 0x03
 970:	89 2f       	mov	r24, r25
 972:	88 0f       	add	r24, r24
 974:	82 2b       	or	r24, r18
 976:	28 2f       	mov	r18, r24
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	99 1f       	adc	r25, r25
 97c:	99 27       	eor	r25, r25
 97e:	99 1f       	adc	r25, r25
 980:	11 96       	adiw	r26, 0x01	; 1
 982:	9c 93       	st	X, r25
 984:	11 97       	sbiw	r26, 0x01	; 1
 986:	21 15       	cp	r18, r1
 988:	31 05       	cpc	r19, r1
 98a:	a9 f5       	brne	.+106    	; 0x9f6 <__unpack_f+0x9e>
 98c:	41 15       	cp	r20, r1
 98e:	51 05       	cpc	r21, r1
 990:	61 05       	cpc	r22, r1
 992:	71 05       	cpc	r23, r1
 994:	11 f4       	brne	.+4      	; 0x99a <__unpack_f+0x42>
 996:	82 e0       	ldi	r24, 0x02	; 2
 998:	37 c0       	rjmp	.+110    	; 0xa08 <__unpack_f+0xb0>
 99a:	82 e8       	ldi	r24, 0x82	; 130
 99c:	9f ef       	ldi	r25, 0xFF	; 255
 99e:	13 96       	adiw	r26, 0x03	; 3
 9a0:	9c 93       	st	X, r25
 9a2:	8e 93       	st	-X, r24
 9a4:	12 97       	sbiw	r26, 0x02	; 2
 9a6:	9a 01       	movw	r18, r20
 9a8:	ab 01       	movw	r20, r22
 9aa:	67 e0       	ldi	r22, 0x07	; 7
 9ac:	22 0f       	add	r18, r18
 9ae:	33 1f       	adc	r19, r19
 9b0:	44 1f       	adc	r20, r20
 9b2:	55 1f       	adc	r21, r21
 9b4:	6a 95       	dec	r22
 9b6:	d1 f7       	brne	.-12     	; 0x9ac <__unpack_f+0x54>
 9b8:	83 e0       	ldi	r24, 0x03	; 3
 9ba:	8c 93       	st	X, r24
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__unpack_f+0x80>
 9be:	22 0f       	add	r18, r18
 9c0:	33 1f       	adc	r19, r19
 9c2:	44 1f       	adc	r20, r20
 9c4:	55 1f       	adc	r21, r21
 9c6:	12 96       	adiw	r26, 0x02	; 2
 9c8:	8d 91       	ld	r24, X+
 9ca:	9c 91       	ld	r25, X
 9cc:	13 97       	sbiw	r26, 0x03	; 3
 9ce:	01 97       	sbiw	r24, 0x01	; 1
 9d0:	13 96       	adiw	r26, 0x03	; 3
 9d2:	9c 93       	st	X, r25
 9d4:	8e 93       	st	-X, r24
 9d6:	12 97       	sbiw	r26, 0x02	; 2
 9d8:	20 30       	cpi	r18, 0x00	; 0
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	38 07       	cpc	r19, r24
 9de:	80 e0       	ldi	r24, 0x00	; 0
 9e0:	48 07       	cpc	r20, r24
 9e2:	80 e4       	ldi	r24, 0x40	; 64
 9e4:	58 07       	cpc	r21, r24
 9e6:	58 f3       	brcs	.-42     	; 0x9be <__unpack_f+0x66>
 9e8:	14 96       	adiw	r26, 0x04	; 4
 9ea:	2d 93       	st	X+, r18
 9ec:	3d 93       	st	X+, r19
 9ee:	4d 93       	st	X+, r20
 9f0:	5c 93       	st	X, r21
 9f2:	17 97       	sbiw	r26, 0x07	; 7
 9f4:	08 95       	ret
 9f6:	2f 3f       	cpi	r18, 0xFF	; 255
 9f8:	31 05       	cpc	r19, r1
 9fa:	79 f4       	brne	.+30     	; 0xa1a <__unpack_f+0xc2>
 9fc:	41 15       	cp	r20, r1
 9fe:	51 05       	cpc	r21, r1
 a00:	61 05       	cpc	r22, r1
 a02:	71 05       	cpc	r23, r1
 a04:	19 f4       	brne	.+6      	; 0xa0c <__unpack_f+0xb4>
 a06:	84 e0       	ldi	r24, 0x04	; 4
 a08:	8c 93       	st	X, r24
 a0a:	08 95       	ret
 a0c:	64 ff       	sbrs	r22, 4
 a0e:	03 c0       	rjmp	.+6      	; 0xa16 <__unpack_f+0xbe>
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	8c 93       	st	X, r24
 a14:	12 c0       	rjmp	.+36     	; 0xa3a <__unpack_f+0xe2>
 a16:	1c 92       	st	X, r1
 a18:	10 c0       	rjmp	.+32     	; 0xa3a <__unpack_f+0xe2>
 a1a:	2f 57       	subi	r18, 0x7F	; 127
 a1c:	30 40       	sbci	r19, 0x00	; 0
 a1e:	13 96       	adiw	r26, 0x03	; 3
 a20:	3c 93       	st	X, r19
 a22:	2e 93       	st	-X, r18
 a24:	12 97       	sbiw	r26, 0x02	; 2
 a26:	83 e0       	ldi	r24, 0x03	; 3
 a28:	8c 93       	st	X, r24
 a2a:	87 e0       	ldi	r24, 0x07	; 7
 a2c:	44 0f       	add	r20, r20
 a2e:	55 1f       	adc	r21, r21
 a30:	66 1f       	adc	r22, r22
 a32:	77 1f       	adc	r23, r23
 a34:	8a 95       	dec	r24
 a36:	d1 f7       	brne	.-12     	; 0xa2c <__unpack_f+0xd4>
 a38:	70 64       	ori	r23, 0x40	; 64
 a3a:	14 96       	adiw	r26, 0x04	; 4
 a3c:	4d 93       	st	X+, r20
 a3e:	5d 93       	st	X+, r21
 a40:	6d 93       	st	X+, r22
 a42:	7c 93       	st	X, r23
 a44:	17 97       	sbiw	r26, 0x07	; 7
 a46:	08 95       	ret

00000a48 <__fpcmp_parts_f>:
 a48:	1f 93       	push	r17
 a4a:	dc 01       	movw	r26, r24
 a4c:	fb 01       	movw	r30, r22
 a4e:	9c 91       	ld	r25, X
 a50:	92 30       	cpi	r25, 0x02	; 2
 a52:	08 f4       	brcc	.+2      	; 0xa56 <__fpcmp_parts_f+0xe>
 a54:	47 c0       	rjmp	.+142    	; 0xae4 <__fpcmp_parts_f+0x9c>
 a56:	80 81       	ld	r24, Z
 a58:	82 30       	cpi	r24, 0x02	; 2
 a5a:	08 f4       	brcc	.+2      	; 0xa5e <__fpcmp_parts_f+0x16>
 a5c:	43 c0       	rjmp	.+134    	; 0xae4 <__fpcmp_parts_f+0x9c>
 a5e:	94 30       	cpi	r25, 0x04	; 4
 a60:	51 f4       	brne	.+20     	; 0xa76 <__fpcmp_parts_f+0x2e>
 a62:	11 96       	adiw	r26, 0x01	; 1
 a64:	1c 91       	ld	r17, X
 a66:	84 30       	cpi	r24, 0x04	; 4
 a68:	99 f5       	brne	.+102    	; 0xad0 <__fpcmp_parts_f+0x88>
 a6a:	81 81       	ldd	r24, Z+1	; 0x01
 a6c:	68 2f       	mov	r22, r24
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	61 1b       	sub	r22, r17
 a72:	71 09       	sbc	r23, r1
 a74:	3f c0       	rjmp	.+126    	; 0xaf4 <__fpcmp_parts_f+0xac>
 a76:	84 30       	cpi	r24, 0x04	; 4
 a78:	21 f0       	breq	.+8      	; 0xa82 <__fpcmp_parts_f+0x3a>
 a7a:	92 30       	cpi	r25, 0x02	; 2
 a7c:	31 f4       	brne	.+12     	; 0xa8a <__fpcmp_parts_f+0x42>
 a7e:	82 30       	cpi	r24, 0x02	; 2
 a80:	b9 f1       	breq	.+110    	; 0xaf0 <__fpcmp_parts_f+0xa8>
 a82:	81 81       	ldd	r24, Z+1	; 0x01
 a84:	88 23       	and	r24, r24
 a86:	89 f1       	breq	.+98     	; 0xaea <__fpcmp_parts_f+0xa2>
 a88:	2d c0       	rjmp	.+90     	; 0xae4 <__fpcmp_parts_f+0x9c>
 a8a:	11 96       	adiw	r26, 0x01	; 1
 a8c:	1c 91       	ld	r17, X
 a8e:	11 97       	sbiw	r26, 0x01	; 1
 a90:	82 30       	cpi	r24, 0x02	; 2
 a92:	f1 f0       	breq	.+60     	; 0xad0 <__fpcmp_parts_f+0x88>
 a94:	81 81       	ldd	r24, Z+1	; 0x01
 a96:	18 17       	cp	r17, r24
 a98:	d9 f4       	brne	.+54     	; 0xad0 <__fpcmp_parts_f+0x88>
 a9a:	12 96       	adiw	r26, 0x02	; 2
 a9c:	2d 91       	ld	r18, X+
 a9e:	3c 91       	ld	r19, X
 aa0:	13 97       	sbiw	r26, 0x03	; 3
 aa2:	82 81       	ldd	r24, Z+2	; 0x02
 aa4:	93 81       	ldd	r25, Z+3	; 0x03
 aa6:	82 17       	cp	r24, r18
 aa8:	93 07       	cpc	r25, r19
 aaa:	94 f0       	brlt	.+36     	; 0xad0 <__fpcmp_parts_f+0x88>
 aac:	28 17       	cp	r18, r24
 aae:	39 07       	cpc	r19, r25
 ab0:	bc f0       	brlt	.+46     	; 0xae0 <__fpcmp_parts_f+0x98>
 ab2:	14 96       	adiw	r26, 0x04	; 4
 ab4:	8d 91       	ld	r24, X+
 ab6:	9d 91       	ld	r25, X+
 ab8:	0d 90       	ld	r0, X+
 aba:	bc 91       	ld	r27, X
 abc:	a0 2d       	mov	r26, r0
 abe:	24 81       	ldd	r18, Z+4	; 0x04
 ac0:	35 81       	ldd	r19, Z+5	; 0x05
 ac2:	46 81       	ldd	r20, Z+6	; 0x06
 ac4:	57 81       	ldd	r21, Z+7	; 0x07
 ac6:	28 17       	cp	r18, r24
 ac8:	39 07       	cpc	r19, r25
 aca:	4a 07       	cpc	r20, r26
 acc:	5b 07       	cpc	r21, r27
 ace:	18 f4       	brcc	.+6      	; 0xad6 <__fpcmp_parts_f+0x8e>
 ad0:	11 23       	and	r17, r17
 ad2:	41 f0       	breq	.+16     	; 0xae4 <__fpcmp_parts_f+0x9c>
 ad4:	0a c0       	rjmp	.+20     	; 0xaea <__fpcmp_parts_f+0xa2>
 ad6:	82 17       	cp	r24, r18
 ad8:	93 07       	cpc	r25, r19
 ada:	a4 07       	cpc	r26, r20
 adc:	b5 07       	cpc	r27, r21
 ade:	40 f4       	brcc	.+16     	; 0xaf0 <__fpcmp_parts_f+0xa8>
 ae0:	11 23       	and	r17, r17
 ae2:	19 f0       	breq	.+6      	; 0xaea <__fpcmp_parts_f+0xa2>
 ae4:	61 e0       	ldi	r22, 0x01	; 1
 ae6:	70 e0       	ldi	r23, 0x00	; 0
 ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <__fpcmp_parts_f+0xac>
 aea:	6f ef       	ldi	r22, 0xFF	; 255
 aec:	7f ef       	ldi	r23, 0xFF	; 255
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <__fpcmp_parts_f+0xac>
 af0:	60 e0       	ldi	r22, 0x00	; 0
 af2:	70 e0       	ldi	r23, 0x00	; 0
 af4:	cb 01       	movw	r24, r22
 af6:	1f 91       	pop	r17
 af8:	08 95       	ret

00000afa <__prologue_saves__>:
 afa:	2f 92       	push	r2
 afc:	3f 92       	push	r3
 afe:	4f 92       	push	r4
 b00:	5f 92       	push	r5
 b02:	6f 92       	push	r6
 b04:	7f 92       	push	r7
 b06:	8f 92       	push	r8
 b08:	9f 92       	push	r9
 b0a:	af 92       	push	r10
 b0c:	bf 92       	push	r11
 b0e:	cf 92       	push	r12
 b10:	df 92       	push	r13
 b12:	ef 92       	push	r14
 b14:	ff 92       	push	r15
 b16:	0f 93       	push	r16
 b18:	1f 93       	push	r17
 b1a:	cf 93       	push	r28
 b1c:	df 93       	push	r29
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
 b22:	ca 1b       	sub	r28, r26
 b24:	db 0b       	sbc	r29, r27
 b26:	0f b6       	in	r0, 0x3f	; 63
 b28:	f8 94       	cli
 b2a:	de bf       	out	0x3e, r29	; 62
 b2c:	0f be       	out	0x3f, r0	; 63
 b2e:	cd bf       	out	0x3d, r28	; 61
 b30:	09 94       	ijmp

00000b32 <__epilogue_restores__>:
 b32:	2a 88       	ldd	r2, Y+18	; 0x12
 b34:	39 88       	ldd	r3, Y+17	; 0x11
 b36:	48 88       	ldd	r4, Y+16	; 0x10
 b38:	5f 84       	ldd	r5, Y+15	; 0x0f
 b3a:	6e 84       	ldd	r6, Y+14	; 0x0e
 b3c:	7d 84       	ldd	r7, Y+13	; 0x0d
 b3e:	8c 84       	ldd	r8, Y+12	; 0x0c
 b40:	9b 84       	ldd	r9, Y+11	; 0x0b
 b42:	aa 84       	ldd	r10, Y+10	; 0x0a
 b44:	b9 84       	ldd	r11, Y+9	; 0x09
 b46:	c8 84       	ldd	r12, Y+8	; 0x08
 b48:	df 80       	ldd	r13, Y+7	; 0x07
 b4a:	ee 80       	ldd	r14, Y+6	; 0x06
 b4c:	fd 80       	ldd	r15, Y+5	; 0x05
 b4e:	0c 81       	ldd	r16, Y+4	; 0x04
 b50:	1b 81       	ldd	r17, Y+3	; 0x03
 b52:	aa 81       	ldd	r26, Y+2	; 0x02
 b54:	b9 81       	ldd	r27, Y+1	; 0x01
 b56:	ce 0f       	add	r28, r30
 b58:	d1 1d       	adc	r29, r1
 b5a:	0f b6       	in	r0, 0x3f	; 63
 b5c:	f8 94       	cli
 b5e:	de bf       	out	0x3e, r29	; 62
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	cd bf       	out	0x3d, r28	; 61
 b64:	ed 01       	movw	r28, r26
 b66:	08 95       	ret

00000b68 <_exit>:
 b68:	f8 94       	cli

00000b6a <__stop_program>:
 b6a:	ff cf       	rjmp	.-2      	; 0xb6a <__stop_program>
