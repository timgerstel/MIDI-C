
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001280  00001314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800168  00800168  0000141c  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ed  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a00  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001569  00000000  00000000  000043c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001951  00000000  00000000  00005932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  00007284  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000562  00000000  00000000  000075d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b7b  00000000  00000000  00007b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000086b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 e8       	ldi	r30, 0x80	; 128
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 62 02 	call	0x4c4	; 0x4c4 <main>
      8a:	0c 94 3e 09 	jmp	0x127c	; 0x127c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <playBack>:
	//midiTransitTest();
}

void playBack(){
	//midiTransitTest();
}
      92:	08 95       	ret

00000094 <modify>:


void modify(){
	//analogLEDTest();
}
      94:	08 95       	ret

00000096 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      96:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      98:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9e:	86 e8       	ldi	r24, 0x86	; 134
      a0:	80 bd       	out	0x20, r24	; 32
}
      a2:	08 95       	ret

000000a4 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a4:	8f ef       	ldi	r24, 0xFF	; 255
      a6:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a8:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      aa:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      ac:	87 e0       	ldi	r24, 0x07	; 7
      ae:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      b0:	11 ba       	out	0x11, r1	; 17
}
      b2:	08 95       	ret

000000b4 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b4:	87 e4       	ldi	r24, 0x47	; 71
      b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b8:	87 e8       	ldi	r24, 0x87	; 135
      ba:	86 b9       	out	0x06, r24	; 6
}
      bc:	08 95       	ret

000000be <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
      be:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      c0:	85 e0       	ldi	r24, 0x05	; 5
      c2:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
      c4:	88 e0       	ldi	r24, 0x08	; 8
      c6:	89 bf       	out	0x39, r24	; 57
	sei();
      c8:	78 94       	sei
	OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
      ca:	82 e4       	ldi	r24, 0x42	; 66
      cc:	9f e0       	ldi	r25, 0x0F	; 15
      ce:	9b bd       	out	0x2b, r25	; 43
      d0:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
      d2:	80 ea       	ldi	r24, 0xA0	; 160
      d4:	97 e0       	ldi	r25, 0x07	; 7
      d6:	99 bd       	out	0x29, r25	; 41
      d8:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
      da:	1d bc       	out	0x2d, r1	; 45
      dc:	1c bc       	out	0x2c, r1	; 44

}
      de:	08 95       	ret

000000e0 <playTimer>:
	}
	
}

void playTimer(){
	while((TIFR & (1<<OCF1A)) == 0);// wait till the timer overflow flag is SET
      e0:	08 b6       	in	r0, 0x38	; 56
      e2:	04 fe       	sbrs	r0, 4
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <playTimer>
		PORTB ^= 0xFF;
      e6:	88 b3       	in	r24, 0x18	; 24
      e8:	80 95       	com	r24
      ea:	88 bb       	out	0x18, r24	; 24
		TCNT1 = 0; 
      ec:	1d bc       	out	0x2d, r1	; 45
      ee:	1c bc       	out	0x2c, r1	; 44
		TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
      f0:	88 b7       	in	r24, 0x38	; 56
      f2:	80 61       	ori	r24, 0x10	; 16
      f4:	88 bf       	out	0x38, r24	; 56
}
      f6:	08 95       	ret

000000f8 <wait>:
	_delay_ms(1000);
}


void wait(int time)
{
      f8:	af 92       	push	r10
      fa:	bf 92       	push	r11
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
   _delay_ms(time);
     108:	aa 27       	eor	r26, r26
     10a:	97 fd       	sbrc	r25, 7
     10c:	a0 95       	com	r26
     10e:	ba 2f       	mov	r27, r26
     110:	bc 01       	movw	r22, r24
     112:	cd 01       	movw	r24, r26
     114:	0e 94 e7 05 	call	0xbce	; 0xbce <__floatsisf>
     118:	5b 01       	movw	r10, r22
     11a:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     11c:	20 e0       	ldi	r18, 0x00	; 0
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	4a e7       	ldi	r20, 0x7A	; 122
     122:	53 e4       	ldi	r21, 0x43	; 67
     124:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3>
     128:	7b 01       	movw	r14, r22
     12a:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	30 e0       	ldi	r19, 0x00	; 0
     130:	40 e8       	ldi	r20, 0x80	; 128
     132:	5f e3       	ldi	r21, 0x3F	; 63
     134:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__ltsf2>
     138:	88 23       	and	r24, r24
     13a:	1c f4       	brge	.+6      	; 0x142 <wait+0x4a>
     13c:	61 e0       	ldi	r22, 0x01	; 1
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	24 c0       	rjmp	.+72     	; 0x18a <wait+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     142:	c8 01       	movw	r24, r16
     144:	b7 01       	movw	r22, r14
     146:	20 e0       	ldi	r18, 0x00	; 0
     148:	3f ef       	ldi	r19, 0xFF	; 255
     14a:	4f e7       	ldi	r20, 0x7F	; 127
     14c:	57 e4       	ldi	r21, 0x47	; 71
     14e:	0e 94 57 05 	call	0xaae	; 0xaae <__gtsf2>
     152:	18 16       	cp	r1, r24
     154:	b4 f4       	brge	.+44     	; 0x182 <wait+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     156:	c6 01       	movw	r24, r12
     158:	b5 01       	movw	r22, r10
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	30 e0       	ldi	r19, 0x00	; 0
     15e:	40 e2       	ldi	r20, 0x20	; 32
     160:	51 e4       	ldi	r21, 0x41	; 65
     162:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3>
     166:	0e 94 87 02 	call	0x50e	; 0x50e <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     16a:	89 e1       	ldi	r24, 0x19	; 25
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	05 c0       	rjmp	.+10     	; 0x17a <wait+0x82>
     170:	fc 01       	movw	r30, r24
     172:	31 97       	sbiw	r30, 0x01	; 1
     174:	f1 f7       	brne	.-4      	; 0x172 <wait+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     176:	61 50       	subi	r22, 0x01	; 1
     178:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     17a:	61 15       	cp	r22, r1
     17c:	71 05       	cpc	r23, r1
     17e:	c1 f7       	brne	.-16     	; 0x170 <wait+0x78>
     180:	07 c0       	rjmp	.+14     	; 0x190 <wait+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     182:	c8 01       	movw	r24, r16
     184:	b7 01       	movw	r22, r14
     186:	0e 94 87 02 	call	0x50e	; 0x50e <__fixunssfsi>
     18a:	cb 01       	movw	r24, r22
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <wait+0x94>
}
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	ff 90       	pop	r15
     196:	ef 90       	pop	r14
     198:	df 90       	pop	r13
     19a:	cf 90       	pop	r12
     19c:	bf 90       	pop	r11
     19e:	af 90       	pop	r10
     1a0:	08 95       	ret

000001a2 <ledOFF>:

void ledOFF(){
	PORTB = 0x00;
     1a2:	18 ba       	out	0x18, r1	; 24
}
     1a4:	08 95       	ret

000001a6 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
     1a6:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
     1a8:	34 9b       	sbis	0x06, 4	; 6
     1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
     1ac:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
     1ae:	24 b1       	in	r18, 0x04	; 4
     1b0:	35 b1       	in	r19, 0x05	; 5
}
     1b2:	c9 01       	movw	r24, r18
     1b4:	08 95       	ret

000001b6 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
     1b6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ReadADC>
     1ba:	9c 01       	movw	r18, r24
     1bc:	90 93 77 01 	sts	0x0177, r25
     1c0:	80 93 76 01 	sts	0x0176, r24
		if (adc_value > 30){
     1c4:	8f 31       	cpi	r24, 0x1F	; 31
     1c6:	91 05       	cpc	r25, r1
     1c8:	28 f1       	brcs	.+74     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     1ce:	2d 33       	cpi	r18, 0x3D	; 61
     1d0:	31 05       	cpc	r19, r1
     1d2:	00 f1       	brcs	.+64     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     1d8:	2b 35       	cpi	r18, 0x5B	; 91
     1da:	31 05       	cpc	r19, r1
     1dc:	d8 f0       	brcs	.+54     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     1de:	84 e0       	ldi	r24, 0x04	; 4
     1e0:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     1e2:	29 37       	cpi	r18, 0x79	; 121
     1e4:	31 05       	cpc	r19, r1
     1e6:	b0 f0       	brcs	.+44     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     1e8:	88 e0       	ldi	r24, 0x08	; 8
     1ea:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     1ec:	27 39       	cpi	r18, 0x97	; 151
     1ee:	31 05       	cpc	r19, r1
     1f0:	88 f0       	brcs	.+34     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     1f2:	80 e1       	ldi	r24, 0x10	; 16
     1f4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     1f6:	25 3b       	cpi	r18, 0xB5	; 181
     1f8:	31 05       	cpc	r19, r1
     1fa:	60 f0       	brcs	.+24     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     1fc:	80 e2       	ldi	r24, 0x20	; 32
     1fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     200:	23 3d       	cpi	r18, 0xD3	; 211
     202:	31 05       	cpc	r19, r1
     204:	38 f0       	brcs	.+14     	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     206:	80 e4       	ldi	r24, 0x40	; 64
     208:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     20a:	21 3f       	cpi	r18, 0xF1	; 241
     20c:	31 05       	cpc	r19, r1
     20e:	10 f0       	brcs	.+4      	; 0x214 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     210:	80 e8       	ldi	r24, 0x80	; 128
     212:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     214:	20 3f       	cpi	r18, 0xF0	; 240
     216:	31 05       	cpc	r19, r1
     218:	10 f0       	brcs	.+4      	; 0x21e <analogLEDTest+0x68>
			PORTB = 0xFF;
     21a:	8f ef       	ldi	r24, 0xFF	; 255
     21c:	88 bb       	out	0x18, r24	; 24
     21e:	08 95       	ret

00000220 <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
     220:	5d 9b       	sbis	0x0b, 5	; 11
     222:	fe cf       	rjmp	.-4      	; 0x220 <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     224:	8c b9       	out	0x0c, r24	; 12
}
     226:	08 95       	ret

00000228 <midiTransitTest>:

}

void midiTransitTest(){
	
	midi_Transmit(144);
     228:	80 e9       	ldi	r24, 0x90	; 144
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	
	midi_Transmit(66);
     230:	82 e4       	ldi	r24, 0x42	; 66
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	
	midi_Transmit(111);
     238:	8f e6       	ldi	r24, 0x6F	; 111
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
     240:	88 e8       	ldi	r24, 0x88	; 136
     242:	93 e1       	ldi	r25, 0x13	; 19
     244:	29 e1       	ldi	r18, 0x19	; 25
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	f9 01       	movw	r30, r18
     24a:	31 97       	sbiw	r30, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     24e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     250:	d9 f7       	brne	.-10     	; 0x248 <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
     252:	80 e8       	ldi	r24, 0x80	; 128
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	
	midi_Transmit(66);
     25a:	82 e4       	ldi	r24, 0x42	; 66
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	
	midi_Transmit(111);
     262:	8f e6       	ldi	r24, 0x6F	; 111
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
     26a:	88 e8       	ldi	r24, 0x88	; 136
     26c:	93 e1       	ldi	r25, 0x13	; 19
     26e:	29 e1       	ldi	r18, 0x19	; 25
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	f9 01       	movw	r30, r18
     274:	31 97       	sbiw	r30, 0x01	; 1
     276:	f1 f7       	brne	.-4      	; 0x274 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     27a:	d9 f7       	brne	.-10     	; 0x272 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
     27c:	80 e9       	ldi	r24, 0x90	; 144
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	midi_Transmit(86);
     284:	86 e5       	ldi	r24, 0x56	; 86
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	midi_Transmit(101);
     28c:	85 e6       	ldi	r24, 0x65	; 101
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
     294:	80 e1       	ldi	r24, 0x10	; 16
     296:	97 e2       	ldi	r25, 0x27	; 39
     298:	29 e1       	ldi	r18, 0x19	; 25
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	f9 01       	movw	r30, r18
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a4:	d9 f7       	brne	.-10     	; 0x29c <midiTransitTest+0x74>
	_delay_ms(1000);
	midi_Transmit(128);
     2a6:	80 e8       	ldi	r24, 0x80	; 128
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	midi_Transmit(86);
     2ae:	86 e5       	ldi	r24, 0x56	; 86
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
	midi_Transmit(101);
     2b6:	85 e6       	ldi	r24, 0x65	; 101
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
     2be:	80 e1       	ldi	r24, 0x10	; 16
     2c0:	97 e2       	ldi	r25, 0x27	; 39
     2c2:	29 e1       	ldi	r18, 0x19	; 25
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	f1 f7       	brne	.-4      	; 0x2c8 <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2ce:	d9 f7       	brne	.-10     	; 0x2c6 <midiTransitTest+0x9e>
	_delay_ms(1000);
}
     2d0:	08 95       	ret

000002d2 <playSong>:

/***** Create Methods *****/



void playSong(){
     2d2:	8f 92       	push	r8
     2d4:	9f 92       	push	r9
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
	eeprom_address= 0x00;
     2ea:	10 92 73 01 	sts	0x0173, r1
     2ee:	10 92 72 01 	sts	0x0172, r1
     2f2:	89 e1       	ldi	r24, 0x19	; 25
     2f4:	88 2e       	mov	r8, r24
     2f6:	91 2c       	mov	r9, r1
     2f8:	63 c0       	rjmp	.+198    	; 0x3c0 <playSong+0xee>
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     2fa:	e1 99       	sbic	0x1c, 1	; 28
     2fc:	fe cf       	rjmp	.-4      	; 0x2fa <playSong+0x28>
	/* Set up address register */
	EEAR = uiAddress;
     2fe:	3f bb       	out	0x1f, r19	; 31
     300:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     302:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     304:	8d b3       	in	r24, 0x1d	; 29


void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
     306:	88 bb       	out	0x18, r24	; 24
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     308:	e1 99       	sbic	0x1c, 1	; 28
     30a:	fe cf       	rjmp	.-4      	; 0x308 <playSong+0x36>
	/* Set up address register */
	EEAR = uiAddress;
     30c:	3f bb       	out	0x1f, r19	; 31
     30e:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     310:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     312:	8d b3       	in	r24, 0x1d	; 29

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 10 01 	call	0x220	; 0x220 <midi_Transmit>
		eeprom_address++;
     31a:	c0 91 72 01 	lds	r28, 0x0172
     31e:	d0 91 73 01 	lds	r29, 0x0173
     322:	21 96       	adiw	r28, 0x01	; 1
     324:	d0 93 73 01 	sts	0x0173, r29
     328:	c0 93 72 01 	sts	0x0172, r28
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     32c:	e1 99       	sbic	0x1c, 1	; 28
     32e:	fe cf       	rjmp	.-4      	; 0x32c <playSong+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     330:	df bb       	out	0x1f, r29	; 31
     332:	ce bb       	out	0x1e, r28	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     334:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     336:	6d b3       	in	r22, 0x1d	; 29
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 99 06 	call	0xd32	; 0xd32 <__floatunsisf>
     342:	5b 01       	movw	r10, r22
     344:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     346:	20 e0       	ldi	r18, 0x00	; 0
     348:	30 e0       	ldi	r19, 0x00	; 0
     34a:	4a e7       	ldi	r20, 0x7A	; 122
     34c:	53 e4       	ldi	r21, 0x43	; 67
     34e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3>
     352:	7b 01       	movw	r14, r22
     354:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e8       	ldi	r20, 0x80	; 128
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__ltsf2>
     362:	88 23       	and	r24, r24
     364:	1c f4       	brge	.+6      	; 0x36c <playSong+0x9a>
     366:	61 e0       	ldi	r22, 0x01	; 1
     368:	70 e0       	ldi	r23, 0x00	; 0
     36a:	22 c0       	rjmp	.+68     	; 0x3b0 <playSong+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
     36c:	c8 01       	movw	r24, r16
     36e:	b7 01       	movw	r22, r14
     370:	20 e0       	ldi	r18, 0x00	; 0
     372:	3f ef       	ldi	r19, 0xFF	; 255
     374:	4f e7       	ldi	r20, 0x7F	; 127
     376:	57 e4       	ldi	r21, 0x47	; 71
     378:	0e 94 57 05 	call	0xaae	; 0xaae <__gtsf2>
     37c:	18 16       	cp	r1, r24
     37e:	a4 f4       	brge	.+40     	; 0x3a8 <playSong+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     380:	c6 01       	movw	r24, r12
     382:	b5 01       	movw	r22, r10
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	40 e2       	ldi	r20, 0x20	; 32
     38a:	51 e4       	ldi	r21, 0x41	; 65
     38c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__mulsf3>
     390:	0e 94 87 02 	call	0x50e	; 0x50e <__fixunssfsi>
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <playSong+0xce>
     396:	c4 01       	movw	r24, r8
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <playSong+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     39c:	61 50       	subi	r22, 0x01	; 1
     39e:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a0:	61 15       	cp	r22, r1
     3a2:	71 05       	cpc	r23, r1
     3a4:	c1 f7       	brne	.-16     	; 0x396 <playSong+0xc4>
     3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <playSong+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3a8:	c8 01       	movw	r24, r16
     3aa:	b7 01       	movw	r22, r14
     3ac:	0e 94 87 02 	call	0x50e	; 0x50e <__fixunssfsi>
     3b0:	cb 01       	movw	r24, r22
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <playSong+0xe0>
		eeprom_address++;
     3b6:	21 96       	adiw	r28, 0x01	; 1
     3b8:	d0 93 73 01 	sts	0x0173, r29
     3bc:	c0 93 72 01 	sts	0x0172, r28



void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
     3c0:	20 91 72 01 	lds	r18, 0x0172
     3c4:	30 91 73 01 	lds	r19, 0x0173
     3c8:	80 91 74 01 	lds	r24, 0x0174
     3cc:	90 91 75 01 	lds	r25, 0x0175
     3d0:	28 17       	cp	r18, r24
     3d2:	39 07       	cpc	r19, r25
     3d4:	08 f4       	brcc	.+2      	; 0x3d8 <playSong+0x106>
     3d6:	91 cf       	rjmp	.-222    	; 0x2fa <playSong+0x28>
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
		eeprom_address++;
	}
	
}
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	df 90       	pop	r13
     3e6:	cf 90       	pop	r12
     3e8:	bf 90       	pop	r11
     3ea:	af 90       	pop	r10
     3ec:	9f 90       	pop	r9
     3ee:	8f 90       	pop	r8
     3f0:	08 95       	ret

000003f2 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     3f2:	5f 9b       	sbis	0x0b, 7	; 11
     3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     3f6:	8c b1       	in	r24, 0x0c	; 12
}
     3f8:	08 95       	ret

000003fa <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     3fc:	8c b1       	in	r24, 0x0c	; 12
     3fe:	5f 99       	sbic	0x0b, 7	; 11
     400:	fd cf       	rjmp	.-6      	; 0x3fc <midi_Flush+0x2>
}
     402:	08 95       	ret

00000404 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     404:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     406:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     408:	08 95       	ret

0000040a <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     40a:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     40c:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     40e:	8c b5       	in	r24, 0x2c	; 44
     410:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     412:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     414:	08 95       	ret

00000416 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     416:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     418:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     41a:	9d bd       	out	0x2d, r25	; 45
     41c:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     41e:	2f bf       	out	0x3f, r18	; 63
}
     420:	08 95       	ret

00000422 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     422:	e1 99       	sbic	0x1c, 1	; 28
     424:	fe cf       	rjmp	.-4      	; 0x422 <EEPROM_write>

	/* Set up address and data registers */
	EEAR = uiAddress;
     426:	9f bb       	out	0x1f, r25	; 31
     428:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     42a:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     42c:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     42e:	e1 9a       	sbi	0x1c, 1	; 28
}
     430:	08 95       	ret

00000432 <writeSong2>:
		PORTB ^= 0xFF;
		TCNT1 = 0; 
		TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
}

void writeSong2(){
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	c8 e7       	ldi	r28, 0x78	; 120
     438:	d1 e0       	ldi	r29, 0x01	; 1
     43a:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     43c:	5f 9b       	sbis	0x0b, 7	; 11
     43e:	fe cf       	rjmp	.-4      	; 0x43c <writeSong2+0xa>

	/* get and return data from buffer */
	return UDR;
     440:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
for(int i =0; i <3; i++){
		midiData[i] = midi_Receive();
     442:	81 93       	st	Z+, r24
}

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
for(int i =0; i <3; i++){
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	eb 37       	cpi	r30, 0x7B	; 123
     448:	f8 07       	cpc	r31, r24
     44a:	c1 f7       	brne	.-16     	; 0x43c <writeSong2+0xa>
		midiData[i] = midi_Receive();
	}
	captureTime = TCNT1;
     44c:	2c b5       	in	r18, 0x2c	; 44
     44e:	3d b5       	in	r19, 0x2d	; 45
     450:	42 2f       	mov	r20, r18
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
     452:	92 2f       	mov	r25, r18
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	89 2f       	mov	r24, r25
     458:	99 0f       	add	r25, r25
     45a:	99 0b       	sbc	r25, r25
     45c:	80 83       	st	Z, r24
	midiData[4] = captureTimeB;
     45e:	11 82       	std	Z+1, r1	; 0x01
     460:	32 96       	adiw	r30, 0x02	; 2
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     462:	5f 9b       	sbis	0x0b, 7	; 11
     464:	fe cf       	rjmp	.-4      	; 0x462 <writeSong2+0x30>

	/* get and return data from buffer */
	return UDR;
     466:	8c b1       	in	r24, 0x0c	; 12
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
		midiData[j] = midi_Receive();
     468:	81 93       	st	Z+, r24
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	e0 38       	cpi	r30, 0x80	; 128
     46e:	f8 07       	cpc	r31, r24
     470:	c1 f7       	brne	.-16     	; 0x462 <writeSong2+0x30>
		midiData[j] = midi_Receive();
	}
	interval = TCNT1 - captureTime;
     472:	8c b5       	in	r24, 0x2c	; 44
     474:	9d b5       	in	r25, 0x2d	; 45
	unsigned char intervalA = ((interval << 8) >> 8);
	unsigned char intervalB = (interval >> 8);
	midiData[8] = intervalA;
     476:	38 2f       	mov	r19, r24
     478:	34 1b       	sub	r19, r20
     47a:	20 e0       	ldi	r18, 0x00	; 0
     47c:	23 2f       	mov	r18, r19
     47e:	33 0f       	add	r19, r19
     480:	33 0b       	sbc	r19, r19
     482:	20 83       	st	Z, r18
	midiData[9] = intervalB;
     484:	11 82       	std	Z+1, r1	; 0x01

	PORTB = midiData[1];
     486:	80 91 79 01 	lds	r24, 0x0179
     48a:	88 bb       	out	0x18, r24	; 24
	TCNT1 = 0;
     48c:	1d bc       	out	0x2d, r1	; 45
     48e:	1c bc       	out	0x2c, r1	; 44

	for(int j= 0; j < 10; j++) {
		EEPROM_write(eeprom_address, midiData[j]);
     490:	80 91 72 01 	lds	r24, 0x0172
     494:	90 91 73 01 	lds	r25, 0x0173
     498:	69 91       	ld	r22, Y+
     49a:	0e 94 11 02 	call	0x422	; 0x422 <EEPROM_write>
		eeprom_address++;		
     49e:	80 91 72 01 	lds	r24, 0x0172
     4a2:	90 91 73 01 	lds	r25, 0x0173
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	90 93 73 01 	sts	0x0173, r25
     4ac:	80 93 72 01 	sts	0x0172, r24
	midiData[9] = intervalB;

	PORTB = midiData[1];
	TCNT1 = 0;

	for(int j= 0; j < 10; j++) {
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	c2 38       	cpi	r28, 0x82	; 130
     4b4:	d8 07       	cpc	r29, r24
     4b6:	61 f7       	brne	.-40     	; 0x490 <writeSong2+0x5e>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}	

}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     4be:	0e 94 19 02 	call	0x432	; 0x432 <writeSong2>
	//midiTransitTest();
}
     4c2:	08 95       	ret

000004c4 <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
     4c4:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     4c6:	8f ef       	ldi	r24, 0xFF	; 255
     4c8:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     4ca:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     4cc:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     4ce:	17 e0       	ldi	r17, 0x07	; 7
     4d0:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
     4d2:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
     4d4:	0e 94 5f 00 	call	0xbe	; 0xbe <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     4d8:	87 e4       	ldi	r24, 0x47	; 71
     4da:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     4dc:	87 e8       	ldi	r24, 0x87	; 135
     4de:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     4e0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     4e2:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     4e4:	88 e1       	ldi	r24, 0x18	; 24
     4e6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     4e8:	86 e8       	ldi	r24, 0x86	; 134
     4ea:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     4ec:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
     4ee:	99 b3       	in	r25, 0x19	; 25
		uint8_t mod = PINA & 0x01;
     4f0:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
     4f2:	82 ff       	sbrs	r24, 2
     4f4:	fb cf       	rjmp	.-10     	; 0x4ec <main+0x28>
     4f6:	91 fd       	sbrc	r25, 1
     4f8:	f9 cf       	rjmp	.-14     	; 0x4ec <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     4fa:	0e 94 19 02 	call	0x432	; 0x432 <writeSong2>
     4fe:	f6 cf       	rjmp	.-20     	; 0x4ec <main+0x28>

00000500 <EEPROM_read>:
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     500:	e1 99       	sbic	0x1c, 1	; 28
     502:	fe cf       	rjmp	.-4      	; 0x500 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     504:	9f bb       	out	0x1f, r25	; 31
     506:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     508:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     50a:	8d b3       	in	r24, 0x1d	; 29
}
     50c:	08 95       	ret

0000050e <__fixunssfsi>:
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	7b 01       	movw	r14, r22
     518:	8c 01       	movw	r16, r24
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	5f e4       	ldi	r21, 0x4F	; 79
     522:	0e 94 87 05 	call	0xb0e	; 0xb0e <__gesf2>
     526:	88 23       	and	r24, r24
     528:	8c f0       	brlt	.+34     	; 0x54c <__fixunssfsi+0x3e>
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	5f e4       	ldi	r21, 0x4F	; 79
     536:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__subsf3>
     53a:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixsfsi>
     53e:	9b 01       	movw	r18, r22
     540:	ac 01       	movw	r20, r24
     542:	20 50       	subi	r18, 0x00	; 0
     544:	30 40       	sbci	r19, 0x00	; 0
     546:	40 40       	sbci	r20, 0x00	; 0
     548:	50 48       	sbci	r21, 0x80	; 128
     54a:	06 c0       	rjmp	.+12     	; 0x558 <__fixunssfsi+0x4a>
     54c:	c8 01       	movw	r24, r16
     54e:	b7 01       	movw	r22, r14
     550:	0e 94 45 06 	call	0xc8a	; 0xc8a <__fixsfsi>
     554:	9b 01       	movw	r18, r22
     556:	ac 01       	movw	r20, r24
     558:	b9 01       	movw	r22, r18
     55a:	ca 01       	movw	r24, r20
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	08 95       	ret

00000566 <_fpadd_parts>:
     566:	a0 e0       	ldi	r26, 0x00	; 0
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	e9 eb       	ldi	r30, 0xB9	; 185
     56c:	f2 e0       	ldi	r31, 0x02	; 2
     56e:	0c 94 07 09 	jmp	0x120e	; 0x120e <__prologue_saves__>
     572:	dc 01       	movw	r26, r24
     574:	2b 01       	movw	r4, r22
     576:	fa 01       	movw	r30, r20
     578:	9c 91       	ld	r25, X
     57a:	92 30       	cpi	r25, 0x02	; 2
     57c:	08 f4       	brcc	.+2      	; 0x580 <_fpadd_parts+0x1a>
     57e:	39 c1       	rjmp	.+626    	; 0x7f2 <_fpadd_parts+0x28c>
     580:	eb 01       	movw	r28, r22
     582:	88 81       	ld	r24, Y
     584:	82 30       	cpi	r24, 0x02	; 2
     586:	08 f4       	brcc	.+2      	; 0x58a <_fpadd_parts+0x24>
     588:	33 c1       	rjmp	.+614    	; 0x7f0 <_fpadd_parts+0x28a>
     58a:	94 30       	cpi	r25, 0x04	; 4
     58c:	69 f4       	brne	.+26     	; 0x5a8 <_fpadd_parts+0x42>
     58e:	84 30       	cpi	r24, 0x04	; 4
     590:	09 f0       	breq	.+2      	; 0x594 <_fpadd_parts+0x2e>
     592:	2f c1       	rjmp	.+606    	; 0x7f2 <_fpadd_parts+0x28c>
     594:	11 96       	adiw	r26, 0x01	; 1
     596:	9c 91       	ld	r25, X
     598:	11 97       	sbiw	r26, 0x01	; 1
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	98 17       	cp	r25, r24
     59e:	09 f4       	brne	.+2      	; 0x5a2 <_fpadd_parts+0x3c>
     5a0:	28 c1       	rjmp	.+592    	; 0x7f2 <_fpadd_parts+0x28c>
     5a2:	a0 e6       	ldi	r26, 0x60	; 96
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	25 c1       	rjmp	.+586    	; 0x7f2 <_fpadd_parts+0x28c>
     5a8:	84 30       	cpi	r24, 0x04	; 4
     5aa:	09 f4       	brne	.+2      	; 0x5ae <_fpadd_parts+0x48>
     5ac:	21 c1       	rjmp	.+578    	; 0x7f0 <_fpadd_parts+0x28a>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	a9 f4       	brne	.+42     	; 0x5dc <_fpadd_parts+0x76>
     5b2:	92 30       	cpi	r25, 0x02	; 2
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <_fpadd_parts+0x52>
     5b6:	1d c1       	rjmp	.+570    	; 0x7f2 <_fpadd_parts+0x28c>
     5b8:	9a 01       	movw	r18, r20
     5ba:	ad 01       	movw	r20, r26
     5bc:	88 e0       	ldi	r24, 0x08	; 8
     5be:	ea 01       	movw	r28, r20
     5c0:	09 90       	ld	r0, Y+
     5c2:	ae 01       	movw	r20, r28
     5c4:	e9 01       	movw	r28, r18
     5c6:	09 92       	st	Y+, r0
     5c8:	9e 01       	movw	r18, r28
     5ca:	81 50       	subi	r24, 0x01	; 1
     5cc:	c1 f7       	brne	.-16     	; 0x5be <_fpadd_parts+0x58>
     5ce:	e2 01       	movw	r28, r4
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	11 96       	adiw	r26, 0x01	; 1
     5d4:	9c 91       	ld	r25, X
     5d6:	89 23       	and	r24, r25
     5d8:	81 83       	std	Z+1, r24	; 0x01
     5da:	08 c1       	rjmp	.+528    	; 0x7ec <_fpadd_parts+0x286>
     5dc:	92 30       	cpi	r25, 0x02	; 2
     5de:	09 f4       	brne	.+2      	; 0x5e2 <_fpadd_parts+0x7c>
     5e0:	07 c1       	rjmp	.+526    	; 0x7f0 <_fpadd_parts+0x28a>
     5e2:	12 96       	adiw	r26, 0x02	; 2
     5e4:	2d 90       	ld	r2, X+
     5e6:	3c 90       	ld	r3, X
     5e8:	13 97       	sbiw	r26, 0x03	; 3
     5ea:	eb 01       	movw	r28, r22
     5ec:	8a 81       	ldd	r24, Y+2	; 0x02
     5ee:	9b 81       	ldd	r25, Y+3	; 0x03
     5f0:	14 96       	adiw	r26, 0x04	; 4
     5f2:	ad 90       	ld	r10, X+
     5f4:	bd 90       	ld	r11, X+
     5f6:	cd 90       	ld	r12, X+
     5f8:	dc 90       	ld	r13, X
     5fa:	17 97       	sbiw	r26, 0x07	; 7
     5fc:	ec 80       	ldd	r14, Y+4	; 0x04
     5fe:	fd 80       	ldd	r15, Y+5	; 0x05
     600:	0e 81       	ldd	r16, Y+6	; 0x06
     602:	1f 81       	ldd	r17, Y+7	; 0x07
     604:	91 01       	movw	r18, r2
     606:	28 1b       	sub	r18, r24
     608:	39 0b       	sbc	r19, r25
     60a:	b9 01       	movw	r22, r18
     60c:	37 ff       	sbrs	r19, 7
     60e:	04 c0       	rjmp	.+8      	; 0x618 <_fpadd_parts+0xb2>
     610:	66 27       	eor	r22, r22
     612:	77 27       	eor	r23, r23
     614:	62 1b       	sub	r22, r18
     616:	73 0b       	sbc	r23, r19
     618:	60 32       	cpi	r22, 0x20	; 32
     61a:	71 05       	cpc	r23, r1
     61c:	0c f0       	brlt	.+2      	; 0x620 <_fpadd_parts+0xba>
     61e:	61 c0       	rjmp	.+194    	; 0x6e2 <_fpadd_parts+0x17c>
     620:	12 16       	cp	r1, r18
     622:	13 06       	cpc	r1, r19
     624:	6c f5       	brge	.+90     	; 0x680 <_fpadd_parts+0x11a>
     626:	37 01       	movw	r6, r14
     628:	48 01       	movw	r8, r16
     62a:	06 2e       	mov	r0, r22
     62c:	04 c0       	rjmp	.+8      	; 0x636 <_fpadd_parts+0xd0>
     62e:	96 94       	lsr	r9
     630:	87 94       	ror	r8
     632:	77 94       	ror	r7
     634:	67 94       	ror	r6
     636:	0a 94       	dec	r0
     638:	d2 f7       	brpl	.-12     	; 0x62e <_fpadd_parts+0xc8>
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	50 e0       	ldi	r21, 0x00	; 0
     642:	04 c0       	rjmp	.+8      	; 0x64c <_fpadd_parts+0xe6>
     644:	22 0f       	add	r18, r18
     646:	33 1f       	adc	r19, r19
     648:	44 1f       	adc	r20, r20
     64a:	55 1f       	adc	r21, r21
     64c:	6a 95       	dec	r22
     64e:	d2 f7       	brpl	.-12     	; 0x644 <_fpadd_parts+0xde>
     650:	21 50       	subi	r18, 0x01	; 1
     652:	30 40       	sbci	r19, 0x00	; 0
     654:	40 40       	sbci	r20, 0x00	; 0
     656:	50 40       	sbci	r21, 0x00	; 0
     658:	2e 21       	and	r18, r14
     65a:	3f 21       	and	r19, r15
     65c:	40 23       	and	r20, r16
     65e:	51 23       	and	r21, r17
     660:	21 15       	cp	r18, r1
     662:	31 05       	cpc	r19, r1
     664:	41 05       	cpc	r20, r1
     666:	51 05       	cpc	r21, r1
     668:	21 f0       	breq	.+8      	; 0x672 <_fpadd_parts+0x10c>
     66a:	21 e0       	ldi	r18, 0x01	; 1
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	79 01       	movw	r14, r18
     674:	8a 01       	movw	r16, r20
     676:	e6 28       	or	r14, r6
     678:	f7 28       	or	r15, r7
     67a:	08 29       	or	r16, r8
     67c:	19 29       	or	r17, r9
     67e:	3c c0       	rjmp	.+120    	; 0x6f8 <_fpadd_parts+0x192>
     680:	23 2b       	or	r18, r19
     682:	d1 f1       	breq	.+116    	; 0x6f8 <_fpadd_parts+0x192>
     684:	26 0e       	add	r2, r22
     686:	37 1e       	adc	r3, r23
     688:	35 01       	movw	r6, r10
     68a:	46 01       	movw	r8, r12
     68c:	06 2e       	mov	r0, r22
     68e:	04 c0       	rjmp	.+8      	; 0x698 <_fpadd_parts+0x132>
     690:	96 94       	lsr	r9
     692:	87 94       	ror	r8
     694:	77 94       	ror	r7
     696:	67 94       	ror	r6
     698:	0a 94       	dec	r0
     69a:	d2 f7       	brpl	.-12     	; 0x690 <_fpadd_parts+0x12a>
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	04 c0       	rjmp	.+8      	; 0x6ae <_fpadd_parts+0x148>
     6a6:	22 0f       	add	r18, r18
     6a8:	33 1f       	adc	r19, r19
     6aa:	44 1f       	adc	r20, r20
     6ac:	55 1f       	adc	r21, r21
     6ae:	6a 95       	dec	r22
     6b0:	d2 f7       	brpl	.-12     	; 0x6a6 <_fpadd_parts+0x140>
     6b2:	21 50       	subi	r18, 0x01	; 1
     6b4:	30 40       	sbci	r19, 0x00	; 0
     6b6:	40 40       	sbci	r20, 0x00	; 0
     6b8:	50 40       	sbci	r21, 0x00	; 0
     6ba:	2a 21       	and	r18, r10
     6bc:	3b 21       	and	r19, r11
     6be:	4c 21       	and	r20, r12
     6c0:	5d 21       	and	r21, r13
     6c2:	21 15       	cp	r18, r1
     6c4:	31 05       	cpc	r19, r1
     6c6:	41 05       	cpc	r20, r1
     6c8:	51 05       	cpc	r21, r1
     6ca:	21 f0       	breq	.+8      	; 0x6d4 <_fpadd_parts+0x16e>
     6cc:	21 e0       	ldi	r18, 0x01	; 1
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	40 e0       	ldi	r20, 0x00	; 0
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	59 01       	movw	r10, r18
     6d6:	6a 01       	movw	r12, r20
     6d8:	a6 28       	or	r10, r6
     6da:	b7 28       	or	r11, r7
     6dc:	c8 28       	or	r12, r8
     6de:	d9 28       	or	r13, r9
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <_fpadd_parts+0x192>
     6e2:	82 15       	cp	r24, r2
     6e4:	93 05       	cpc	r25, r3
     6e6:	2c f0       	brlt	.+10     	; 0x6f2 <_fpadd_parts+0x18c>
     6e8:	1c 01       	movw	r2, r24
     6ea:	aa 24       	eor	r10, r10
     6ec:	bb 24       	eor	r11, r11
     6ee:	65 01       	movw	r12, r10
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <_fpadd_parts+0x192>
     6f2:	ee 24       	eor	r14, r14
     6f4:	ff 24       	eor	r15, r15
     6f6:	87 01       	movw	r16, r14
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	9c 91       	ld	r25, X
     6fc:	d2 01       	movw	r26, r4
     6fe:	11 96       	adiw	r26, 0x01	; 1
     700:	8c 91       	ld	r24, X
     702:	98 17       	cp	r25, r24
     704:	09 f4       	brne	.+2      	; 0x708 <_fpadd_parts+0x1a2>
     706:	45 c0       	rjmp	.+138    	; 0x792 <_fpadd_parts+0x22c>
     708:	99 23       	and	r25, r25
     70a:	39 f0       	breq	.+14     	; 0x71a <_fpadd_parts+0x1b4>
     70c:	a8 01       	movw	r20, r16
     70e:	97 01       	movw	r18, r14
     710:	2a 19       	sub	r18, r10
     712:	3b 09       	sbc	r19, r11
     714:	4c 09       	sbc	r20, r12
     716:	5d 09       	sbc	r21, r13
     718:	06 c0       	rjmp	.+12     	; 0x726 <_fpadd_parts+0x1c0>
     71a:	a6 01       	movw	r20, r12
     71c:	95 01       	movw	r18, r10
     71e:	2e 19       	sub	r18, r14
     720:	3f 09       	sbc	r19, r15
     722:	40 0b       	sbc	r20, r16
     724:	51 0b       	sbc	r21, r17
     726:	57 fd       	sbrc	r21, 7
     728:	08 c0       	rjmp	.+16     	; 0x73a <_fpadd_parts+0x1d4>
     72a:	11 82       	std	Z+1, r1	; 0x01
     72c:	33 82       	std	Z+3, r3	; 0x03
     72e:	22 82       	std	Z+2, r2	; 0x02
     730:	24 83       	std	Z+4, r18	; 0x04
     732:	35 83       	std	Z+5, r19	; 0x05
     734:	46 83       	std	Z+6, r20	; 0x06
     736:	57 83       	std	Z+7, r21	; 0x07
     738:	1d c0       	rjmp	.+58     	; 0x774 <_fpadd_parts+0x20e>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	81 83       	std	Z+1, r24	; 0x01
     73e:	33 82       	std	Z+3, r3	; 0x03
     740:	22 82       	std	Z+2, r2	; 0x02
     742:	88 27       	eor	r24, r24
     744:	99 27       	eor	r25, r25
     746:	dc 01       	movw	r26, r24
     748:	82 1b       	sub	r24, r18
     74a:	93 0b       	sbc	r25, r19
     74c:	a4 0b       	sbc	r26, r20
     74e:	b5 0b       	sbc	r27, r21
     750:	84 83       	std	Z+4, r24	; 0x04
     752:	95 83       	std	Z+5, r25	; 0x05
     754:	a6 83       	std	Z+6, r26	; 0x06
     756:	b7 83       	std	Z+7, r27	; 0x07
     758:	0d c0       	rjmp	.+26     	; 0x774 <_fpadd_parts+0x20e>
     75a:	22 0f       	add	r18, r18
     75c:	33 1f       	adc	r19, r19
     75e:	44 1f       	adc	r20, r20
     760:	55 1f       	adc	r21, r21
     762:	24 83       	std	Z+4, r18	; 0x04
     764:	35 83       	std	Z+5, r19	; 0x05
     766:	46 83       	std	Z+6, r20	; 0x06
     768:	57 83       	std	Z+7, r21	; 0x07
     76a:	82 81       	ldd	r24, Z+2	; 0x02
     76c:	93 81       	ldd	r25, Z+3	; 0x03
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	93 83       	std	Z+3, r25	; 0x03
     772:	82 83       	std	Z+2, r24	; 0x02
     774:	24 81       	ldd	r18, Z+4	; 0x04
     776:	35 81       	ldd	r19, Z+5	; 0x05
     778:	46 81       	ldd	r20, Z+6	; 0x06
     77a:	57 81       	ldd	r21, Z+7	; 0x07
     77c:	da 01       	movw	r26, r20
     77e:	c9 01       	movw	r24, r18
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	a1 09       	sbc	r26, r1
     784:	b1 09       	sbc	r27, r1
     786:	8f 5f       	subi	r24, 0xFF	; 255
     788:	9f 4f       	sbci	r25, 0xFF	; 255
     78a:	af 4f       	sbci	r26, 0xFF	; 255
     78c:	bf 43       	sbci	r27, 0x3F	; 63
     78e:	28 f3       	brcs	.-54     	; 0x75a <_fpadd_parts+0x1f4>
     790:	0b c0       	rjmp	.+22     	; 0x7a8 <_fpadd_parts+0x242>
     792:	91 83       	std	Z+1, r25	; 0x01
     794:	33 82       	std	Z+3, r3	; 0x03
     796:	22 82       	std	Z+2, r2	; 0x02
     798:	ea 0c       	add	r14, r10
     79a:	fb 1c       	adc	r15, r11
     79c:	0c 1d       	adc	r16, r12
     79e:	1d 1d       	adc	r17, r13
     7a0:	e4 82       	std	Z+4, r14	; 0x04
     7a2:	f5 82       	std	Z+5, r15	; 0x05
     7a4:	06 83       	std	Z+6, r16	; 0x06
     7a6:	17 83       	std	Z+7, r17	; 0x07
     7a8:	83 e0       	ldi	r24, 0x03	; 3
     7aa:	80 83       	st	Z, r24
     7ac:	24 81       	ldd	r18, Z+4	; 0x04
     7ae:	35 81       	ldd	r19, Z+5	; 0x05
     7b0:	46 81       	ldd	r20, Z+6	; 0x06
     7b2:	57 81       	ldd	r21, Z+7	; 0x07
     7b4:	57 ff       	sbrs	r21, 7
     7b6:	1a c0       	rjmp	.+52     	; 0x7ec <_fpadd_parts+0x286>
     7b8:	c9 01       	movw	r24, r18
     7ba:	aa 27       	eor	r26, r26
     7bc:	97 fd       	sbrc	r25, 7
     7be:	a0 95       	com	r26
     7c0:	ba 2f       	mov	r27, r26
     7c2:	81 70       	andi	r24, 0x01	; 1
     7c4:	90 70       	andi	r25, 0x00	; 0
     7c6:	a0 70       	andi	r26, 0x00	; 0
     7c8:	b0 70       	andi	r27, 0x00	; 0
     7ca:	56 95       	lsr	r21
     7cc:	47 95       	ror	r20
     7ce:	37 95       	ror	r19
     7d0:	27 95       	ror	r18
     7d2:	82 2b       	or	r24, r18
     7d4:	93 2b       	or	r25, r19
     7d6:	a4 2b       	or	r26, r20
     7d8:	b5 2b       	or	r27, r21
     7da:	84 83       	std	Z+4, r24	; 0x04
     7dc:	95 83       	std	Z+5, r25	; 0x05
     7de:	a6 83       	std	Z+6, r26	; 0x06
     7e0:	b7 83       	std	Z+7, r27	; 0x07
     7e2:	82 81       	ldd	r24, Z+2	; 0x02
     7e4:	93 81       	ldd	r25, Z+3	; 0x03
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	93 83       	std	Z+3, r25	; 0x03
     7ea:	82 83       	std	Z+2, r24	; 0x02
     7ec:	df 01       	movw	r26, r30
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <_fpadd_parts+0x28c>
     7f0:	d2 01       	movw	r26, r4
     7f2:	cd 01       	movw	r24, r26
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62
     7f8:	e2 e1       	ldi	r30, 0x12	; 18
     7fa:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__epilogue_restores__>

000007fe <__subsf3>:
     7fe:	a0 e2       	ldi	r26, 0x20	; 32
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e5 e0       	ldi	r30, 0x05	; 5
     804:	f4 e0       	ldi	r31, 0x04	; 4
     806:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__prologue_saves__+0x18>
     80a:	69 83       	std	Y+1, r22	; 0x01
     80c:	7a 83       	std	Y+2, r23	; 0x02
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	9c 83       	std	Y+4, r25	; 0x04
     812:	2d 83       	std	Y+5, r18	; 0x05
     814:	3e 83       	std	Y+6, r19	; 0x06
     816:	4f 83       	std	Y+7, r20	; 0x07
     818:	58 87       	std	Y+8, r21	; 0x08
     81a:	e9 e0       	ldi	r30, 0x09	; 9
     81c:	ee 2e       	mov	r14, r30
     81e:	f1 2c       	mov	r15, r1
     820:	ec 0e       	add	r14, r28
     822:	fd 1e       	adc	r15, r29
     824:	ce 01       	movw	r24, r28
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	b7 01       	movw	r22, r14
     82a:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     82e:	8e 01       	movw	r16, r28
     830:	0f 5e       	subi	r16, 0xEF	; 239
     832:	1f 4f       	sbci	r17, 0xFF	; 255
     834:	ce 01       	movw	r24, r28
     836:	05 96       	adiw	r24, 0x05	; 5
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     83e:	8a 89       	ldd	r24, Y+18	; 0x12
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	89 27       	eor	r24, r25
     844:	8a 8b       	std	Y+18, r24	; 0x12
     846:	c7 01       	movw	r24, r14
     848:	b8 01       	movw	r22, r16
     84a:	ae 01       	movw	r20, r28
     84c:	47 5e       	subi	r20, 0xE7	; 231
     84e:	5f 4f       	sbci	r21, 0xFF	; 255
     850:	0e 94 b3 02 	call	0x566	; 0x566 <_fpadd_parts>
     854:	0e 94 61 07 	call	0xec2	; 0xec2 <__pack_f>
     858:	a0 96       	adiw	r28, 0x20	; 32
     85a:	e6 e0       	ldi	r30, 0x06	; 6
     85c:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__+0x18>

00000860 <__addsf3>:
     860:	a0 e2       	ldi	r26, 0x20	; 32
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e6 e3       	ldi	r30, 0x36	; 54
     866:	f4 e0       	ldi	r31, 0x04	; 4
     868:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__prologue_saves__+0x18>
     86c:	69 83       	std	Y+1, r22	; 0x01
     86e:	7a 83       	std	Y+2, r23	; 0x02
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	9c 83       	std	Y+4, r25	; 0x04
     874:	2d 83       	std	Y+5, r18	; 0x05
     876:	3e 83       	std	Y+6, r19	; 0x06
     878:	4f 83       	std	Y+7, r20	; 0x07
     87a:	58 87       	std	Y+8, r21	; 0x08
     87c:	f9 e0       	ldi	r31, 0x09	; 9
     87e:	ef 2e       	mov	r14, r31
     880:	f1 2c       	mov	r15, r1
     882:	ec 0e       	add	r14, r28
     884:	fd 1e       	adc	r15, r29
     886:	ce 01       	movw	r24, r28
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	b7 01       	movw	r22, r14
     88c:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     890:	8e 01       	movw	r16, r28
     892:	0f 5e       	subi	r16, 0xEF	; 239
     894:	1f 4f       	sbci	r17, 0xFF	; 255
     896:	ce 01       	movw	r24, r28
     898:	05 96       	adiw	r24, 0x05	; 5
     89a:	b8 01       	movw	r22, r16
     89c:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     8a0:	c7 01       	movw	r24, r14
     8a2:	b8 01       	movw	r22, r16
     8a4:	ae 01       	movw	r20, r28
     8a6:	47 5e       	subi	r20, 0xE7	; 231
     8a8:	5f 4f       	sbci	r21, 0xFF	; 255
     8aa:	0e 94 b3 02 	call	0x566	; 0x566 <_fpadd_parts>
     8ae:	0e 94 61 07 	call	0xec2	; 0xec2 <__pack_f>
     8b2:	a0 96       	adiw	r28, 0x20	; 32
     8b4:	e6 e0       	ldi	r30, 0x06	; 6
     8b6:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__+0x18>

000008ba <__mulsf3>:
     8ba:	a0 e2       	ldi	r26, 0x20	; 32
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	e3 e6       	ldi	r30, 0x63	; 99
     8c0:	f4 e0       	ldi	r31, 0x04	; 4
     8c2:	0c 94 07 09 	jmp	0x120e	; 0x120e <__prologue_saves__>
     8c6:	69 83       	std	Y+1, r22	; 0x01
     8c8:	7a 83       	std	Y+2, r23	; 0x02
     8ca:	8b 83       	std	Y+3, r24	; 0x03
     8cc:	9c 83       	std	Y+4, r25	; 0x04
     8ce:	2d 83       	std	Y+5, r18	; 0x05
     8d0:	3e 83       	std	Y+6, r19	; 0x06
     8d2:	4f 83       	std	Y+7, r20	; 0x07
     8d4:	58 87       	std	Y+8, r21	; 0x08
     8d6:	ce 01       	movw	r24, r28
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	be 01       	movw	r22, r28
     8dc:	67 5f       	subi	r22, 0xF7	; 247
     8de:	7f 4f       	sbci	r23, 0xFF	; 255
     8e0:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     8e4:	ce 01       	movw	r24, r28
     8e6:	05 96       	adiw	r24, 0x05	; 5
     8e8:	be 01       	movw	r22, r28
     8ea:	6f 5e       	subi	r22, 0xEF	; 239
     8ec:	7f 4f       	sbci	r23, 0xFF	; 255
     8ee:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     8f2:	99 85       	ldd	r25, Y+9	; 0x09
     8f4:	92 30       	cpi	r25, 0x02	; 2
     8f6:	88 f0       	brcs	.+34     	; 0x91a <__mulsf3+0x60>
     8f8:	89 89       	ldd	r24, Y+17	; 0x11
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	c8 f0       	brcs	.+50     	; 0x930 <__mulsf3+0x76>
     8fe:	94 30       	cpi	r25, 0x04	; 4
     900:	19 f4       	brne	.+6      	; 0x908 <__mulsf3+0x4e>
     902:	82 30       	cpi	r24, 0x02	; 2
     904:	51 f4       	brne	.+20     	; 0x91a <__mulsf3+0x60>
     906:	04 c0       	rjmp	.+8      	; 0x910 <__mulsf3+0x56>
     908:	84 30       	cpi	r24, 0x04	; 4
     90a:	29 f4       	brne	.+10     	; 0x916 <__mulsf3+0x5c>
     90c:	92 30       	cpi	r25, 0x02	; 2
     90e:	81 f4       	brne	.+32     	; 0x930 <__mulsf3+0x76>
     910:	80 e6       	ldi	r24, 0x60	; 96
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	c6 c0       	rjmp	.+396    	; 0xaa2 <__mulsf3+0x1e8>
     916:	92 30       	cpi	r25, 0x02	; 2
     918:	49 f4       	brne	.+18     	; 0x92c <__mulsf3+0x72>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	9a 85       	ldd	r25, Y+10	; 0x0a
     91e:	8a 89       	ldd	r24, Y+18	; 0x12
     920:	98 13       	cpse	r25, r24
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	2a 87       	std	Y+10, r18	; 0x0a
     926:	ce 01       	movw	r24, r28
     928:	09 96       	adiw	r24, 0x09	; 9
     92a:	bb c0       	rjmp	.+374    	; 0xaa2 <__mulsf3+0x1e8>
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	49 f4       	brne	.+18     	; 0x942 <__mulsf3+0x88>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	9a 85       	ldd	r25, Y+10	; 0x0a
     934:	8a 89       	ldd	r24, Y+18	; 0x12
     936:	98 13       	cpse	r25, r24
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	2a 8b       	std	Y+18, r18	; 0x12
     93c:	ce 01       	movw	r24, r28
     93e:	41 96       	adiw	r24, 0x11	; 17
     940:	b0 c0       	rjmp	.+352    	; 0xaa2 <__mulsf3+0x1e8>
     942:	2d 84       	ldd	r2, Y+13	; 0x0d
     944:	3e 84       	ldd	r3, Y+14	; 0x0e
     946:	4f 84       	ldd	r4, Y+15	; 0x0f
     948:	58 88       	ldd	r5, Y+16	; 0x10
     94a:	6d 88       	ldd	r6, Y+21	; 0x15
     94c:	7e 88       	ldd	r7, Y+22	; 0x16
     94e:	8f 88       	ldd	r8, Y+23	; 0x17
     950:	98 8c       	ldd	r9, Y+24	; 0x18
     952:	ee 24       	eor	r14, r14
     954:	ff 24       	eor	r15, r15
     956:	87 01       	movw	r16, r14
     958:	aa 24       	eor	r10, r10
     95a:	bb 24       	eor	r11, r11
     95c:	65 01       	movw	r12, r10
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	e0 e0       	ldi	r30, 0x00	; 0
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	c1 01       	movw	r24, r2
     96c:	81 70       	andi	r24, 0x01	; 1
     96e:	90 70       	andi	r25, 0x00	; 0
     970:	89 2b       	or	r24, r25
     972:	e9 f0       	breq	.+58     	; 0x9ae <__mulsf3+0xf4>
     974:	e6 0c       	add	r14, r6
     976:	f7 1c       	adc	r15, r7
     978:	08 1d       	adc	r16, r8
     97a:	19 1d       	adc	r17, r9
     97c:	9a 01       	movw	r18, r20
     97e:	ab 01       	movw	r20, r22
     980:	2a 0d       	add	r18, r10
     982:	3b 1d       	adc	r19, r11
     984:	4c 1d       	adc	r20, r12
     986:	5d 1d       	adc	r21, r13
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	e6 14       	cp	r14, r6
     992:	f7 04       	cpc	r15, r7
     994:	08 05       	cpc	r16, r8
     996:	19 05       	cpc	r17, r9
     998:	20 f4       	brcc	.+8      	; 0x9a2 <__mulsf3+0xe8>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a0 e0       	ldi	r26, 0x00	; 0
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	ba 01       	movw	r22, r20
     9a4:	a9 01       	movw	r20, r18
     9a6:	48 0f       	add	r20, r24
     9a8:	59 1f       	adc	r21, r25
     9aa:	6a 1f       	adc	r22, r26
     9ac:	7b 1f       	adc	r23, r27
     9ae:	aa 0c       	add	r10, r10
     9b0:	bb 1c       	adc	r11, r11
     9b2:	cc 1c       	adc	r12, r12
     9b4:	dd 1c       	adc	r13, r13
     9b6:	97 fe       	sbrs	r9, 7
     9b8:	08 c0       	rjmp	.+16     	; 0x9ca <__mulsf3+0x110>
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	a8 2a       	or	r10, r24
     9c4:	b9 2a       	or	r11, r25
     9c6:	ca 2a       	or	r12, r26
     9c8:	db 2a       	or	r13, r27
     9ca:	31 96       	adiw	r30, 0x01	; 1
     9cc:	e0 32       	cpi	r30, 0x20	; 32
     9ce:	f1 05       	cpc	r31, r1
     9d0:	49 f0       	breq	.+18     	; 0x9e4 <__mulsf3+0x12a>
     9d2:	66 0c       	add	r6, r6
     9d4:	77 1c       	adc	r7, r7
     9d6:	88 1c       	adc	r8, r8
     9d8:	99 1c       	adc	r9, r9
     9da:	56 94       	lsr	r5
     9dc:	47 94       	ror	r4
     9de:	37 94       	ror	r3
     9e0:	27 94       	ror	r2
     9e2:	c3 cf       	rjmp	.-122    	; 0x96a <__mulsf3+0xb0>
     9e4:	fa 85       	ldd	r31, Y+10	; 0x0a
     9e6:	ea 89       	ldd	r30, Y+18	; 0x12
     9e8:	2b 89       	ldd	r18, Y+19	; 0x13
     9ea:	3c 89       	ldd	r19, Y+20	; 0x14
     9ec:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ee:	9c 85       	ldd	r25, Y+12	; 0x0c
     9f0:	28 0f       	add	r18, r24
     9f2:	39 1f       	adc	r19, r25
     9f4:	2e 5f       	subi	r18, 0xFE	; 254
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	17 c0       	rjmp	.+46     	; 0xa28 <__mulsf3+0x16e>
     9fa:	ca 01       	movw	r24, r20
     9fc:	81 70       	andi	r24, 0x01	; 1
     9fe:	90 70       	andi	r25, 0x00	; 0
     a00:	89 2b       	or	r24, r25
     a02:	61 f0       	breq	.+24     	; 0xa1c <__mulsf3+0x162>
     a04:	16 95       	lsr	r17
     a06:	07 95       	ror	r16
     a08:	f7 94       	ror	r15
     a0a:	e7 94       	ror	r14
     a0c:	80 e0       	ldi	r24, 0x00	; 0
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	a0 e0       	ldi	r26, 0x00	; 0
     a12:	b0 e8       	ldi	r27, 0x80	; 128
     a14:	e8 2a       	or	r14, r24
     a16:	f9 2a       	or	r15, r25
     a18:	0a 2b       	or	r16, r26
     a1a:	1b 2b       	or	r17, r27
     a1c:	76 95       	lsr	r23
     a1e:	67 95       	ror	r22
     a20:	57 95       	ror	r21
     a22:	47 95       	ror	r20
     a24:	2f 5f       	subi	r18, 0xFF	; 255
     a26:	3f 4f       	sbci	r19, 0xFF	; 255
     a28:	77 fd       	sbrc	r23, 7
     a2a:	e7 cf       	rjmp	.-50     	; 0x9fa <__mulsf3+0x140>
     a2c:	0c c0       	rjmp	.+24     	; 0xa46 <__mulsf3+0x18c>
     a2e:	44 0f       	add	r20, r20
     a30:	55 1f       	adc	r21, r21
     a32:	66 1f       	adc	r22, r22
     a34:	77 1f       	adc	r23, r23
     a36:	17 fd       	sbrc	r17, 7
     a38:	41 60       	ori	r20, 0x01	; 1
     a3a:	ee 0c       	add	r14, r14
     a3c:	ff 1c       	adc	r15, r15
     a3e:	00 1f       	adc	r16, r16
     a40:	11 1f       	adc	r17, r17
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	30 40       	sbci	r19, 0x00	; 0
     a46:	40 30       	cpi	r20, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	59 07       	cpc	r21, r25
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	69 07       	cpc	r22, r25
     a50:	90 e4       	ldi	r25, 0x40	; 64
     a52:	79 07       	cpc	r23, r25
     a54:	60 f3       	brcs	.-40     	; 0xa2e <__mulsf3+0x174>
     a56:	2b 8f       	std	Y+27, r18	; 0x1b
     a58:	3c 8f       	std	Y+28, r19	; 0x1c
     a5a:	db 01       	movw	r26, r22
     a5c:	ca 01       	movw	r24, r20
     a5e:	8f 77       	andi	r24, 0x7F	; 127
     a60:	90 70       	andi	r25, 0x00	; 0
     a62:	a0 70       	andi	r26, 0x00	; 0
     a64:	b0 70       	andi	r27, 0x00	; 0
     a66:	80 34       	cpi	r24, 0x40	; 64
     a68:	91 05       	cpc	r25, r1
     a6a:	a1 05       	cpc	r26, r1
     a6c:	b1 05       	cpc	r27, r1
     a6e:	61 f4       	brne	.+24     	; 0xa88 <__mulsf3+0x1ce>
     a70:	47 fd       	sbrc	r20, 7
     a72:	0a c0       	rjmp	.+20     	; 0xa88 <__mulsf3+0x1ce>
     a74:	e1 14       	cp	r14, r1
     a76:	f1 04       	cpc	r15, r1
     a78:	01 05       	cpc	r16, r1
     a7a:	11 05       	cpc	r17, r1
     a7c:	29 f0       	breq	.+10     	; 0xa88 <__mulsf3+0x1ce>
     a7e:	40 5c       	subi	r20, 0xC0	; 192
     a80:	5f 4f       	sbci	r21, 0xFF	; 255
     a82:	6f 4f       	sbci	r22, 0xFF	; 255
     a84:	7f 4f       	sbci	r23, 0xFF	; 255
     a86:	40 78       	andi	r20, 0x80	; 128
     a88:	1a 8e       	std	Y+26, r1	; 0x1a
     a8a:	fe 17       	cp	r31, r30
     a8c:	11 f0       	breq	.+4      	; 0xa92 <__mulsf3+0x1d8>
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	8a 8f       	std	Y+26, r24	; 0x1a
     a92:	4d 8f       	std	Y+29, r20	; 0x1d
     a94:	5e 8f       	std	Y+30, r21	; 0x1e
     a96:	6f 8f       	std	Y+31, r22	; 0x1f
     a98:	78 a3       	std	Y+32, r23	; 0x20
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	89 8f       	std	Y+25, r24	; 0x19
     a9e:	ce 01       	movw	r24, r28
     aa0:	49 96       	adiw	r24, 0x19	; 25
     aa2:	0e 94 61 07 	call	0xec2	; 0xec2 <__pack_f>
     aa6:	a0 96       	adiw	r28, 0x20	; 32
     aa8:	e2 e1       	ldi	r30, 0x12	; 18
     aaa:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__epilogue_restores__>

00000aae <__gtsf2>:
     aae:	a8 e1       	ldi	r26, 0x18	; 24
     ab0:	b0 e0       	ldi	r27, 0x00	; 0
     ab2:	ed e5       	ldi	r30, 0x5D	; 93
     ab4:	f5 e0       	ldi	r31, 0x05	; 5
     ab6:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__prologue_saves__+0x18>
     aba:	69 83       	std	Y+1, r22	; 0x01
     abc:	7a 83       	std	Y+2, r23	; 0x02
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	9c 83       	std	Y+4, r25	; 0x04
     ac2:	2d 83       	std	Y+5, r18	; 0x05
     ac4:	3e 83       	std	Y+6, r19	; 0x06
     ac6:	4f 83       	std	Y+7, r20	; 0x07
     ac8:	58 87       	std	Y+8, r21	; 0x08
     aca:	89 e0       	ldi	r24, 0x09	; 9
     acc:	e8 2e       	mov	r14, r24
     ace:	f1 2c       	mov	r15, r1
     ad0:	ec 0e       	add	r14, r28
     ad2:	fd 1e       	adc	r15, r29
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	b7 01       	movw	r22, r14
     ada:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     ade:	8e 01       	movw	r16, r28
     ae0:	0f 5e       	subi	r16, 0xEF	; 239
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	ce 01       	movw	r24, r28
     ae6:	05 96       	adiw	r24, 0x05	; 5
     ae8:	b8 01       	movw	r22, r16
     aea:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     aee:	89 85       	ldd	r24, Y+9	; 0x09
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	40 f0       	brcs	.+16     	; 0xb04 <__gtsf2+0x56>
     af4:	89 89       	ldd	r24, Y+17	; 0x11
     af6:	82 30       	cpi	r24, 0x02	; 2
     af8:	28 f0       	brcs	.+10     	; 0xb04 <__gtsf2+0x56>
     afa:	c7 01       	movw	r24, r14
     afc:	b8 01       	movw	r22, r16
     afe:	0e 94 ae 08 	call	0x115c	; 0x115c <__fpcmp_parts_f>
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <__gtsf2+0x58>
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	68 96       	adiw	r28, 0x18	; 24
     b08:	e6 e0       	ldi	r30, 0x06	; 6
     b0a:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__+0x18>

00000b0e <__gesf2>:
     b0e:	a8 e1       	ldi	r26, 0x18	; 24
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	ed e8       	ldi	r30, 0x8D	; 141
     b14:	f5 e0       	ldi	r31, 0x05	; 5
     b16:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__prologue_saves__+0x18>
     b1a:	69 83       	std	Y+1, r22	; 0x01
     b1c:	7a 83       	std	Y+2, r23	; 0x02
     b1e:	8b 83       	std	Y+3, r24	; 0x03
     b20:	9c 83       	std	Y+4, r25	; 0x04
     b22:	2d 83       	std	Y+5, r18	; 0x05
     b24:	3e 83       	std	Y+6, r19	; 0x06
     b26:	4f 83       	std	Y+7, r20	; 0x07
     b28:	58 87       	std	Y+8, r21	; 0x08
     b2a:	89 e0       	ldi	r24, 0x09	; 9
     b2c:	e8 2e       	mov	r14, r24
     b2e:	f1 2c       	mov	r15, r1
     b30:	ec 0e       	add	r14, r28
     b32:	fd 1e       	adc	r15, r29
     b34:	ce 01       	movw	r24, r28
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	b7 01       	movw	r22, r14
     b3a:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     b3e:	8e 01       	movw	r16, r28
     b40:	0f 5e       	subi	r16, 0xEF	; 239
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	ce 01       	movw	r24, r28
     b46:	05 96       	adiw	r24, 0x05	; 5
     b48:	b8 01       	movw	r22, r16
     b4a:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     b4e:	89 85       	ldd	r24, Y+9	; 0x09
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	40 f0       	brcs	.+16     	; 0xb64 <__gesf2+0x56>
     b54:	89 89       	ldd	r24, Y+17	; 0x11
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	28 f0       	brcs	.+10     	; 0xb64 <__gesf2+0x56>
     b5a:	c7 01       	movw	r24, r14
     b5c:	b8 01       	movw	r22, r16
     b5e:	0e 94 ae 08 	call	0x115c	; 0x115c <__fpcmp_parts_f>
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <__gesf2+0x58>
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	68 96       	adiw	r28, 0x18	; 24
     b68:	e6 e0       	ldi	r30, 0x06	; 6
     b6a:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__+0x18>

00000b6e <__ltsf2>:
     b6e:	a8 e1       	ldi	r26, 0x18	; 24
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ed eb       	ldi	r30, 0xBD	; 189
     b74:	f5 e0       	ldi	r31, 0x05	; 5
     b76:	0c 94 13 09 	jmp	0x1226	; 0x1226 <__prologue_saves__+0x18>
     b7a:	69 83       	std	Y+1, r22	; 0x01
     b7c:	7a 83       	std	Y+2, r23	; 0x02
     b7e:	8b 83       	std	Y+3, r24	; 0x03
     b80:	9c 83       	std	Y+4, r25	; 0x04
     b82:	2d 83       	std	Y+5, r18	; 0x05
     b84:	3e 83       	std	Y+6, r19	; 0x06
     b86:	4f 83       	std	Y+7, r20	; 0x07
     b88:	58 87       	std	Y+8, r21	; 0x08
     b8a:	89 e0       	ldi	r24, 0x09	; 9
     b8c:	e8 2e       	mov	r14, r24
     b8e:	f1 2c       	mov	r15, r1
     b90:	ec 0e       	add	r14, r28
     b92:	fd 1e       	adc	r15, r29
     b94:	ce 01       	movw	r24, r28
     b96:	01 96       	adiw	r24, 0x01	; 1
     b98:	b7 01       	movw	r22, r14
     b9a:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     b9e:	8e 01       	movw	r16, r28
     ba0:	0f 5e       	subi	r16, 0xEF	; 239
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	ce 01       	movw	r24, r28
     ba6:	05 96       	adiw	r24, 0x05	; 5
     ba8:	b8 01       	movw	r22, r16
     baa:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	40 f0       	brcs	.+16     	; 0xbc4 <__ltsf2+0x56>
     bb4:	89 89       	ldd	r24, Y+17	; 0x11
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	28 f0       	brcs	.+10     	; 0xbc4 <__ltsf2+0x56>
     bba:	c7 01       	movw	r24, r14
     bbc:	b8 01       	movw	r22, r16
     bbe:	0e 94 ae 08 	call	0x115c	; 0x115c <__fpcmp_parts_f>
     bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <__ltsf2+0x58>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	68 96       	adiw	r28, 0x18	; 24
     bc8:	e6 e0       	ldi	r30, 0x06	; 6
     bca:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__epilogue_restores__+0x18>

00000bce <__floatsisf>:
     bce:	a8 e0       	ldi	r26, 0x08	; 8
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ed ee       	ldi	r30, 0xED	; 237
     bd4:	f5 e0       	ldi	r31, 0x05	; 5
     bd6:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x12>
     bda:	9b 01       	movw	r18, r22
     bdc:	ac 01       	movw	r20, r24
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	89 83       	std	Y+1, r24	; 0x01
     be2:	da 01       	movw	r26, r20
     be4:	c9 01       	movw	r24, r18
     be6:	88 27       	eor	r24, r24
     be8:	b7 fd       	sbrc	r27, 7
     bea:	83 95       	inc	r24
     bec:	99 27       	eor	r25, r25
     bee:	aa 27       	eor	r26, r26
     bf0:	bb 27       	eor	r27, r27
     bf2:	b8 2e       	mov	r11, r24
     bf4:	21 15       	cp	r18, r1
     bf6:	31 05       	cpc	r19, r1
     bf8:	41 05       	cpc	r20, r1
     bfa:	51 05       	cpc	r21, r1
     bfc:	19 f4       	brne	.+6      	; 0xc04 <__floatsisf+0x36>
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	89 83       	std	Y+1, r24	; 0x01
     c02:	3a c0       	rjmp	.+116    	; 0xc78 <__floatsisf+0xaa>
     c04:	88 23       	and	r24, r24
     c06:	a9 f0       	breq	.+42     	; 0xc32 <__floatsisf+0x64>
     c08:	20 30       	cpi	r18, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	38 07       	cpc	r19, r24
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	48 07       	cpc	r20, r24
     c12:	80 e8       	ldi	r24, 0x80	; 128
     c14:	58 07       	cpc	r21, r24
     c16:	29 f4       	brne	.+10     	; 0xc22 <__floatsisf+0x54>
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	9f ec       	ldi	r25, 0xCF	; 207
     c20:	30 c0       	rjmp	.+96     	; 0xc82 <__floatsisf+0xb4>
     c22:	ee 24       	eor	r14, r14
     c24:	ff 24       	eor	r15, r15
     c26:	87 01       	movw	r16, r14
     c28:	e2 1a       	sub	r14, r18
     c2a:	f3 0a       	sbc	r15, r19
     c2c:	04 0b       	sbc	r16, r20
     c2e:	15 0b       	sbc	r17, r21
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <__floatsisf+0x68>
     c32:	79 01       	movw	r14, r18
     c34:	8a 01       	movw	r16, r20
     c36:	8e e1       	ldi	r24, 0x1E	; 30
     c38:	c8 2e       	mov	r12, r24
     c3a:	d1 2c       	mov	r13, r1
     c3c:	dc 82       	std	Y+4, r13	; 0x04
     c3e:	cb 82       	std	Y+3, r12	; 0x03
     c40:	ed 82       	std	Y+5, r14	; 0x05
     c42:	fe 82       	std	Y+6, r15	; 0x06
     c44:	0f 83       	std	Y+7, r16	; 0x07
     c46:	18 87       	std	Y+8, r17	; 0x08
     c48:	c8 01       	movw	r24, r16
     c4a:	b7 01       	movw	r22, r14
     c4c:	0e 94 12 07 	call	0xe24	; 0xe24 <__clzsi2>
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	18 16       	cp	r1, r24
     c54:	19 06       	cpc	r1, r25
     c56:	84 f4       	brge	.+32     	; 0xc78 <__floatsisf+0xaa>
     c58:	08 2e       	mov	r0, r24
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__floatsisf+0x96>
     c5c:	ee 0c       	add	r14, r14
     c5e:	ff 1c       	adc	r15, r15
     c60:	00 1f       	adc	r16, r16
     c62:	11 1f       	adc	r17, r17
     c64:	0a 94       	dec	r0
     c66:	d2 f7       	brpl	.-12     	; 0xc5c <__floatsisf+0x8e>
     c68:	ed 82       	std	Y+5, r14	; 0x05
     c6a:	fe 82       	std	Y+6, r15	; 0x06
     c6c:	0f 83       	std	Y+7, r16	; 0x07
     c6e:	18 87       	std	Y+8, r17	; 0x08
     c70:	c8 1a       	sub	r12, r24
     c72:	d9 0a       	sbc	r13, r25
     c74:	dc 82       	std	Y+4, r13	; 0x04
     c76:	cb 82       	std	Y+3, r12	; 0x03
     c78:	ba 82       	std	Y+2, r11	; 0x02
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	0e 94 61 07 	call	0xec2	; 0xec2 <__pack_f>
     c82:	28 96       	adiw	r28, 0x08	; 8
     c84:	e9 e0       	ldi	r30, 0x09	; 9
     c86:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x12>

00000c8a <__fixsfsi>:
     c8a:	ac e0       	ldi	r26, 0x0C	; 12
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	eb e4       	ldi	r30, 0x4B	; 75
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	0c 94 17 09 	jmp	0x122e	; 0x122e <__prologue_saves__+0x20>
     c96:	69 83       	std	Y+1, r22	; 0x01
     c98:	7a 83       	std	Y+2, r23	; 0x02
     c9a:	8b 83       	std	Y+3, r24	; 0x03
     c9c:	9c 83       	std	Y+4, r25	; 0x04
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	be 01       	movw	r22, r28
     ca4:	6b 5f       	subi	r22, 0xFB	; 251
     ca6:	7f 4f       	sbci	r23, 0xFF	; 255
     ca8:	0e 94 36 08 	call	0x106c	; 0x106c <__unpack_f>
     cac:	8d 81       	ldd	r24, Y+5	; 0x05
     cae:	82 30       	cpi	r24, 0x02	; 2
     cb0:	61 f1       	breq	.+88     	; 0xd0a <__fixsfsi+0x80>
     cb2:	82 30       	cpi	r24, 0x02	; 2
     cb4:	50 f1       	brcs	.+84     	; 0xd0a <__fixsfsi+0x80>
     cb6:	84 30       	cpi	r24, 0x04	; 4
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <__fixsfsi+0x38>
     cba:	8e 81       	ldd	r24, Y+6	; 0x06
     cbc:	88 23       	and	r24, r24
     cbe:	51 f1       	breq	.+84     	; 0xd14 <__fixsfsi+0x8a>
     cc0:	2e c0       	rjmp	.+92     	; 0xd1e <__fixsfsi+0x94>
     cc2:	2f 81       	ldd	r18, Y+7	; 0x07
     cc4:	38 85       	ldd	r19, Y+8	; 0x08
     cc6:	37 fd       	sbrc	r19, 7
     cc8:	20 c0       	rjmp	.+64     	; 0xd0a <__fixsfsi+0x80>
     cca:	6e 81       	ldd	r22, Y+6	; 0x06
     ccc:	2f 31       	cpi	r18, 0x1F	; 31
     cce:	31 05       	cpc	r19, r1
     cd0:	1c f0       	brlt	.+6      	; 0xcd8 <__fixsfsi+0x4e>
     cd2:	66 23       	and	r22, r22
     cd4:	f9 f0       	breq	.+62     	; 0xd14 <__fixsfsi+0x8a>
     cd6:	23 c0       	rjmp	.+70     	; 0xd1e <__fixsfsi+0x94>
     cd8:	8e e1       	ldi	r24, 0x1E	; 30
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	82 1b       	sub	r24, r18
     cde:	93 0b       	sbc	r25, r19
     ce0:	29 85       	ldd	r18, Y+9	; 0x09
     ce2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce4:	4b 85       	ldd	r20, Y+11	; 0x0b
     ce6:	5c 85       	ldd	r21, Y+12	; 0x0c
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__fixsfsi+0x68>
     cea:	56 95       	lsr	r21
     cec:	47 95       	ror	r20
     cee:	37 95       	ror	r19
     cf0:	27 95       	ror	r18
     cf2:	8a 95       	dec	r24
     cf4:	d2 f7       	brpl	.-12     	; 0xcea <__fixsfsi+0x60>
     cf6:	66 23       	and	r22, r22
     cf8:	b1 f0       	breq	.+44     	; 0xd26 <__fixsfsi+0x9c>
     cfa:	50 95       	com	r21
     cfc:	40 95       	com	r20
     cfe:	30 95       	com	r19
     d00:	21 95       	neg	r18
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	4f 4f       	sbci	r20, 0xFF	; 255
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	0e c0       	rjmp	.+28     	; 0xd26 <__fixsfsi+0x9c>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	09 c0       	rjmp	.+18     	; 0xd26 <__fixsfsi+0x9c>
     d14:	2f ef       	ldi	r18, 0xFF	; 255
     d16:	3f ef       	ldi	r19, 0xFF	; 255
     d18:	4f ef       	ldi	r20, 0xFF	; 255
     d1a:	5f e7       	ldi	r21, 0x7F	; 127
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__fixsfsi+0x9c>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e8       	ldi	r21, 0x80	; 128
     d26:	b9 01       	movw	r22, r18
     d28:	ca 01       	movw	r24, r20
     d2a:	2c 96       	adiw	r28, 0x0c	; 12
     d2c:	e2 e0       	ldi	r30, 0x02	; 2
     d2e:	0c 94 33 09 	jmp	0x1266	; 0x1266 <__epilogue_restores__+0x20>

00000d32 <__floatunsisf>:
     d32:	a8 e0       	ldi	r26, 0x08	; 8
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ef e9       	ldi	r30, 0x9F	; 159
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__prologue_saves__+0x10>
     d3e:	7b 01       	movw	r14, r22
     d40:	8c 01       	movw	r16, r24
     d42:	61 15       	cp	r22, r1
     d44:	71 05       	cpc	r23, r1
     d46:	81 05       	cpc	r24, r1
     d48:	91 05       	cpc	r25, r1
     d4a:	19 f4       	brne	.+6      	; 0xd52 <__floatunsisf+0x20>
     d4c:	82 e0       	ldi	r24, 0x02	; 2
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	60 c0       	rjmp	.+192    	; 0xe12 <__floatunsisf+0xe0>
     d52:	83 e0       	ldi	r24, 0x03	; 3
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	8e e1       	ldi	r24, 0x1E	; 30
     d58:	c8 2e       	mov	r12, r24
     d5a:	d1 2c       	mov	r13, r1
     d5c:	dc 82       	std	Y+4, r13	; 0x04
     d5e:	cb 82       	std	Y+3, r12	; 0x03
     d60:	ed 82       	std	Y+5, r14	; 0x05
     d62:	fe 82       	std	Y+6, r15	; 0x06
     d64:	0f 83       	std	Y+7, r16	; 0x07
     d66:	18 87       	std	Y+8, r17	; 0x08
     d68:	c8 01       	movw	r24, r16
     d6a:	b7 01       	movw	r22, r14
     d6c:	0e 94 12 07 	call	0xe24	; 0xe24 <__clzsi2>
     d70:	fc 01       	movw	r30, r24
     d72:	31 97       	sbiw	r30, 0x01	; 1
     d74:	f7 ff       	sbrs	r31, 7
     d76:	3b c0       	rjmp	.+118    	; 0xdee <__floatunsisf+0xbc>
     d78:	22 27       	eor	r18, r18
     d7a:	33 27       	eor	r19, r19
     d7c:	2e 1b       	sub	r18, r30
     d7e:	3f 0b       	sbc	r19, r31
     d80:	57 01       	movw	r10, r14
     d82:	68 01       	movw	r12, r16
     d84:	02 2e       	mov	r0, r18
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <__floatunsisf+0x5e>
     d88:	d6 94       	lsr	r13
     d8a:	c7 94       	ror	r12
     d8c:	b7 94       	ror	r11
     d8e:	a7 94       	ror	r10
     d90:	0a 94       	dec	r0
     d92:	d2 f7       	brpl	.-12     	; 0xd88 <__floatunsisf+0x56>
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	a0 e0       	ldi	r26, 0x00	; 0
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	04 c0       	rjmp	.+8      	; 0xdae <__floatunsisf+0x7c>
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	aa 1f       	adc	r26, r26
     dac:	bb 1f       	adc	r27, r27
     dae:	2a 95       	dec	r18
     db0:	d2 f7       	brpl	.-12     	; 0xda6 <__floatunsisf+0x74>
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	a1 09       	sbc	r26, r1
     db6:	b1 09       	sbc	r27, r1
     db8:	8e 21       	and	r24, r14
     dba:	9f 21       	and	r25, r15
     dbc:	a0 23       	and	r26, r16
     dbe:	b1 23       	and	r27, r17
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	a1 05       	cpc	r26, r1
     dc4:	b1 05       	cpc	r27, r1
     dc6:	21 f0       	breq	.+8      	; 0xdd0 <__floatunsisf+0x9e>
     dc8:	41 e0       	ldi	r20, 0x01	; 1
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	4a 29       	or	r20, r10
     dd2:	5b 29       	or	r21, r11
     dd4:	6c 29       	or	r22, r12
     dd6:	7d 29       	or	r23, r13
     dd8:	4d 83       	std	Y+5, r20	; 0x05
     dda:	5e 83       	std	Y+6, r21	; 0x06
     ddc:	6f 83       	std	Y+7, r22	; 0x07
     dde:	78 87       	std	Y+8, r23	; 0x08
     de0:	8e e1       	ldi	r24, 0x1E	; 30
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	8e 1b       	sub	r24, r30
     de6:	9f 0b       	sbc	r25, r31
     de8:	9c 83       	std	Y+4, r25	; 0x04
     dea:	8b 83       	std	Y+3, r24	; 0x03
     dec:	12 c0       	rjmp	.+36     	; 0xe12 <__floatunsisf+0xe0>
     dee:	30 97       	sbiw	r30, 0x00	; 0
     df0:	81 f0       	breq	.+32     	; 0xe12 <__floatunsisf+0xe0>
     df2:	0e 2e       	mov	r0, r30
     df4:	04 c0       	rjmp	.+8      	; 0xdfe <__floatunsisf+0xcc>
     df6:	ee 0c       	add	r14, r14
     df8:	ff 1c       	adc	r15, r15
     dfa:	00 1f       	adc	r16, r16
     dfc:	11 1f       	adc	r17, r17
     dfe:	0a 94       	dec	r0
     e00:	d2 f7       	brpl	.-12     	; 0xdf6 <__floatunsisf+0xc4>
     e02:	ed 82       	std	Y+5, r14	; 0x05
     e04:	fe 82       	std	Y+6, r15	; 0x06
     e06:	0f 83       	std	Y+7, r16	; 0x07
     e08:	18 87       	std	Y+8, r17	; 0x08
     e0a:	ce 1a       	sub	r12, r30
     e0c:	df 0a       	sbc	r13, r31
     e0e:	dc 82       	std	Y+4, r13	; 0x04
     e10:	cb 82       	std	Y+3, r12	; 0x03
     e12:	1a 82       	std	Y+2, r1	; 0x02
     e14:	ce 01       	movw	r24, r28
     e16:	01 96       	adiw	r24, 0x01	; 1
     e18:	0e 94 61 07 	call	0xec2	; 0xec2 <__pack_f>
     e1c:	28 96       	adiw	r28, 0x08	; 8
     e1e:	ea e0       	ldi	r30, 0x0A	; 10
     e20:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <__epilogue_restores__+0x10>

00000e24 <__clzsi2>:
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	7b 01       	movw	r14, r22
     e2e:	8c 01       	movw	r16, r24
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	e8 16       	cp	r14, r24
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	f8 06       	cpc	r15, r24
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	08 07       	cpc	r16, r24
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	18 07       	cpc	r17, r24
     e40:	88 f4       	brcc	.+34     	; 0xe64 <__clzsi2+0x40>
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	e8 16       	cp	r14, r24
     e46:	f1 04       	cpc	r15, r1
     e48:	01 05       	cpc	r16, r1
     e4a:	11 05       	cpc	r17, r1
     e4c:	31 f0       	breq	.+12     	; 0xe5a <__clzsi2+0x36>
     e4e:	28 f0       	brcs	.+10     	; 0xe5a <__clzsi2+0x36>
     e50:	88 e0       	ldi	r24, 0x08	; 8
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	17 c0       	rjmp	.+46     	; 0xe88 <__clzsi2+0x64>
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	a0 e0       	ldi	r26, 0x00	; 0
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	12 c0       	rjmp	.+36     	; 0xe88 <__clzsi2+0x64>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	e8 16       	cp	r14, r24
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	f8 06       	cpc	r15, r24
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 07       	cpc	r16, r24
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	18 07       	cpc	r17, r24
     e74:	28 f0       	brcs	.+10     	; 0xe80 <__clzsi2+0x5c>
     e76:	88 e1       	ldi	r24, 0x18	; 24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <__clzsi2+0x64>
     e80:	80 e1       	ldi	r24, 0x10	; 16
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	20 e2       	ldi	r18, 0x20	; 32
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	28 1b       	sub	r18, r24
     e92:	39 0b       	sbc	r19, r25
     e94:	4a 0b       	sbc	r20, r26
     e96:	5b 0b       	sbc	r21, r27
     e98:	04 c0       	rjmp	.+8      	; 0xea2 <__clzsi2+0x7e>
     e9a:	16 95       	lsr	r17
     e9c:	07 95       	ror	r16
     e9e:	f7 94       	ror	r15
     ea0:	e7 94       	ror	r14
     ea2:	8a 95       	dec	r24
     ea4:	d2 f7       	brpl	.-12     	; 0xe9a <__clzsi2+0x76>
     ea6:	f7 01       	movw	r30, r14
     ea8:	e8 59       	subi	r30, 0x98	; 152
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	80 81       	ld	r24, Z
     eae:	28 1b       	sub	r18, r24
     eb0:	31 09       	sbc	r19, r1
     eb2:	41 09       	sbc	r20, r1
     eb4:	51 09       	sbc	r21, r1
     eb6:	c9 01       	movw	r24, r18
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <__pack_f>:
     ec2:	df 92       	push	r13
     ec4:	ef 92       	push	r14
     ec6:	ff 92       	push	r15
     ec8:	0f 93       	push	r16
     eca:	1f 93       	push	r17
     ecc:	fc 01       	movw	r30, r24
     ece:	e4 80       	ldd	r14, Z+4	; 0x04
     ed0:	f5 80       	ldd	r15, Z+5	; 0x05
     ed2:	06 81       	ldd	r16, Z+6	; 0x06
     ed4:	17 81       	ldd	r17, Z+7	; 0x07
     ed6:	d1 80       	ldd	r13, Z+1	; 0x01
     ed8:	80 81       	ld	r24, Z
     eda:	82 30       	cpi	r24, 0x02	; 2
     edc:	48 f4       	brcc	.+18     	; 0xef0 <__pack_f+0x2e>
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e1       	ldi	r26, 0x10	; 16
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e8 2a       	or	r14, r24
     ee8:	f9 2a       	or	r15, r25
     eea:	0a 2b       	or	r16, r26
     eec:	1b 2b       	or	r17, r27
     eee:	a5 c0       	rjmp	.+330    	; 0x103a <__pack_f+0x178>
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	09 f4       	brne	.+2      	; 0xef6 <__pack_f+0x34>
     ef4:	9f c0       	rjmp	.+318    	; 0x1034 <__pack_f+0x172>
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	21 f4       	brne	.+8      	; 0xf02 <__pack_f+0x40>
     efa:	ee 24       	eor	r14, r14
     efc:	ff 24       	eor	r15, r15
     efe:	87 01       	movw	r16, r14
     f00:	05 c0       	rjmp	.+10     	; 0xf0c <__pack_f+0x4a>
     f02:	e1 14       	cp	r14, r1
     f04:	f1 04       	cpc	r15, r1
     f06:	01 05       	cpc	r16, r1
     f08:	11 05       	cpc	r17, r1
     f0a:	19 f4       	brne	.+6      	; 0xf12 <__pack_f+0x50>
     f0c:	e0 e0       	ldi	r30, 0x00	; 0
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	96 c0       	rjmp	.+300    	; 0x103e <__pack_f+0x17c>
     f12:	62 81       	ldd	r22, Z+2	; 0x02
     f14:	73 81       	ldd	r23, Z+3	; 0x03
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	62 38       	cpi	r22, 0x82	; 130
     f1a:	79 07       	cpc	r23, r25
     f1c:	0c f0       	brlt	.+2      	; 0xf20 <__pack_f+0x5e>
     f1e:	5b c0       	rjmp	.+182    	; 0xfd6 <__pack_f+0x114>
     f20:	22 e8       	ldi	r18, 0x82	; 130
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	26 1b       	sub	r18, r22
     f26:	37 0b       	sbc	r19, r23
     f28:	2a 31       	cpi	r18, 0x1A	; 26
     f2a:	31 05       	cpc	r19, r1
     f2c:	2c f0       	brlt	.+10     	; 0xf38 <__pack_f+0x76>
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	2a c0       	rjmp	.+84     	; 0xf8c <__pack_f+0xca>
     f38:	b8 01       	movw	r22, r16
     f3a:	a7 01       	movw	r20, r14
     f3c:	02 2e       	mov	r0, r18
     f3e:	04 c0       	rjmp	.+8      	; 0xf48 <__pack_f+0x86>
     f40:	76 95       	lsr	r23
     f42:	67 95       	ror	r22
     f44:	57 95       	ror	r21
     f46:	47 95       	ror	r20
     f48:	0a 94       	dec	r0
     f4a:	d2 f7       	brpl	.-12     	; 0xf40 <__pack_f+0x7e>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a0 e0       	ldi	r26, 0x00	; 0
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <__pack_f+0x9c>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	aa 1f       	adc	r26, r26
     f5c:	bb 1f       	adc	r27, r27
     f5e:	2a 95       	dec	r18
     f60:	d2 f7       	brpl	.-12     	; 0xf56 <__pack_f+0x94>
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	a1 09       	sbc	r26, r1
     f66:	b1 09       	sbc	r27, r1
     f68:	8e 21       	and	r24, r14
     f6a:	9f 21       	and	r25, r15
     f6c:	a0 23       	and	r26, r16
     f6e:	b1 23       	and	r27, r17
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	a1 05       	cpc	r26, r1
     f74:	b1 05       	cpc	r27, r1
     f76:	21 f0       	breq	.+8      	; 0xf80 <__pack_f+0xbe>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	9a 01       	movw	r18, r20
     f82:	ab 01       	movw	r20, r22
     f84:	28 2b       	or	r18, r24
     f86:	39 2b       	or	r19, r25
     f88:	4a 2b       	or	r20, r26
     f8a:	5b 2b       	or	r21, r27
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	8f 77       	andi	r24, 0x7F	; 127
     f92:	90 70       	andi	r25, 0x00	; 0
     f94:	a0 70       	andi	r26, 0x00	; 0
     f96:	b0 70       	andi	r27, 0x00	; 0
     f98:	80 34       	cpi	r24, 0x40	; 64
     f9a:	91 05       	cpc	r25, r1
     f9c:	a1 05       	cpc	r26, r1
     f9e:	b1 05       	cpc	r27, r1
     fa0:	39 f4       	brne	.+14     	; 0xfb0 <__pack_f+0xee>
     fa2:	27 ff       	sbrs	r18, 7
     fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <__pack_f+0xf6>
     fa6:	20 5c       	subi	r18, 0xC0	; 192
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	4f 4f       	sbci	r20, 0xFF	; 255
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__pack_f+0xf6>
     fb0:	21 5c       	subi	r18, 0xC1	; 193
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	4f 4f       	sbci	r20, 0xFF	; 255
     fb6:	5f 4f       	sbci	r21, 0xFF	; 255
     fb8:	e0 e0       	ldi	r30, 0x00	; 0
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	20 30       	cpi	r18, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	3a 07       	cpc	r19, r26
     fc2:	a0 e0       	ldi	r26, 0x00	; 0
     fc4:	4a 07       	cpc	r20, r26
     fc6:	a0 e4       	ldi	r26, 0x40	; 64
     fc8:	5a 07       	cpc	r21, r26
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <__pack_f+0x10e>
     fcc:	e1 e0       	ldi	r30, 0x01	; 1
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	79 01       	movw	r14, r18
     fd2:	8a 01       	movw	r16, r20
     fd4:	27 c0       	rjmp	.+78     	; 0x1024 <__pack_f+0x162>
     fd6:	60 38       	cpi	r22, 0x80	; 128
     fd8:	71 05       	cpc	r23, r1
     fda:	64 f5       	brge	.+88     	; 0x1034 <__pack_f+0x172>
     fdc:	fb 01       	movw	r30, r22
     fde:	e1 58       	subi	r30, 0x81	; 129
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	d8 01       	movw	r26, r16
     fe4:	c7 01       	movw	r24, r14
     fe6:	8f 77       	andi	r24, 0x7F	; 127
     fe8:	90 70       	andi	r25, 0x00	; 0
     fea:	a0 70       	andi	r26, 0x00	; 0
     fec:	b0 70       	andi	r27, 0x00	; 0
     fee:	80 34       	cpi	r24, 0x40	; 64
     ff0:	91 05       	cpc	r25, r1
     ff2:	a1 05       	cpc	r26, r1
     ff4:	b1 05       	cpc	r27, r1
     ff6:	39 f4       	brne	.+14     	; 0x1006 <__pack_f+0x144>
     ff8:	e7 fe       	sbrs	r14, 7
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <__pack_f+0x154>
     ffc:	80 e4       	ldi	r24, 0x40	; 64
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	04 c0       	rjmp	.+8      	; 0x100e <__pack_f+0x14c>
    1006:	8f e3       	ldi	r24, 0x3F	; 63
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e8 0e       	add	r14, r24
    1010:	f9 1e       	adc	r15, r25
    1012:	0a 1f       	adc	r16, r26
    1014:	1b 1f       	adc	r17, r27
    1016:	17 ff       	sbrs	r17, 7
    1018:	05 c0       	rjmp	.+10     	; 0x1024 <__pack_f+0x162>
    101a:	16 95       	lsr	r17
    101c:	07 95       	ror	r16
    101e:	f7 94       	ror	r15
    1020:	e7 94       	ror	r14
    1022:	31 96       	adiw	r30, 0x01	; 1
    1024:	87 e0       	ldi	r24, 0x07	; 7
    1026:	16 95       	lsr	r17
    1028:	07 95       	ror	r16
    102a:	f7 94       	ror	r15
    102c:	e7 94       	ror	r14
    102e:	8a 95       	dec	r24
    1030:	d1 f7       	brne	.-12     	; 0x1026 <__pack_f+0x164>
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__pack_f+0x17c>
    1034:	ee 24       	eor	r14, r14
    1036:	ff 24       	eor	r15, r15
    1038:	87 01       	movw	r16, r14
    103a:	ef ef       	ldi	r30, 0xFF	; 255
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	6e 2f       	mov	r22, r30
    1040:	67 95       	ror	r22
    1042:	66 27       	eor	r22, r22
    1044:	67 95       	ror	r22
    1046:	90 2f       	mov	r25, r16
    1048:	9f 77       	andi	r25, 0x7F	; 127
    104a:	d7 94       	ror	r13
    104c:	dd 24       	eor	r13, r13
    104e:	d7 94       	ror	r13
    1050:	8e 2f       	mov	r24, r30
    1052:	86 95       	lsr	r24
    1054:	49 2f       	mov	r20, r25
    1056:	46 2b       	or	r20, r22
    1058:	58 2f       	mov	r21, r24
    105a:	5d 29       	or	r21, r13
    105c:	b7 01       	movw	r22, r14
    105e:	ca 01       	movw	r24, r20
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	08 95       	ret

0000106c <__unpack_f>:
    106c:	fc 01       	movw	r30, r24
    106e:	db 01       	movw	r26, r22
    1070:	40 81       	ld	r20, Z
    1072:	51 81       	ldd	r21, Z+1	; 0x01
    1074:	22 81       	ldd	r18, Z+2	; 0x02
    1076:	62 2f       	mov	r22, r18
    1078:	6f 77       	andi	r22, 0x7F	; 127
    107a:	70 e0       	ldi	r23, 0x00	; 0
    107c:	22 1f       	adc	r18, r18
    107e:	22 27       	eor	r18, r18
    1080:	22 1f       	adc	r18, r18
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	89 2f       	mov	r24, r25
    1086:	88 0f       	add	r24, r24
    1088:	82 2b       	or	r24, r18
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	99 1f       	adc	r25, r25
    1090:	99 27       	eor	r25, r25
    1092:	99 1f       	adc	r25, r25
    1094:	11 96       	adiw	r26, 0x01	; 1
    1096:	9c 93       	st	X, r25
    1098:	11 97       	sbiw	r26, 0x01	; 1
    109a:	21 15       	cp	r18, r1
    109c:	31 05       	cpc	r19, r1
    109e:	a9 f5       	brne	.+106    	; 0x110a <__unpack_f+0x9e>
    10a0:	41 15       	cp	r20, r1
    10a2:	51 05       	cpc	r21, r1
    10a4:	61 05       	cpc	r22, r1
    10a6:	71 05       	cpc	r23, r1
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__unpack_f+0x42>
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	37 c0       	rjmp	.+110    	; 0x111c <__unpack_f+0xb0>
    10ae:	82 e8       	ldi	r24, 0x82	; 130
    10b0:	9f ef       	ldi	r25, 0xFF	; 255
    10b2:	13 96       	adiw	r26, 0x03	; 3
    10b4:	9c 93       	st	X, r25
    10b6:	8e 93       	st	-X, r24
    10b8:	12 97       	sbiw	r26, 0x02	; 2
    10ba:	9a 01       	movw	r18, r20
    10bc:	ab 01       	movw	r20, r22
    10be:	67 e0       	ldi	r22, 0x07	; 7
    10c0:	22 0f       	add	r18, r18
    10c2:	33 1f       	adc	r19, r19
    10c4:	44 1f       	adc	r20, r20
    10c6:	55 1f       	adc	r21, r21
    10c8:	6a 95       	dec	r22
    10ca:	d1 f7       	brne	.-12     	; 0x10c0 <__unpack_f+0x54>
    10cc:	83 e0       	ldi	r24, 0x03	; 3
    10ce:	8c 93       	st	X, r24
    10d0:	0d c0       	rjmp	.+26     	; 0x10ec <__unpack_f+0x80>
    10d2:	22 0f       	add	r18, r18
    10d4:	33 1f       	adc	r19, r19
    10d6:	44 1f       	adc	r20, r20
    10d8:	55 1f       	adc	r21, r21
    10da:	12 96       	adiw	r26, 0x02	; 2
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	13 97       	sbiw	r26, 0x03	; 3
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	13 96       	adiw	r26, 0x03	; 3
    10e6:	9c 93       	st	X, r25
    10e8:	8e 93       	st	-X, r24
    10ea:	12 97       	sbiw	r26, 0x02	; 2
    10ec:	20 30       	cpi	r18, 0x00	; 0
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	38 07       	cpc	r19, r24
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	48 07       	cpc	r20, r24
    10f6:	80 e4       	ldi	r24, 0x40	; 64
    10f8:	58 07       	cpc	r21, r24
    10fa:	58 f3       	brcs	.-42     	; 0x10d2 <__unpack_f+0x66>
    10fc:	14 96       	adiw	r26, 0x04	; 4
    10fe:	2d 93       	st	X+, r18
    1100:	3d 93       	st	X+, r19
    1102:	4d 93       	st	X+, r20
    1104:	5c 93       	st	X, r21
    1106:	17 97       	sbiw	r26, 0x07	; 7
    1108:	08 95       	ret
    110a:	2f 3f       	cpi	r18, 0xFF	; 255
    110c:	31 05       	cpc	r19, r1
    110e:	79 f4       	brne	.+30     	; 0x112e <__unpack_f+0xc2>
    1110:	41 15       	cp	r20, r1
    1112:	51 05       	cpc	r21, r1
    1114:	61 05       	cpc	r22, r1
    1116:	71 05       	cpc	r23, r1
    1118:	19 f4       	brne	.+6      	; 0x1120 <__unpack_f+0xb4>
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	8c 93       	st	X, r24
    111e:	08 95       	ret
    1120:	64 ff       	sbrs	r22, 4
    1122:	03 c0       	rjmp	.+6      	; 0x112a <__unpack_f+0xbe>
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	8c 93       	st	X, r24
    1128:	12 c0       	rjmp	.+36     	; 0x114e <__unpack_f+0xe2>
    112a:	1c 92       	st	X, r1
    112c:	10 c0       	rjmp	.+32     	; 0x114e <__unpack_f+0xe2>
    112e:	2f 57       	subi	r18, 0x7F	; 127
    1130:	30 40       	sbci	r19, 0x00	; 0
    1132:	13 96       	adiw	r26, 0x03	; 3
    1134:	3c 93       	st	X, r19
    1136:	2e 93       	st	-X, r18
    1138:	12 97       	sbiw	r26, 0x02	; 2
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	8c 93       	st	X, r24
    113e:	87 e0       	ldi	r24, 0x07	; 7
    1140:	44 0f       	add	r20, r20
    1142:	55 1f       	adc	r21, r21
    1144:	66 1f       	adc	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	8a 95       	dec	r24
    114a:	d1 f7       	brne	.-12     	; 0x1140 <__unpack_f+0xd4>
    114c:	70 64       	ori	r23, 0x40	; 64
    114e:	14 96       	adiw	r26, 0x04	; 4
    1150:	4d 93       	st	X+, r20
    1152:	5d 93       	st	X+, r21
    1154:	6d 93       	st	X+, r22
    1156:	7c 93       	st	X, r23
    1158:	17 97       	sbiw	r26, 0x07	; 7
    115a:	08 95       	ret

0000115c <__fpcmp_parts_f>:
    115c:	1f 93       	push	r17
    115e:	dc 01       	movw	r26, r24
    1160:	fb 01       	movw	r30, r22
    1162:	9c 91       	ld	r25, X
    1164:	92 30       	cpi	r25, 0x02	; 2
    1166:	08 f4       	brcc	.+2      	; 0x116a <__fpcmp_parts_f+0xe>
    1168:	47 c0       	rjmp	.+142    	; 0x11f8 <__fpcmp_parts_f+0x9c>
    116a:	80 81       	ld	r24, Z
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	08 f4       	brcc	.+2      	; 0x1172 <__fpcmp_parts_f+0x16>
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <__fpcmp_parts_f+0x9c>
    1172:	94 30       	cpi	r25, 0x04	; 4
    1174:	51 f4       	brne	.+20     	; 0x118a <__fpcmp_parts_f+0x2e>
    1176:	11 96       	adiw	r26, 0x01	; 1
    1178:	1c 91       	ld	r17, X
    117a:	84 30       	cpi	r24, 0x04	; 4
    117c:	99 f5       	brne	.+102    	; 0x11e4 <__fpcmp_parts_f+0x88>
    117e:	81 81       	ldd	r24, Z+1	; 0x01
    1180:	68 2f       	mov	r22, r24
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	61 1b       	sub	r22, r17
    1186:	71 09       	sbc	r23, r1
    1188:	3f c0       	rjmp	.+126    	; 0x1208 <__fpcmp_parts_f+0xac>
    118a:	84 30       	cpi	r24, 0x04	; 4
    118c:	21 f0       	breq	.+8      	; 0x1196 <__fpcmp_parts_f+0x3a>
    118e:	92 30       	cpi	r25, 0x02	; 2
    1190:	31 f4       	brne	.+12     	; 0x119e <__fpcmp_parts_f+0x42>
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	b9 f1       	breq	.+110    	; 0x1204 <__fpcmp_parts_f+0xa8>
    1196:	81 81       	ldd	r24, Z+1	; 0x01
    1198:	88 23       	and	r24, r24
    119a:	89 f1       	breq	.+98     	; 0x11fe <__fpcmp_parts_f+0xa2>
    119c:	2d c0       	rjmp	.+90     	; 0x11f8 <__fpcmp_parts_f+0x9c>
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	1c 91       	ld	r17, X
    11a2:	11 97       	sbiw	r26, 0x01	; 1
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	f1 f0       	breq	.+60     	; 0x11e4 <__fpcmp_parts_f+0x88>
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	18 17       	cp	r17, r24
    11ac:	d9 f4       	brne	.+54     	; 0x11e4 <__fpcmp_parts_f+0x88>
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	2d 91       	ld	r18, X+
    11b2:	3c 91       	ld	r19, X
    11b4:	13 97       	sbiw	r26, 0x03	; 3
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	82 17       	cp	r24, r18
    11bc:	93 07       	cpc	r25, r19
    11be:	94 f0       	brlt	.+36     	; 0x11e4 <__fpcmp_parts_f+0x88>
    11c0:	28 17       	cp	r18, r24
    11c2:	39 07       	cpc	r19, r25
    11c4:	bc f0       	brlt	.+46     	; 0x11f4 <__fpcmp_parts_f+0x98>
    11c6:	14 96       	adiw	r26, 0x04	; 4
    11c8:	8d 91       	ld	r24, X+
    11ca:	9d 91       	ld	r25, X+
    11cc:	0d 90       	ld	r0, X+
    11ce:	bc 91       	ld	r27, X
    11d0:	a0 2d       	mov	r26, r0
    11d2:	24 81       	ldd	r18, Z+4	; 0x04
    11d4:	35 81       	ldd	r19, Z+5	; 0x05
    11d6:	46 81       	ldd	r20, Z+6	; 0x06
    11d8:	57 81       	ldd	r21, Z+7	; 0x07
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	4a 07       	cpc	r20, r26
    11e0:	5b 07       	cpc	r21, r27
    11e2:	18 f4       	brcc	.+6      	; 0x11ea <__fpcmp_parts_f+0x8e>
    11e4:	11 23       	and	r17, r17
    11e6:	41 f0       	breq	.+16     	; 0x11f8 <__fpcmp_parts_f+0x9c>
    11e8:	0a c0       	rjmp	.+20     	; 0x11fe <__fpcmp_parts_f+0xa2>
    11ea:	82 17       	cp	r24, r18
    11ec:	93 07       	cpc	r25, r19
    11ee:	a4 07       	cpc	r26, r20
    11f0:	b5 07       	cpc	r27, r21
    11f2:	40 f4       	brcc	.+16     	; 0x1204 <__fpcmp_parts_f+0xa8>
    11f4:	11 23       	and	r17, r17
    11f6:	19 f0       	breq	.+6      	; 0x11fe <__fpcmp_parts_f+0xa2>
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <__fpcmp_parts_f+0xac>
    11fe:	6f ef       	ldi	r22, 0xFF	; 255
    1200:	7f ef       	ldi	r23, 0xFF	; 255
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <__fpcmp_parts_f+0xac>
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	cb 01       	movw	r24, r22
    120a:	1f 91       	pop	r17
    120c:	08 95       	ret

0000120e <__prologue_saves__>:
    120e:	2f 92       	push	r2
    1210:	3f 92       	push	r3
    1212:	4f 92       	push	r4
    1214:	5f 92       	push	r5
    1216:	6f 92       	push	r6
    1218:	7f 92       	push	r7
    121a:	8f 92       	push	r8
    121c:	9f 92       	push	r9
    121e:	af 92       	push	r10
    1220:	bf 92       	push	r11
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	ef 92       	push	r14
    1228:	ff 92       	push	r15
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
    1236:	ca 1b       	sub	r28, r26
    1238:	db 0b       	sbc	r29, r27
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	09 94       	ijmp

00001246 <__epilogue_restores__>:
    1246:	2a 88       	ldd	r2, Y+18	; 0x12
    1248:	39 88       	ldd	r3, Y+17	; 0x11
    124a:	48 88       	ldd	r4, Y+16	; 0x10
    124c:	5f 84       	ldd	r5, Y+15	; 0x0f
    124e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1250:	7d 84       	ldd	r7, Y+13	; 0x0d
    1252:	8c 84       	ldd	r8, Y+12	; 0x0c
    1254:	9b 84       	ldd	r9, Y+11	; 0x0b
    1256:	aa 84       	ldd	r10, Y+10	; 0x0a
    1258:	b9 84       	ldd	r11, Y+9	; 0x09
    125a:	c8 84       	ldd	r12, Y+8	; 0x08
    125c:	df 80       	ldd	r13, Y+7	; 0x07
    125e:	ee 80       	ldd	r14, Y+6	; 0x06
    1260:	fd 80       	ldd	r15, Y+5	; 0x05
    1262:	0c 81       	ldd	r16, Y+4	; 0x04
    1264:	1b 81       	ldd	r17, Y+3	; 0x03
    1266:	aa 81       	ldd	r26, Y+2	; 0x02
    1268:	b9 81       	ldd	r27, Y+1	; 0x01
    126a:	ce 0f       	add	r28, r30
    126c:	d1 1d       	adc	r29, r1
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	ed 01       	movw	r28, r26
    127a:	08 95       	ret

0000127c <_exit>:
    127c:	f8 94       	cli

0000127e <__stop_program>:
    127e:	ff cf       	rjmp	.-2      	; 0x127e <__stop_program>
