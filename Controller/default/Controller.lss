
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  0000061a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000061a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000020f  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b36  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028e  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a5f  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  0000206c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000264  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000311  00000000  00000000  00002460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c9 01 	call	0x392	; 0x392 <main>
  74:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <modify>:
}


void modify(){
	//analogLEDTest();
}
  7c:	08 95       	ret

0000007e <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  7e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  80:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
}
  8a:	08 95       	ret

0000008c <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  90:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  92:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  98:	11 ba       	out	0x11, r1	; 17
}
  9a:	08 95       	ret

0000009c <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  9c:	87 e4       	ldi	r24, 0x47	; 71
  9e:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	86 b9       	out	0x06, r24	; 6
}
  a4:	08 95       	ret

000000a6 <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  a6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	89 bf       	out	0x39, r24	; 57
	sei();
  b0:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  b2:	80 ea       	ldi	r24, 0xA0	; 160
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	99 bd       	out	0x29, r25	; 41
  b8:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  ba:	1d bc       	out	0x2d, r1	; 45
  bc:	1c bc       	out	0x2c, r1	; 44

}
  be:	08 95       	ret

000000c0 <ledOFF>:
}



void ledOFF(){
	PORTB = 0x00;
  c0:	18 ba       	out	0x18, r1	; 24
}
  c2:	08 95       	ret

000000c4 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  c4:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  ca:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  cc:	24 b1       	in	r18, 0x04	; 4
  ce:	35 b1       	in	r19, 0x05	; 5
}
  d0:	c9 01       	movw	r24, r18
  d2:	08 95       	ret

000000d4 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
  d4:	0e 94 62 00 	call	0xc4	; 0xc4 <ReadADC>
  d8:	9c 01       	movw	r18, r24
  da:	90 93 71 00 	sts	0x0071, r25
  de:	80 93 70 00 	sts	0x0070, r24
		if (adc_value > 30){
  e2:	8f 31       	cpi	r24, 0x1F	; 31
  e4:	91 05       	cpc	r25, r1
  e6:	28 f1       	brcs	.+74     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
  ec:	2d 33       	cpi	r18, 0x3D	; 61
  ee:	31 05       	cpc	r19, r1
  f0:	00 f1       	brcs	.+64     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
  f6:	2b 35       	cpi	r18, 0x5B	; 91
  f8:	31 05       	cpc	r19, r1
  fa:	d8 f0       	brcs	.+54     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
 100:	29 37       	cpi	r18, 0x79	; 121
 102:	31 05       	cpc	r19, r1
 104:	b0 f0       	brcs	.+44     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
 10a:	27 39       	cpi	r18, 0x97	; 151
 10c:	31 05       	cpc	r19, r1
 10e:	88 f0       	brcs	.+34     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
 114:	25 3b       	cpi	r18, 0xB5	; 181
 116:	31 05       	cpc	r19, r1
 118:	60 f0       	brcs	.+24     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
 11e:	23 3d       	cpi	r18, 0xD3	; 211
 120:	31 05       	cpc	r19, r1
 122:	38 f0       	brcs	.+14     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
 128:	21 3f       	cpi	r18, 0xF1	; 241
 12a:	31 05       	cpc	r19, r1
 12c:	10 f0       	brcs	.+4      	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
 132:	20 3f       	cpi	r18, 0xF0	; 240
 134:	31 05       	cpc	r19, r1
 136:	10 f0       	brcs	.+4      	; 0x13c <analogLEDTest+0x68>
			PORTB = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret

0000013e <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 142:	8c b9       	out	0x0c, r24	; 12
}
 144:	08 95       	ret

00000146 <midiTransitTest>:
	start_addr = 0;
	
}

void midiTransitTest(){
	midi_Transmit(144);
 146:	80 e9       	ldi	r24, 0x90	; 144
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(67);
 14e:	83 e4       	ldi	r24, 0x43	; 67
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 156:	84 e6       	ldi	r24, 0x64	; 100
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 15e:	88 e8       	ldi	r24, 0x88	; 136
 160:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 162:	24 e6       	ldi	r18, 0x64	; 100
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16e:	d9 f7       	brne	.-10     	; 0x166 <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(67);
 178:	83 e4       	ldi	r24, 0x43	; 67
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 180:	84 e6       	ldi	r24, 0x64	; 100
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 188:	88 e8       	ldi	r24, 0x88	; 136
 18a:	93 e1       	ldi	r25, 0x13	; 19
 18c:	24 e6       	ldi	r18, 0x64	; 100
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 196:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 198:	d9 f7       	brne	.-10     	; 0x190 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
 19a:	80 e9       	ldi	r24, 0x90	; 144
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(98);
 1a2:	82 e6       	ldi	r24, 0x62	; 98
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 1b2:	88 e8       	ldi	r24, 0x88	; 136
 1b4:	93 e1       	ldi	r25, 0x13	; 19
 1b6:	24 e6       	ldi	r18, 0x64	; 100
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(98);
 1cc:	82 e6       	ldi	r24, 0x62	; 98
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 1dc:	88 e8       	ldi	r24, 0x88	; 136
 1de:	93 e1       	ldi	r25, 0x13	; 19
 1e0:	24 e6       	ldi	r18, 0x64	; 100
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
 1ee:	80 e9       	ldi	r24, 0x90	; 144
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(60);
 1f6:	8c e3       	ldi	r24, 0x3C	; 60
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 1fe:	84 e6       	ldi	r24, 0x64	; 100
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 206:	88 e8       	ldi	r24, 0x88	; 136
 208:	93 e1       	ldi	r25, 0x13	; 19
 20a:	24 e6       	ldi	r18, 0x64	; 100
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 214:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 216:	d9 f7       	brne	.-10     	; 0x20e <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
 218:	80 e8       	ldi	r24, 0x80	; 128
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(60);
 220:	8c e3       	ldi	r24, 0x3C	; 60
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 228:	84 e6       	ldi	r24, 0x64	; 100
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 230:	88 e8       	ldi	r24, 0x88	; 136
 232:	93 e1       	ldi	r25, 0x13	; 19
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	d9 f7       	brne	.-10     	; 0x238 <midiTransitTest+0xf2>
	_delay_ms(500);

}
 242:	08 95       	ret

00000244 <playSong>:
		eeprom_address++;		
	}
	
}

void playSong(){
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	31 c0       	rjmp	.+98     	; 0x2ac <playSong+0x68>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 24a:	e1 99       	sbic	0x1c, 1	; 28
 24c:	fe cf       	rjmp	.-4      	; 0x24a <playSong+0x6>
	/* Set up address register */
	EEAR = uiAddress;
 24e:	3f bb       	out	0x1f, r19	; 31
 250:	2e bb       	out	0x1e, r18	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 252:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 254:	8d b3       	in	r24, 0x1d	; 29
		// int pushUpDelay = (intervalTimed*(1/3906.25));
		// _delay_ms(pushUpDelay);

		// start_addr = start_addr + 2;
		for(int i = 0; i < 5; i++){
			midiData[i] = EEPROM_read(start_addr);
 256:	81 93       	st	Z+, r24
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
		// unsigned char intervalTimed = captureAddrA | ( captureAddrB << 8);
		// int pushUpDelay = (intervalTimed*(1/3906.25));
		// _delay_ms(pushUpDelay);

		// start_addr = start_addr + 2;
		for(int i = 0; i < 5; i++){
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	e7 37       	cpi	r30, 0x77	; 119
 260:	f8 07       	cpc	r31, r24
 262:	99 f7       	brne	.-26     	; 0x24a <playSong+0x6>
 264:	4b 5f       	subi	r20, 0xFB	; 251
 266:	5f 4f       	sbci	r21, 0xFF	; 255
 268:	50 93 6d 00 	sts	0x006D, r21
 26c:	40 93 6c 00 	sts	0x006C, r20
		unsigned char lsb = midiData[3];
		unsigned char msb = midiData[4];
		//0b111110100 = 500 ms
		//1953.125 ticks = 500 ms;
		//TICKS * (1/3906.25) = time in ms
		unsigned int interval = ((0x00FF & msb) << 8) + lsb;
 270:	d0 91 76 00 	lds	r29, 0x0076
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	80 91 75 00 	lds	r24, 0x0075
 27a:	9e 01       	movw	r18, r28
 27c:	28 0f       	add	r18, r24
 27e:	31 1d       	adc	r19, r1
		TCNT1 = 0;
 280:	1d bc       	out	0x2d, r1	; 45
 282:	1c bc       	out	0x2c, r1	; 44
		while(TCNT1 < interval);
 284:	8c b5       	in	r24, 0x2c	; 44
 286:	9d b5       	in	r25, 0x2d	; 45
 288:	82 17       	cp	r24, r18
 28a:	93 07       	cpc	r25, r19
 28c:	d8 f3       	brcs	.-10     	; 0x284 <playSong+0x40>
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 28e:	80 91 72 00 	lds	r24, 0x0072
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 298:	80 91 73 00 	lds	r24, 0x0073
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 2a2:	80 91 74 00 	lds	r24, 0x0074
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	
}

void playSong(){
	
	while(start_addr < stop_addr){
 2ac:	40 91 6c 00 	lds	r20, 0x006C
 2b0:	50 91 6d 00 	lds	r21, 0x006D
 2b4:	80 91 6e 00 	lds	r24, 0x006E
 2b8:	90 91 6f 00 	lds	r25, 0x006F
 2bc:	48 17       	cp	r20, r24
 2be:	59 07       	cpc	r21, r25
 2c0:	20 f4       	brcc	.+8      	; 0x2ca <playSong+0x86>
 2c2:	e2 e7       	ldi	r30, 0x72	; 114
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	9a 01       	movw	r18, r20
 2c8:	c0 cf       	rjmp	.-128    	; 0x24a <playSong+0x6>
		while(TCNT1 < interval);
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
		}
	}
	start_addr = 0;
 2ca:	10 92 6d 00 	sts	0x006D, r1
 2ce:	10 92 6c 00 	sts	0x006C, r1
	
}
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <playBack>:
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 2d8:	0e 94 22 01 	call	0x244	; 0x244 <playSong>
}
 2dc:	08 95       	ret

000002de <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
 2de:	5f 9b       	sbis	0x0b, 7	; 11
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 2e2:	8c b1       	in	r24, 0x0c	; 12
}
 2e4:	08 95       	ret

000002e6 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 2e8:	8c b1       	in	r24, 0x0c	; 12
 2ea:	5f 99       	sbic	0x0b, 7	; 11
 2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <midi_Flush+0x2>
}
 2ee:	08 95       	ret

000002f0 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 2f0:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 2f2:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 2f4:	08 95       	ret

000002f6 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 2f6:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 2f8:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 2fa:	8c b5       	in	r24, 0x2c	; 44
 2fc:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 2fe:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 300:	08 95       	ret

00000302 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 302:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 304:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 306:	9d bd       	out	0x2d, r25	; 45
 308:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 30a:	2f bf       	out	0x3f, r18	; 63
}
 30c:	08 95       	ret

0000030e <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 30e:	e1 99       	sbic	0x1c, 1	; 28
 310:	fe cf       	rjmp	.-4      	; 0x30e <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 312:	9f bb       	out	0x1f, r25	; 31
 314:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 316:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 318:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 31a:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 31c:	08 95       	ret

0000031e <writeSong2>:
	PORTB = EEPROM_read(9);
	_delay_ms(500);
}


void writeSong2(){
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
	unsigned int interval = TCNT1;
 322:	8c b5       	in	r24, 0x2c	; 44
 324:	9d b5       	in	r25, 0x2d	; 45
	TCNT1 = 0;
 326:	1d bc       	out	0x2d, r1	; 45
 328:	1c bc       	out	0x2c, r1	; 44
 32a:	c2 e7       	ldi	r28, 0x72	; 114
 32c:	d0 e0       	ldi	r29, 0x00	; 0
 32e:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
 330:	5f 9b       	sbis	0x0b, 7	; 11
 332:	fe cf       	rjmp	.-4      	; 0x330 <writeSong2+0x12>

	/* get and return data from buffer */
	return UDR;
 334:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	unsigned int interval = TCNT1;
	TCNT1 = 0;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 336:	81 93       	st	Z+, r24


void writeSong2(){
	unsigned int interval = TCNT1;
	TCNT1 = 0;
	for(int i = 0; i <3; i++){
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	e5 37       	cpi	r30, 0x75	; 117
 33c:	f8 07       	cpc	r31, r24
 33e:	c1 f7       	brne	.-16     	; 0x330 <writeSong2+0x12>
		midiData[i] = midi_Receive();
	}
	PORTB = midiData[1];
 340:	80 91 73 00 	lds	r24, 0x0073
 344:	88 bb       	out	0x18, r24	; 24
	
	interval = TCNT1;
 346:	8c b5       	in	r24, 0x2c	; 44
 348:	9d b5       	in	r25, 0x2d	; 45
	unsigned char lsb = ((interval << 8) >> 8);
	unsigned char msb = ((interval >> 8));
	midiData[3] = lsb;
 34a:	80 83       	st	Z, r24
	midiData[4] = msb;
 34c:	91 83       	std	Z+1, r25	; 0x01

	stop_addr = eeprom_address;
 34e:	80 91 6a 00 	lds	r24, 0x006A
 352:	90 91 6b 00 	lds	r25, 0x006B
 356:	90 93 6f 00 	sts	0x006F, r25
 35a:	80 93 6e 00 	sts	0x006E, r24
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 35e:	80 91 6a 00 	lds	r24, 0x006A
 362:	90 91 6b 00 	lds	r25, 0x006B
 366:	69 91       	ld	r22, Y+
 368:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
		eeprom_address++;		
 36c:	80 91 6a 00 	lds	r24, 0x006A
 370:	90 91 6b 00 	lds	r25, 0x006B
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	90 93 6b 00 	sts	0x006B, r25
 37a:	80 93 6a 00 	sts	0x006A, r24
	unsigned char msb = ((interval >> 8));
	midiData[3] = lsb;
	midiData[4] = msb;

	stop_addr = eeprom_address;
	for(int j= 0; j < 5; j++){
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	c7 37       	cpi	r28, 0x77	; 119
 382:	d8 07       	cpc	r29, r24
 384:	61 f7       	brne	.-40     	; 0x35e <writeSong2+0x40>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 38c:	0e 94 8f 01 	call	0x31e	; 0x31e <writeSong2>
	//midiTransitTest();
}
 390:	08 95       	ret

00000392 <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
 392:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 398:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 39a:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 39c:	17 e0       	ldi	r17, 0x07	; 7
 39e:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 3a0:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 3a2:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 3a6:	87 e4       	ldi	r24, 0x47	; 71
 3a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 3aa:	87 e8       	ldi	r24, 0x87	; 135
 3ac:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 3ae:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 3b0:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 3b2:	88 e1       	ldi	r24, 0x18	; 24
 3b4:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 3b6:	86 e8       	ldi	r24, 0x86	; 134
 3b8:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
 3ba:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
 3bc:	99 b3       	in	r25, 0x19	; 25
 3be:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
 3c0:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
 3c2:	82 ff       	sbrs	r24, 2
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <main+0x3e>
 3c6:	99 23       	and	r25, r25
 3c8:	c1 f7       	brne	.-16     	; 0x3ba <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 3ca:	0e 94 8f 01 	call	0x31e	; 0x31e <writeSong2>
 3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <main+0x28>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
 3d0:	99 23       	and	r25, r25
 3d2:	99 f3       	breq	.-26     	; 0x3ba <main+0x28>
			if (mod){ // Modify Mode
 3d4:	20 fd       	sbrc	r18, 0
 3d6:	f1 cf       	rjmp	.-30     	; 0x3ba <main+0x28>
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 3d8:	0e 94 22 01 	call	0x244	; 0x244 <playSong>
 3dc:	ee cf       	rjmp	.-36     	; 0x3ba <main+0x28>

000003de <eeprom_test>:




void eeprom_test(){
	EEPROM_write(1, 1);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(2, 2);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	62 e0       	ldi	r22, 0x02	; 2
 3ee:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(3, 3);
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	63 e0       	ldi	r22, 0x03	; 3
 3f8:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(4, 4);
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	64 e0       	ldi	r22, 0x04	; 4
 402:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(5, 5);
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	65 e0       	ldi	r22, 0x05	; 5
 40c:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(6, 6);
 410:	86 e0       	ldi	r24, 0x06	; 6
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	66 e0       	ldi	r22, 0x06	; 6
 416:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(7, 7);
 41a:	87 e0       	ldi	r24, 0x07	; 7
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	67 e0       	ldi	r22, 0x07	; 7
 420:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(8, 8);
 424:	88 e0       	ldi	r24, 0x08	; 8
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	68 e0       	ldi	r22, 0x08	; 8
 42a:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	EEPROM_write(9, 9);
 42e:	89 e0       	ldi	r24, 0x09	; 9
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	69 e0       	ldi	r22, 0x09	; 9
 434:	0e 94 87 01 	call	0x30e	; 0x30e <EEPROM_write>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 438:	e1 99       	sbic	0x1c, 1	; 28
 43a:	fe cf       	rjmp	.-4      	; 0x438 <eeprom_test+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	9f bb       	out	0x1f, r25	; 31
 442:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 444:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 446:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(5, 5);
	EEPROM_write(6, 6);
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
 448:	88 bb       	out	0x18, r24	; 24
 44a:	88 e8       	ldi	r24, 0x88	; 136
 44c:	93 e1       	ldi	r25, 0x13	; 19
 44e:	24 e6       	ldi	r18, 0x64	; 100
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	f9 01       	movw	r30, r18
 454:	31 97       	sbiw	r30, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <eeprom_test+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 458:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 45a:	d9 f7       	brne	.-10     	; 0x452 <eeprom_test+0x74>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 45c:	e1 99       	sbic	0x1c, 1	; 28
 45e:	fe cf       	rjmp	.-4      	; 0x45c <eeprom_test+0x7e>
	/* Set up address register */
	EEAR = uiAddress;
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	9f bb       	out	0x1f, r25	; 31
 466:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 468:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 46a:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
 46c:	88 bb       	out	0x18, r24	; 24
 46e:	88 e8       	ldi	r24, 0x88	; 136
 470:	93 e1       	ldi	r25, 0x13	; 19
 472:	24 e6       	ldi	r18, 0x64	; 100
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	f9 01       	movw	r30, r18
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <eeprom_test+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 47e:	d9 f7       	brne	.-10     	; 0x476 <eeprom_test+0x98>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 480:	e1 99       	sbic	0x1c, 1	; 28
 482:	fe cf       	rjmp	.-4      	; 0x480 <eeprom_test+0xa2>
	/* Set up address register */
	EEAR = uiAddress;
 484:	83 e0       	ldi	r24, 0x03	; 3
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	9f bb       	out	0x1f, r25	; 31
 48a:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 48c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 48e:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
 490:	88 bb       	out	0x18, r24	; 24
 492:	88 e8       	ldi	r24, 0x88	; 136
 494:	93 e1       	ldi	r25, 0x13	; 19
 496:	24 e6       	ldi	r18, 0x64	; 100
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	f9 01       	movw	r30, r18
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <eeprom_test+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4a2:	d9 f7       	brne	.-10     	; 0x49a <eeprom_test+0xbc>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 4a4:	e1 99       	sbic	0x1c, 1	; 28
 4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <eeprom_test+0xc6>
	/* Set up address register */
	EEAR = uiAddress;
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9f bb       	out	0x1f, r25	; 31
 4ae:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 4b0:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 4b2:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
 4b4:	88 bb       	out	0x18, r24	; 24
 4b6:	88 e8       	ldi	r24, 0x88	; 136
 4b8:	93 e1       	ldi	r25, 0x13	; 19
 4ba:	24 e6       	ldi	r18, 0x64	; 100
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	f9 01       	movw	r30, r18
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <eeprom_test+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c6:	d9 f7       	brne	.-10     	; 0x4be <eeprom_test+0xe0>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 4c8:	e1 99       	sbic	0x1c, 1	; 28
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <eeprom_test+0xea>
	/* Set up address register */
	EEAR = uiAddress;
 4cc:	85 e0       	ldi	r24, 0x05	; 5
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	9f bb       	out	0x1f, r25	; 31
 4d2:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 4d4:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 4d6:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
 4d8:	88 bb       	out	0x18, r24	; 24
 4da:	88 e8       	ldi	r24, 0x88	; 136
 4dc:	93 e1       	ldi	r25, 0x13	; 19
 4de:	24 e6       	ldi	r18, 0x64	; 100
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	f9 01       	movw	r30, r18
 4e4:	31 97       	sbiw	r30, 0x01	; 1
 4e6:	f1 f7       	brne	.-4      	; 0x4e4 <eeprom_test+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4ea:	d9 f7       	brne	.-10     	; 0x4e2 <eeprom_test+0x104>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 4ec:	e1 99       	sbic	0x1c, 1	; 28
 4ee:	fe cf       	rjmp	.-4      	; 0x4ec <eeprom_test+0x10e>
	/* Set up address register */
	EEAR = uiAddress;
 4f0:	86 e0       	ldi	r24, 0x06	; 6
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	9f bb       	out	0x1f, r25	; 31
 4f6:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 4f8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 4fa:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
 4fc:	88 bb       	out	0x18, r24	; 24
 4fe:	88 e8       	ldi	r24, 0x88	; 136
 500:	93 e1       	ldi	r25, 0x13	; 19
 502:	24 e6       	ldi	r18, 0x64	; 100
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	f9 01       	movw	r30, r18
 508:	31 97       	sbiw	r30, 0x01	; 1
 50a:	f1 f7       	brne	.-4      	; 0x508 <eeprom_test+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 50c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 50e:	d9 f7       	brne	.-10     	; 0x506 <eeprom_test+0x128>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 510:	e1 99       	sbic	0x1c, 1	; 28
 512:	fe cf       	rjmp	.-4      	; 0x510 <eeprom_test+0x132>
	/* Set up address register */
	EEAR = uiAddress;
 514:	87 e0       	ldi	r24, 0x07	; 7
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	9f bb       	out	0x1f, r25	; 31
 51a:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 51c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 51e:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
 520:	88 bb       	out	0x18, r24	; 24
 522:	88 e8       	ldi	r24, 0x88	; 136
 524:	93 e1       	ldi	r25, 0x13	; 19
 526:	24 e6       	ldi	r18, 0x64	; 100
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	31 97       	sbiw	r30, 0x01	; 1
 52e:	f1 f7       	brne	.-4      	; 0x52c <eeprom_test+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 530:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 532:	d9 f7       	brne	.-10     	; 0x52a <eeprom_test+0x14c>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 534:	e1 99       	sbic	0x1c, 1	; 28
 536:	fe cf       	rjmp	.-4      	; 0x534 <eeprom_test+0x156>
	/* Set up address register */
	EEAR = uiAddress;
 538:	88 e0       	ldi	r24, 0x08	; 8
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	9f bb       	out	0x1f, r25	; 31
 53e:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 540:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 542:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
 544:	88 bb       	out	0x18, r24	; 24
 546:	88 e8       	ldi	r24, 0x88	; 136
 548:	93 e1       	ldi	r25, 0x13	; 19
 54a:	24 e6       	ldi	r18, 0x64	; 100
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	f9 01       	movw	r30, r18
 550:	31 97       	sbiw	r30, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <eeprom_test+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 554:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 556:	d9 f7       	brne	.-10     	; 0x54e <eeprom_test+0x170>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 558:	e1 99       	sbic	0x1c, 1	; 28
 55a:	fe cf       	rjmp	.-4      	; 0x558 <eeprom_test+0x17a>
	/* Set up address register */
	EEAR = uiAddress;
 55c:	89 e0       	ldi	r24, 0x09	; 9
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	9f bb       	out	0x1f, r25	; 31
 562:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 564:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 566:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
	_delay_ms(500);
	PORTB = EEPROM_read(9);
 568:	88 bb       	out	0x18, r24	; 24
 56a:	88 e8       	ldi	r24, 0x88	; 136
 56c:	93 e1       	ldi	r25, 0x13	; 19
 56e:	24 e6       	ldi	r18, 0x64	; 100
 570:	30 e0       	ldi	r19, 0x00	; 0
 572:	f9 01       	movw	r30, r18
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <eeprom_test+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 578:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 57a:	d9 f7       	brne	.-10     	; 0x572 <eeprom_test+0x194>
	_delay_ms(500);
}
 57c:	08 95       	ret

0000057e <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 57e:	e1 99       	sbic	0x1c, 1	; 28
 580:	fe cf       	rjmp	.-4      	; 0x57e <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 582:	9f bb       	out	0x1f, r25	; 31
 584:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 586:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 588:	8d b3       	in	r24, 0x1d	; 29
}
 58a:	08 95       	ret

0000058c <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 596:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
}
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <_exit>:
 5a2:	f8 94       	cli

000005a4 <__stop_program>:
 5a4:	ff cf       	rjmp	.-2      	; 0x5a4 <__stop_program>
