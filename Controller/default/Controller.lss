
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800168  00800168  0000109e  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  0000109e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000347  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f2c  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd7  00000000  00000000  00003411  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000157c  00000000  00000000  000041e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00005764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c4  00000000  00000000  000059e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000085e  00000000  00000000  00005ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00006706  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a8 e6       	ldi	r26, 0x68	; 104
  64:	b1 e0       	ldi	r27, 0x01	; 1
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 37       	cpi	r26, 0x7F	; 127
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	11 e0       	ldi	r17, 0x01	; 1
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e0       	ldi	r30, 0x02	; 2
  78:	ff e0       	ldi	r31, 0x0F	; 15
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
  86:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  8a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  92:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  94:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  96:	88 e1       	ldi	r24, 0x18	; 24
  98:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
}
  9e:	08 95       	ret

000000a0 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  a4:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  a6:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  ac:	11 ba       	out	0x11, r1	; 17
}
  ae:	08 95       	ret

000000b0 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  b0:	87 e4       	ldi	r24, 0x47	; 71
  b2:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  b4:	87 e8       	ldi	r24, 0x87	; 135
  b6:	86 b9       	out	0x06, r24	; 6
}
  b8:	08 95       	ret

000000ba <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  ba:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  c0:	88 e0       	ldi	r24, 0x08	; 8
  c2:	89 bf       	out	0x39, r24	; 57
	sei();
  c4:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  c6:	80 ea       	ldi	r24, 0xA0	; 160
  c8:	97 e0       	ldi	r25, 0x07	; 7
  ca:	99 bd       	out	0x29, r25	; 41
  cc:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  ce:	1d bc       	out	0x2d, r1	; 45
  d0:	1c bc       	out	0x2c, r1	; 44

}
  d2:	08 95       	ret

000000d4 <ledOFF>:
}



void ledOFF(){
	PORTB = 0x00;
  d4:	18 ba       	out	0x18, r1	; 24
}
  d6:	08 95       	ret

000000d8 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  d8:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  de:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  e0:	24 b1       	in	r18, 0x04	; 4
  e2:	35 b1       	in	r19, 0x05	; 5
}
  e4:	c9 01       	movw	r24, r18
  e6:	08 95       	ret

000000e8 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
  e8:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
  ec:	9c 01       	movw	r18, r24
  ee:	90 93 79 01 	sts	0x0179, r25
  f2:	80 93 78 01 	sts	0x0178, r24
		if (adc_value > 30){
  f6:	8f 31       	cpi	r24, 0x1F	; 31
  f8:	91 05       	cpc	r25, r1
  fa:	28 f1       	brcs	.+74     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
 100:	2d 33       	cpi	r18, 0x3D	; 61
 102:	31 05       	cpc	r19, r1
 104:	00 f1       	brcs	.+64     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
 10a:	2b 35       	cpi	r18, 0x5B	; 91
 10c:	31 05       	cpc	r19, r1
 10e:	d8 f0       	brcs	.+54     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
 110:	84 e0       	ldi	r24, 0x04	; 4
 112:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
 114:	29 37       	cpi	r18, 0x79	; 121
 116:	31 05       	cpc	r19, r1
 118:	b0 f0       	brcs	.+44     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
 11e:	27 39       	cpi	r18, 0x97	; 151
 120:	31 05       	cpc	r19, r1
 122:	88 f0       	brcs	.+34     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
 128:	25 3b       	cpi	r18, 0xB5	; 181
 12a:	31 05       	cpc	r19, r1
 12c:	60 f0       	brcs	.+24     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
 132:	23 3d       	cpi	r18, 0xD3	; 211
 134:	31 05       	cpc	r19, r1
 136:	38 f0       	brcs	.+14     	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
 13c:	21 3f       	cpi	r18, 0xF1	; 241
 13e:	31 05       	cpc	r19, r1
 140:	10 f0       	brcs	.+4      	; 0x146 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
 142:	80 e8       	ldi	r24, 0x80	; 128
 144:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
 146:	20 3f       	cpi	r18, 0xF0	; 240
 148:	31 05       	cpc	r19, r1
 14a:	10 f0       	brcs	.+4      	; 0x150 <analogLEDTest+0x68>
			PORTB = 0xFF;
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret

00000152 <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
 152:	5d 9b       	sbis	0x0b, 5	; 11
 154:	fe cf       	rjmp	.-4      	; 0x152 <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 156:	8c b9       	out	0x0c, r24	; 12
}
 158:	08 95       	ret

0000015a <midiTransitTest>:
	start_addr = 0;
	
}

void midiTransitTest(){
	midi_Transmit(144);
 15a:	80 e9       	ldi	r24, 0x90	; 144
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(67);
 162:	83 e4       	ldi	r24, 0x43	; 67
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 172:	88 e8       	ldi	r24, 0x88	; 136
 174:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 176:	24 e6       	ldi	r18, 0x64	; 100
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	31 97       	sbiw	r30, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 180:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 182:	d9 f7       	brne	.-10     	; 0x17a <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(67);
 18c:	83 e4       	ldi	r24, 0x43	; 67
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 194:	84 e6       	ldi	r24, 0x64	; 100
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 19c:	88 e8       	ldi	r24, 0x88	; 136
 19e:	93 e1       	ldi	r25, 0x13	; 19
 1a0:	24 e6       	ldi	r18, 0x64	; 100
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	31 97       	sbiw	r30, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ac:	d9 f7       	brne	.-10     	; 0x1a4 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
 1ae:	80 e9       	ldi	r24, 0x90	; 144
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(98);
 1b6:	82 e6       	ldi	r24, 0x62	; 98
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 1be:	84 e6       	ldi	r24, 0x64	; 100
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 1c6:	88 e8       	ldi	r24, 0x88	; 136
 1c8:	93 e1       	ldi	r25, 0x13	; 19
 1ca:	24 e6       	ldi	r18, 0x64	; 100
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d6:	d9 f7       	brne	.-10     	; 0x1ce <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(98);
 1e0:	82 e6       	ldi	r24, 0x62	; 98
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 1e8:	84 e6       	ldi	r24, 0x64	; 100
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 1f0:	88 e8       	ldi	r24, 0x88	; 136
 1f2:	93 e1       	ldi	r25, 0x13	; 19
 1f4:	24 e6       	ldi	r18, 0x64	; 100
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 200:	d9 f7       	brne	.-10     	; 0x1f8 <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
 202:	80 e9       	ldi	r24, 0x90	; 144
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(60);
 20a:	8c e3       	ldi	r24, 0x3C	; 60
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 212:	84 e6       	ldi	r24, 0x64	; 100
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 21a:	88 e8       	ldi	r24, 0x88	; 136
 21c:	93 e1       	ldi	r25, 0x13	; 19
 21e:	24 e6       	ldi	r18, 0x64	; 100
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 228:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 22a:	d9 f7       	brne	.-10     	; 0x222 <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
 22c:	80 e8       	ldi	r24, 0x80	; 128
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(60);
 234:	8c e3       	ldi	r24, 0x3C	; 60
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
	midi_Transmit(100);
 23c:	84 e6       	ldi	r24, 0x64	; 100
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
 244:	88 e8       	ldi	r24, 0x88	; 136
 246:	93 e1       	ldi	r25, 0x13	; 19
 248:	24 e6       	ldi	r18, 0x64	; 100
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	f9 01       	movw	r30, r18
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 252:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 254:	d9 f7       	brne	.-10     	; 0x24c <midiTransitTest+0xf2>
	_delay_ms(500);

}
 256:	08 95       	ret

00000258 <playSongMod>:
	}
	start_addr = 0;
	
}

void playSongMod(){
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	ff 92       	push	r15
 260:	0f 93       	push	r16
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	8b c0       	rjmp	.+278    	; 0x380 <playSongMod+0x128>
	
	while(start_addr < stop_addr){
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
	}
	start_addr = 0;
	
}

void playSongMod(){
 26e:	c9 01       	movw	r24, r18
 270:	84 0f       	add	r24, r20
 272:	95 1f       	adc	r25, r21
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 274:	e1 99       	sbic	0x1c, 1	; 28
 276:	fe cf       	rjmp	.-4      	; 0x274 <playSongMod+0x1c>
	/* Set up address register */
	EEAR = uiAddress;
 278:	9f bb       	out	0x1f, r25	; 31
 27a:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 27c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 27e:	8d b3       	in	r24, 0x1d	; 29
	while(start_addr < stop_addr){
		

		for(int i = 0; i < 5; i++){

			midiData[i] = EEPROM_read(start_addr);
 280:	f9 01       	movw	r30, r18
 282:	e6 58       	subi	r30, 0x86	; 134
 284:	fe 4f       	sbci	r31, 0xFE	; 254
 286:	80 83       	st	Z, r24
			start_addr++;
			if(i==4){
 288:	24 30       	cpi	r18, 0x04	; 4
 28a:	31 05       	cpc	r19, r1
 28c:	11 f4       	brne	.+4      	; 0x292 <playSongMod+0x3a>
				TCNT1 = 0;
 28e:	1d bc       	out	0x2d, r1	; 45
 290:	1c bc       	out	0x2c, r1	; 44
void playSongMod(){
	
	while(start_addr < stop_addr){
		

		for(int i = 0; i < 5; i++){
 292:	2f 5f       	subi	r18, 0xFF	; 255
 294:	3f 4f       	sbci	r19, 0xFF	; 255
 296:	25 30       	cpi	r18, 0x05	; 5
 298:	31 05       	cpc	r19, r1
 29a:	49 f7       	brne	.-46     	; 0x26e <playSongMod+0x16>
 29c:	4b 5f       	subi	r20, 0xFB	; 251
 29e:	5f 4f       	sbci	r21, 0xFF	; 255
 2a0:	50 93 75 01 	sts	0x0175, r21
 2a4:	40 93 74 01 	sts	0x0174, r20
			}
		}

		uint16_t lsb = midiData[3];
		uint16_t msb = midiData[4];
		uint16_t timeInterval = lsb + (0xFF00 & (msb << 8) );
 2a8:	d0 91 7e 01 	lds	r29, 0x017E
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	80 91 7d 01 	lds	r24, 0x017D
 2b2:	6e 01       	movw	r12, r28
 2b4:	c8 0e       	add	r12, r24
 2b6:	d1 1c       	adc	r13, r1
		float speedMod;
		if(ReadADC() > 0 && ReadADC() < 180){
 2b8:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2bc:	89 2b       	or	r24, r25
 2be:	81 f0       	breq	.+32     	; 0x2e0 <playSongMod+0x88>
 2c0:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2c4:	84 3b       	cpi	r24, 0xB4	; 180
 2c6:	91 05       	cpc	r25, r1
 2c8:	58 f4       	brcc	.+22     	; 0x2e0 <playSongMod+0x88>
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	ef 2e       	mov	r14, r31
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	ff 2e       	mov	r15, r31
 2d4:	f0 e4       	ldi	r31, 0x40	; 64
 2d6:	0f 2f       	mov	r16, r31
 2d8:	f0 e4       	ldi	r31, 0x40	; 64
 2da:	1f 2f       	mov	r17, r31
 2dc:	f0 2d       	mov	r31, r0
 2de:	1f c0       	rjmp	.+62     	; 0x31e <playSongMod+0xc6>
			speedMod = 3;
		}else if(ReadADC() > 180 && ReadADC() < 240){
 2e0:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2e4:	85 3b       	cpi	r24, 0xB5	; 181
 2e6:	91 05       	cpc	r25, r1
 2e8:	80 f0       	brcs	.+32     	; 0x30a <playSongMod+0xb2>
 2ea:	0e 94 6c 00 	call	0xd8	; 0xd8 <ReadADC>
 2ee:	80 3f       	cpi	r24, 0xF0	; 240
 2f0:	91 05       	cpc	r25, r1
 2f2:	58 f4       	brcc	.+22     	; 0x30a <playSongMod+0xb2>
 2f4:	0f 2e       	mov	r0, r31
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ef 2e       	mov	r14, r31
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ff 2e       	mov	r15, r31
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	0f 2f       	mov	r16, r31
 302:	ff e3       	ldi	r31, 0x3F	; 63
 304:	1f 2f       	mov	r17, r31
 306:	f0 2d       	mov	r31, r0
 308:	0a c0       	rjmp	.+20     	; 0x31e <playSongMod+0xc6>
 30a:	0f 2e       	mov	r0, r31
 30c:	fd ec       	ldi	r31, 0xCD	; 205
 30e:	ef 2e       	mov	r14, r31
 310:	fc ec       	ldi	r31, 0xCC	; 204
 312:	ff 2e       	mov	r15, r31
 314:	fc ec       	ldi	r31, 0xCC	; 204
 316:	0f 2f       	mov	r16, r31
 318:	fd e3       	ldi	r31, 0x3D	; 61
 31a:	1f 2f       	mov	r17, r31
 31c:	f0 2d       	mov	r31, r0
		}
		else{
			speedMod = .1;
		}

		if(start_addr != 5){
 31e:	80 91 74 01 	lds	r24, 0x0174
 322:	90 91 75 01 	lds	r25, 0x0175
 326:	05 97       	sbiw	r24, 0x05	; 5
 328:	b9 f0       	breq	.+46     	; 0x358 <playSongMod+0x100>
			while(TCNT1 < timeInterval*speedMod);
 32a:	b6 01       	movw	r22, r12
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 334:	a8 01       	movw	r20, r16
 336:	97 01       	movw	r18, r14
 338:	0e 94 b0 03 	call	0x760	; 0x760 <__mulsf3>
 33c:	7b 01       	movw	r14, r22
 33e:	8c 01       	movw	r16, r24
 340:	6c b5       	in	r22, 0x2c	; 44
 342:	7d b5       	in	r23, 0x2d	; 45
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__floatunsisf>
 34c:	a8 01       	movw	r20, r16
 34e:	97 01       	movw	r18, r14
 350:	0e 94 aa 04 	call	0x954	; 0x954 <__ltsf2>
 354:	87 fd       	sbrc	r24, 7
 356:	f4 cf       	rjmp	.-24     	; 0x340 <playSongMod+0xe8>
 358:	00 e0       	ldi	r16, 0x00	; 0
 35a:	10 e0       	ldi	r17, 0x00	; 0
		}


		
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 35c:	f8 01       	movw	r30, r16
 35e:	e6 58       	subi	r30, 0x86	; 134
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	80 81       	ld	r24, Z
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
			if(i==1){
 36a:	01 30       	cpi	r16, 0x01	; 1
 36c:	11 05       	cpc	r17, r1
 36e:	19 f4       	brne	.+6      	; 0x376 <playSongMod+0x11e>
				PORTB = midiData[i];
 370:	80 91 7b 01 	lds	r24, 0x017B
 374:	88 bb       	out	0x18, r24	; 24
			while(TCNT1 < timeInterval*speedMod);
		}


		
		for(int i = 0; i < 3; i++){
 376:	0f 5f       	subi	r16, 0xFF	; 255
 378:	1f 4f       	sbci	r17, 0xFF	; 255
 37a:	03 30       	cpi	r16, 0x03	; 3
 37c:	11 05       	cpc	r17, r1
 37e:	71 f7       	brne	.-36     	; 0x35c <playSongMod+0x104>
	
}

void playSongMod(){
	
	while(start_addr < stop_addr){
 380:	40 91 74 01 	lds	r20, 0x0174
 384:	50 91 75 01 	lds	r21, 0x0175
 388:	80 91 76 01 	lds	r24, 0x0176
 38c:	90 91 77 01 	lds	r25, 0x0177
 390:	48 17       	cp	r20, r24
 392:	59 07       	cpc	r21, r25
 394:	08 f4       	brcc	.+2      	; 0x398 <playSongMod+0x140>
 396:	69 cf       	rjmp	.-302    	; 0x26a <playSongMod+0x12>
			if(i==1){
				PORTB = midiData[i];
			}
		}
	}
	start_addr = 0;
 398:	10 92 75 01 	sts	0x0175, r1
 39c:	10 92 74 01 	sts	0x0174, r1
	
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	ff 90       	pop	r15
 3aa:	ef 90       	pop	r14
 3ac:	df 90       	pop	r13
 3ae:	cf 90       	pop	r12
 3b0:	08 95       	ret

000003b2 <modify>:
	playSong();
}


void modify(){
	playSongMod();
 3b2:	0e 94 2c 01 	call	0x258	; 0x258 <playSongMod>
}
 3b6:	08 95       	ret

000003b8 <playSong>:
	}
	
	
}

void playSong(){
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	42 c0       	rjmp	.+132    	; 0x446 <playSong+0x8e>
	
	while(start_addr < stop_addr && (PINA & 0x02) ){
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	
}

void playSong(){
 3c6:	ca 01       	movw	r24, r20
 3c8:	82 0f       	add	r24, r18
 3ca:	93 1f       	adc	r25, r19
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 3cc:	e1 99       	sbic	0x1c, 1	; 28
 3ce:	fe cf       	rjmp	.-4      	; 0x3cc <playSong+0x14>
	/* Set up address register */
	EEAR = uiAddress;
 3d0:	9f bb       	out	0x1f, r25	; 31
 3d2:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 3d4:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 3d6:	8d b3       	in	r24, 0x1d	; 29
	while(start_addr < stop_addr && (PINA & 0x02) ){
		

		for(int i = 0; i < 5; i++){

			midiData[i] = EEPROM_read(start_addr);
 3d8:	fa 01       	movw	r30, r20
 3da:	e6 58       	subi	r30, 0x86	; 134
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	80 83       	st	Z, r24
			start_addr++;
			if(i==4){
 3e0:	44 30       	cpi	r20, 0x04	; 4
 3e2:	51 05       	cpc	r21, r1
 3e4:	11 f4       	brne	.+4      	; 0x3ea <playSong+0x32>
				TCNT1 = 0;
 3e6:	1d bc       	out	0x2d, r1	; 45
 3e8:	1c bc       	out	0x2c, r1	; 44
void playSong(){
	
	while(start_addr < stop_addr && (PINA & 0x02) ){
		

		for(int i = 0; i < 5; i++){
 3ea:	4f 5f       	subi	r20, 0xFF	; 255
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	45 30       	cpi	r20, 0x05	; 5
 3f0:	51 05       	cpc	r21, r1
 3f2:	49 f7       	brne	.-46     	; 0x3c6 <playSong+0xe>
 3f4:	2b 5f       	subi	r18, 0xFB	; 251
 3f6:	3f 4f       	sbci	r19, 0xFF	; 255
 3f8:	30 93 75 01 	sts	0x0175, r19
 3fc:	20 93 74 01 	sts	0x0174, r18
			}
		}

		uint16_t lsb = midiData[3];
		uint16_t msb = midiData[4];
		uint16_t timeInterval = lsb + (0xFF00 & (msb << 8) );
 400:	10 91 7e 01 	lds	r17, 0x017E
 404:	00 e0       	ldi	r16, 0x00	; 0
 406:	80 91 7d 01 	lds	r24, 0x017D
 40a:	a8 01       	movw	r20, r16
 40c:	48 0f       	add	r20, r24
 40e:	51 1d       	adc	r21, r1
		
		if(start_addr != 5){
 410:	25 30       	cpi	r18, 0x05	; 5
 412:	31 05       	cpc	r19, r1
 414:	29 f0       	breq	.+10     	; 0x420 <playSong+0x68>
			while(TCNT1 < timeInterval);
 416:	8c b5       	in	r24, 0x2c	; 44
 418:	9d b5       	in	r25, 0x2d	; 45
 41a:	84 17       	cp	r24, r20
 41c:	95 07       	cpc	r25, r21
 41e:	d8 f3       	brcs	.-10     	; 0x416 <playSong+0x5e>
 420:	c0 e0       	ldi	r28, 0x00	; 0
 422:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 424:	fe 01       	movw	r30, r28
 426:	e6 58       	subi	r30, 0x86	; 134
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	80 81       	ld	r24, Z
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 a9 00 	call	0x152	; 0x152 <midi_Transmit>
			if(i==1){
 432:	c1 30       	cpi	r28, 0x01	; 1
 434:	d1 05       	cpc	r29, r1
 436:	19 f4       	brne	.+6      	; 0x43e <playSong+0x86>
				PORTB = midiData[i];
 438:	80 91 7b 01 	lds	r24, 0x017B
 43c:	88 bb       	out	0x18, r24	; 24
		
		if(start_addr != 5){
			while(TCNT1 < timeInterval);
		}
		
		for(int i = 0; i < 3; i++){
 43e:	21 96       	adiw	r28, 0x01	; 1
 440:	c3 30       	cpi	r28, 0x03	; 3
 442:	d1 05       	cpc	r29, r1
 444:	79 f7       	brne	.-34     	; 0x424 <playSong+0x6c>
	
}

void playSong(){
	
	while(start_addr < stop_addr && (PINA & 0x02) ){
 446:	20 91 74 01 	lds	r18, 0x0174
 44a:	30 91 75 01 	lds	r19, 0x0175
 44e:	80 91 76 01 	lds	r24, 0x0176
 452:	90 91 77 01 	lds	r25, 0x0177
 456:	28 17       	cp	r18, r24
 458:	39 07       	cpc	r19, r25
 45a:	10 f4       	brcc	.+4      	; 0x460 <playSong+0xa8>
 45c:	c9 99       	sbic	0x19, 1	; 25
 45e:	b1 cf       	rjmp	.-158    	; 0x3c2 <playSong+0xa>
			if(i==1){
				PORTB = midiData[i];
			}
		}
	}
	start_addr = 0;
 460:	10 92 75 01 	sts	0x0175, r1
 464:	10 92 74 01 	sts	0x0174, r1
	
}
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <playBack>:
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 472:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <playSong>
}
 476:	08 95       	ret

00000478 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 478:	ca 9b       	sbis	0x19, 2	; 25
 47a:	02 c0       	rjmp	.+4      	; 0x480 <midi_Receive+0x8>
 47c:	5f 9b       	sbis	0x0b, 7	; 11
 47e:	fc cf       	rjmp	.-8      	; 0x478 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 480:	8c b1       	in	r24, 0x0c	; 12
}
 482:	08 95       	ret

00000484 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 484:	01 c0       	rjmp	.+2      	; 0x488 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 486:	8c b1       	in	r24, 0x0c	; 12
 488:	5f 99       	sbic	0x0b, 7	; 11
 48a:	fd cf       	rjmp	.-6      	; 0x486 <midi_Flush+0x2>
}
 48c:	08 95       	ret

0000048e <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 48e:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 490:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 492:	08 95       	ret

00000494 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 494:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 496:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 498:	8c b5       	in	r24, 0x2c	; 44
 49a:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 49c:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 49e:	08 95       	ret

000004a0 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 4a0:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 4a2:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 4a4:	9d bd       	out	0x2d, r25	; 45
 4a6:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 4a8:	2f bf       	out	0x3f, r18	; 63
}
 4aa:	08 95       	ret

000004ac <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 4ac:	e1 99       	sbic	0x1c, 1	; 28
 4ae:	fe cf       	rjmp	.-4      	; 0x4ac <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 4b0:	9f bb       	out	0x1f, r25	; 31
 4b2:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 4b4:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 4b6:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 4b8:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 4ba:	08 95       	ret

000004bc <writeSong2>:
	PORTB = EEPROM_read(9);
	_delay_ms(500);
}


void writeSong2(){
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	20 e0       	ldi	r18, 0x00	; 0
 4c2:	30 e0       	ldi	r19, 0x00	; 0
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 4c4:	ca 9b       	sbis	0x19, 2	; 25
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <writeSong2+0x10>
 4c8:	5f 9b       	sbis	0x0b, 7	; 11
 4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <writeSong2+0x8>

	/* get and return data from buffer */
	return UDR;
 4cc:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 4ce:	f9 01       	movw	r30, r18
 4d0:	e6 58       	subi	r30, 0x86	; 134
 4d2:	fe 4f       	sbci	r31, 0xFE	; 254
 4d4:	80 83       	st	Z, r24
		if(i==0){
 4d6:	21 15       	cp	r18, r1
 4d8:	31 05       	cpc	r19, r1
 4da:	39 f4       	brne	.+14     	; 0x4ea <writeSong2+0x2e>
			 lsb = TCNT1&0xFF;
 4dc:	8c b5       	in	r24, 0x2c	; 44
 4de:	9d b5       	in	r25, 0x2d	; 45
 4e0:	48 2f       	mov	r20, r24
			 msb = (TCNT1>>8);
 4e2:	8c b5       	in	r24, 0x2c	; 44
 4e4:	9d b5       	in	r25, 0x2d	; 45
			 TCNT1 = 0;
 4e6:	1d bc       	out	0x2d, r1	; 45
 4e8:	1c bc       	out	0x2c, r1	; 44


void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
 4ea:	2f 5f       	subi	r18, 0xFF	; 255
 4ec:	3f 4f       	sbci	r19, 0xFF	; 255
 4ee:	23 30       	cpi	r18, 0x03	; 3
 4f0:	31 05       	cpc	r19, r1
 4f2:	44 f3       	brlt	.-48     	; 0x4c4 <writeSong2+0x8>
			 lsb = TCNT1&0xFF;
			 msb = (TCNT1>>8);
			 TCNT1 = 0;
		}
	}
	midiData[3]= lsb;
 4f4:	40 93 7d 01 	sts	0x017D, r20
	midiData[4]= msb;
 4f8:	90 93 7e 01 	sts	0x017E, r25
	PORTB = midiData[1];
 4fc:	80 91 7b 01 	lds	r24, 0x017B
 500:	88 bb       	out	0x18, r24	; 24
	// unsigned char lsb = (0xFF & ((interval << 8) >> 8));
	// unsigned char msb = (0xFF & ((interval >> 8)));
	// midiData[3] = lsb;
	// midiData[4] = msb;

	stop_addr = eeprom_address;
 502:	80 91 72 01 	lds	r24, 0x0172
 506:	90 91 73 01 	lds	r25, 0x0173
 50a:	90 93 77 01 	sts	0x0177, r25
 50e:	80 93 76 01 	sts	0x0176, r24
 512:	ca e7       	ldi	r28, 0x7A	; 122
 514:	d1 e0       	ldi	r29, 0x01	; 1
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 516:	80 91 72 01 	lds	r24, 0x0172
 51a:	90 91 73 01 	lds	r25, 0x0173
 51e:	69 91       	ld	r22, Y+
 520:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
		eeprom_address++;		
 524:	80 91 72 01 	lds	r24, 0x0172
 528:	90 91 73 01 	lds	r25, 0x0173
 52c:	01 96       	adiw	r24, 0x01	; 1
 52e:	90 93 73 01 	sts	0x0173, r25
 532:	80 93 72 01 	sts	0x0172, r24
	// unsigned char msb = (0xFF & ((interval >> 8)));
	// midiData[3] = lsb;
	// midiData[4] = msb;

	stop_addr = eeprom_address;
	for(int j= 0; j < 5; j++){
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	cf 37       	cpi	r28, 0x7F	; 127
 53a:	d8 07       	cpc	r29, r24
 53c:	61 f7       	brne	.-40     	; 0x516 <writeSong2+0x5a>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
	
}
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	08 95       	ret

00000544 <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 544:	0e 94 5e 02 	call	0x4bc	; 0x4bc <writeSong2>
	//midiTransitTest();
}
 548:	08 95       	ret

0000054a <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
 54a:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
 54c:	8f ef       	ldi	r24, 0xFF	; 255
 54e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 550:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 552:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 554:	17 e0       	ldi	r17, 0x07	; 7
 556:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 558:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 55a:	0e 94 5d 00 	call	0xba	; 0xba <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 55e:	87 e4       	ldi	r24, 0x47	; 71
 560:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 562:	87 e8       	ldi	r24, 0x87	; 135
 564:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 566:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 568:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 56a:	88 e1       	ldi	r24, 0x18	; 24
 56c:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 56e:	86 e8       	ldi	r24, 0x86	; 134
 570:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
 572:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
 574:	99 b3       	in	r25, 0x19	; 25
 576:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
 578:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
 57a:	82 ff       	sbrs	r24, 2
 57c:	05 c0       	rjmp	.+10     	; 0x588 <main+0x3e>
 57e:	99 23       	and	r25, r25
 580:	c1 f7       	brne	.-16     	; 0x572 <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 582:	0e 94 5e 02 	call	0x4bc	; 0x4bc <writeSong2>
 586:	f5 cf       	rjmp	.-22     	; 0x572 <main+0x28>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
 588:	99 23       	and	r25, r25
 58a:	99 f3       	breq	.-26     	; 0x572 <main+0x28>
			if (mod){ // Modify Mode
 58c:	20 ff       	sbrs	r18, 0
 58e:	03 c0       	rjmp	.+6      	; 0x596 <main+0x4c>
	playSong();
}


void modify(){
	playSongMod();
 590:	0e 94 2c 01 	call	0x258	; 0x258 <playSongMod>
 594:	ee cf       	rjmp	.-36     	; 0x572 <main+0x28>
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 596:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <playSong>
 59a:	eb cf       	rjmp	.-42     	; 0x572 <main+0x28>

0000059c <eeprom_test>:




void eeprom_test(){
	EEPROM_write(1, 1);
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(2, 2);
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	62 e0       	ldi	r22, 0x02	; 2
 5ac:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(3, 3);
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	63 e0       	ldi	r22, 0x03	; 3
 5b6:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(4, 4);
 5ba:	84 e0       	ldi	r24, 0x04	; 4
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	64 e0       	ldi	r22, 0x04	; 4
 5c0:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(5, 5);
 5c4:	85 e0       	ldi	r24, 0x05	; 5
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	65 e0       	ldi	r22, 0x05	; 5
 5ca:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(6, 6);
 5ce:	86 e0       	ldi	r24, 0x06	; 6
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	66 e0       	ldi	r22, 0x06	; 6
 5d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(7, 7);
 5d8:	87 e0       	ldi	r24, 0x07	; 7
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	67 e0       	ldi	r22, 0x07	; 7
 5de:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(8, 8);
 5e2:	88 e0       	ldi	r24, 0x08	; 8
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	68 e0       	ldi	r22, 0x08	; 8
 5e8:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	EEPROM_write(9, 9);
 5ec:	89 e0       	ldi	r24, 0x09	; 9
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	69 e0       	ldi	r22, 0x09	; 9
 5f2:	0e 94 56 02 	call	0x4ac	; 0x4ac <EEPROM_write>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 5f6:	e1 99       	sbic	0x1c, 1	; 28
 5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <eeprom_test+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	9f bb       	out	0x1f, r25	; 31
 600:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 602:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 604:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(5, 5);
	EEPROM_write(6, 6);
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
 606:	88 bb       	out	0x18, r24	; 24
 608:	88 e8       	ldi	r24, 0x88	; 136
 60a:	93 e1       	ldi	r25, 0x13	; 19
 60c:	24 e6       	ldi	r18, 0x64	; 100
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	f9 01       	movw	r30, r18
 612:	31 97       	sbiw	r30, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <eeprom_test+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 616:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 618:	d9 f7       	brne	.-10     	; 0x610 <eeprom_test+0x74>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 61a:	e1 99       	sbic	0x1c, 1	; 28
 61c:	fe cf       	rjmp	.-4      	; 0x61a <eeprom_test+0x7e>
	/* Set up address register */
	EEAR = uiAddress;
 61e:	82 e0       	ldi	r24, 0x02	; 2
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	9f bb       	out	0x1f, r25	; 31
 624:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 626:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 628:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
 62a:	88 bb       	out	0x18, r24	; 24
 62c:	88 e8       	ldi	r24, 0x88	; 136
 62e:	93 e1       	ldi	r25, 0x13	; 19
 630:	24 e6       	ldi	r18, 0x64	; 100
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	f9 01       	movw	r30, r18
 636:	31 97       	sbiw	r30, 0x01	; 1
 638:	f1 f7       	brne	.-4      	; 0x636 <eeprom_test+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 63a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 63c:	d9 f7       	brne	.-10     	; 0x634 <eeprom_test+0x98>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 63e:	e1 99       	sbic	0x1c, 1	; 28
 640:	fe cf       	rjmp	.-4      	; 0x63e <eeprom_test+0xa2>
	/* Set up address register */
	EEAR = uiAddress;
 642:	83 e0       	ldi	r24, 0x03	; 3
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	9f bb       	out	0x1f, r25	; 31
 648:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 64a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 64c:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
 64e:	88 bb       	out	0x18, r24	; 24
 650:	88 e8       	ldi	r24, 0x88	; 136
 652:	93 e1       	ldi	r25, 0x13	; 19
 654:	24 e6       	ldi	r18, 0x64	; 100
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	f9 01       	movw	r30, r18
 65a:	31 97       	sbiw	r30, 0x01	; 1
 65c:	f1 f7       	brne	.-4      	; 0x65a <eeprom_test+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 65e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 660:	d9 f7       	brne	.-10     	; 0x658 <eeprom_test+0xbc>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 662:	e1 99       	sbic	0x1c, 1	; 28
 664:	fe cf       	rjmp	.-4      	; 0x662 <eeprom_test+0xc6>
	/* Set up address register */
	EEAR = uiAddress;
 666:	84 e0       	ldi	r24, 0x04	; 4
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	9f bb       	out	0x1f, r25	; 31
 66c:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 66e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 670:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
 672:	88 bb       	out	0x18, r24	; 24
 674:	88 e8       	ldi	r24, 0x88	; 136
 676:	93 e1       	ldi	r25, 0x13	; 19
 678:	24 e6       	ldi	r18, 0x64	; 100
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	f9 01       	movw	r30, r18
 67e:	31 97       	sbiw	r30, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <eeprom_test+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 682:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 684:	d9 f7       	brne	.-10     	; 0x67c <eeprom_test+0xe0>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 686:	e1 99       	sbic	0x1c, 1	; 28
 688:	fe cf       	rjmp	.-4      	; 0x686 <eeprom_test+0xea>
	/* Set up address register */
	EEAR = uiAddress;
 68a:	85 e0       	ldi	r24, 0x05	; 5
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9f bb       	out	0x1f, r25	; 31
 690:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 692:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 694:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
 696:	88 bb       	out	0x18, r24	; 24
 698:	88 e8       	ldi	r24, 0x88	; 136
 69a:	93 e1       	ldi	r25, 0x13	; 19
 69c:	24 e6       	ldi	r18, 0x64	; 100
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	f9 01       	movw	r30, r18
 6a2:	31 97       	sbiw	r30, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <eeprom_test+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6a8:	d9 f7       	brne	.-10     	; 0x6a0 <eeprom_test+0x104>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 6aa:	e1 99       	sbic	0x1c, 1	; 28
 6ac:	fe cf       	rjmp	.-4      	; 0x6aa <eeprom_test+0x10e>
	/* Set up address register */
	EEAR = uiAddress;
 6ae:	86 e0       	ldi	r24, 0x06	; 6
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	9f bb       	out	0x1f, r25	; 31
 6b4:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 6b6:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 6b8:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
 6ba:	88 bb       	out	0x18, r24	; 24
 6bc:	88 e8       	ldi	r24, 0x88	; 136
 6be:	93 e1       	ldi	r25, 0x13	; 19
 6c0:	24 e6       	ldi	r18, 0x64	; 100
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	f9 01       	movw	r30, r18
 6c6:	31 97       	sbiw	r30, 0x01	; 1
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <eeprom_test+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6cc:	d9 f7       	brne	.-10     	; 0x6c4 <eeprom_test+0x128>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 6ce:	e1 99       	sbic	0x1c, 1	; 28
 6d0:	fe cf       	rjmp	.-4      	; 0x6ce <eeprom_test+0x132>
	/* Set up address register */
	EEAR = uiAddress;
 6d2:	87 e0       	ldi	r24, 0x07	; 7
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	9f bb       	out	0x1f, r25	; 31
 6d8:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 6da:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 6dc:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
 6de:	88 bb       	out	0x18, r24	; 24
 6e0:	88 e8       	ldi	r24, 0x88	; 136
 6e2:	93 e1       	ldi	r25, 0x13	; 19
 6e4:	24 e6       	ldi	r18, 0x64	; 100
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	f9 01       	movw	r30, r18
 6ea:	31 97       	sbiw	r30, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <eeprom_test+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6f0:	d9 f7       	brne	.-10     	; 0x6e8 <eeprom_test+0x14c>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 6f2:	e1 99       	sbic	0x1c, 1	; 28
 6f4:	fe cf       	rjmp	.-4      	; 0x6f2 <eeprom_test+0x156>
	/* Set up address register */
	EEAR = uiAddress;
 6f6:	88 e0       	ldi	r24, 0x08	; 8
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	9f bb       	out	0x1f, r25	; 31
 6fc:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 6fe:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 700:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
 702:	88 bb       	out	0x18, r24	; 24
 704:	88 e8       	ldi	r24, 0x88	; 136
 706:	93 e1       	ldi	r25, 0x13	; 19
 708:	24 e6       	ldi	r18, 0x64	; 100
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	f9 01       	movw	r30, r18
 70e:	31 97       	sbiw	r30, 0x01	; 1
 710:	f1 f7       	brne	.-4      	; 0x70e <eeprom_test+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 712:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 714:	d9 f7       	brne	.-10     	; 0x70c <eeprom_test+0x170>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 716:	e1 99       	sbic	0x1c, 1	; 28
 718:	fe cf       	rjmp	.-4      	; 0x716 <eeprom_test+0x17a>
	/* Set up address register */
	EEAR = uiAddress;
 71a:	89 e0       	ldi	r24, 0x09	; 9
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	9f bb       	out	0x1f, r25	; 31
 720:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 722:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 724:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
	_delay_ms(500);
	PORTB = EEPROM_read(9);
 726:	88 bb       	out	0x18, r24	; 24
 728:	88 e8       	ldi	r24, 0x88	; 136
 72a:	93 e1       	ldi	r25, 0x13	; 19
 72c:	24 e6       	ldi	r18, 0x64	; 100
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	f9 01       	movw	r30, r18
 732:	31 97       	sbiw	r30, 0x01	; 1
 734:	f1 f7       	brne	.-4      	; 0x732 <eeprom_test+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 736:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 738:	d9 f7       	brne	.-10     	; 0x730 <eeprom_test+0x194>
	_delay_ms(500);
}
 73a:	08 95       	ret

0000073c <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 73c:	e1 99       	sbic	0x1c, 1	; 28
 73e:	fe cf       	rjmp	.-4      	; 0x73c <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 740:	9f bb       	out	0x1f, r25	; 31
 742:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 744:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 746:	8d b3       	in	r24, 0x1d	; 29
}
 748:	08 95       	ret

0000074a <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 74a:	1f 92       	push	r1
 74c:	0f 92       	push	r0
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	0f 92       	push	r0
 752:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 754:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <__mulsf3>:
 760:	a0 e2       	ldi	r26, 0x20	; 32
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	e6 eb       	ldi	r30, 0xB6	; 182
 766:	f3 e0       	ldi	r31, 0x03	; 3
 768:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__prologue_saves__>
 76c:	69 83       	std	Y+1, r22	; 0x01
 76e:	7a 83       	std	Y+2, r23	; 0x02
 770:	8b 83       	std	Y+3, r24	; 0x03
 772:	9c 83       	std	Y+4, r25	; 0x04
 774:	2d 83       	std	Y+5, r18	; 0x05
 776:	3e 83       	std	Y+6, r19	; 0x06
 778:	4f 83       	std	Y+7, r20	; 0x07
 77a:	58 87       	std	Y+8, r21	; 0x08
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	be 01       	movw	r22, r28
 782:	67 5f       	subi	r22, 0xF7	; 247
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	0e 94 77 06 	call	0xcee	; 0xcee <__unpack_f>
 78a:	ce 01       	movw	r24, r28
 78c:	05 96       	adiw	r24, 0x05	; 5
 78e:	be 01       	movw	r22, r28
 790:	6f 5e       	subi	r22, 0xEF	; 239
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	0e 94 77 06 	call	0xcee	; 0xcee <__unpack_f>
 798:	99 85       	ldd	r25, Y+9	; 0x09
 79a:	92 30       	cpi	r25, 0x02	; 2
 79c:	88 f0       	brcs	.+34     	; 0x7c0 <__mulsf3+0x60>
 79e:	89 89       	ldd	r24, Y+17	; 0x11
 7a0:	82 30       	cpi	r24, 0x02	; 2
 7a2:	c8 f0       	brcs	.+50     	; 0x7d6 <__mulsf3+0x76>
 7a4:	94 30       	cpi	r25, 0x04	; 4
 7a6:	19 f4       	brne	.+6      	; 0x7ae <__mulsf3+0x4e>
 7a8:	82 30       	cpi	r24, 0x02	; 2
 7aa:	51 f4       	brne	.+20     	; 0x7c0 <__mulsf3+0x60>
 7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__mulsf3+0x56>
 7ae:	84 30       	cpi	r24, 0x04	; 4
 7b0:	29 f4       	brne	.+10     	; 0x7bc <__mulsf3+0x5c>
 7b2:	92 30       	cpi	r25, 0x02	; 2
 7b4:	81 f4       	brne	.+32     	; 0x7d6 <__mulsf3+0x76>
 7b6:	80 e6       	ldi	r24, 0x60	; 96
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	c6 c0       	rjmp	.+396    	; 0x948 <__stack+0xe9>
 7bc:	92 30       	cpi	r25, 0x02	; 2
 7be:	49 f4       	brne	.+18     	; 0x7d2 <__mulsf3+0x72>
 7c0:	20 e0       	ldi	r18, 0x00	; 0
 7c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 7c4:	8a 89       	ldd	r24, Y+18	; 0x12
 7c6:	98 13       	cpse	r25, r24
 7c8:	21 e0       	ldi	r18, 0x01	; 1
 7ca:	2a 87       	std	Y+10, r18	; 0x0a
 7cc:	ce 01       	movw	r24, r28
 7ce:	09 96       	adiw	r24, 0x09	; 9
 7d0:	bb c0       	rjmp	.+374    	; 0x948 <__stack+0xe9>
 7d2:	82 30       	cpi	r24, 0x02	; 2
 7d4:	49 f4       	brne	.+18     	; 0x7e8 <__mulsf3+0x88>
 7d6:	20 e0       	ldi	r18, 0x00	; 0
 7d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 7da:	8a 89       	ldd	r24, Y+18	; 0x12
 7dc:	98 13       	cpse	r25, r24
 7de:	21 e0       	ldi	r18, 0x01	; 1
 7e0:	2a 8b       	std	Y+18, r18	; 0x12
 7e2:	ce 01       	movw	r24, r28
 7e4:	41 96       	adiw	r24, 0x11	; 17
 7e6:	b0 c0       	rjmp	.+352    	; 0x948 <__stack+0xe9>
 7e8:	2d 84       	ldd	r2, Y+13	; 0x0d
 7ea:	3e 84       	ldd	r3, Y+14	; 0x0e
 7ec:	4f 84       	ldd	r4, Y+15	; 0x0f
 7ee:	58 88       	ldd	r5, Y+16	; 0x10
 7f0:	6d 88       	ldd	r6, Y+21	; 0x15
 7f2:	7e 88       	ldd	r7, Y+22	; 0x16
 7f4:	8f 88       	ldd	r8, Y+23	; 0x17
 7f6:	98 8c       	ldd	r9, Y+24	; 0x18
 7f8:	ee 24       	eor	r14, r14
 7fa:	ff 24       	eor	r15, r15
 7fc:	87 01       	movw	r16, r14
 7fe:	aa 24       	eor	r10, r10
 800:	bb 24       	eor	r11, r11
 802:	65 01       	movw	r12, r10
 804:	40 e0       	ldi	r20, 0x00	; 0
 806:	50 e0       	ldi	r21, 0x00	; 0
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	70 e0       	ldi	r23, 0x00	; 0
 80c:	e0 e0       	ldi	r30, 0x00	; 0
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	c1 01       	movw	r24, r2
 812:	81 70       	andi	r24, 0x01	; 1
 814:	90 70       	andi	r25, 0x00	; 0
 816:	89 2b       	or	r24, r25
 818:	e9 f0       	breq	.+58     	; 0x854 <__mulsf3+0xf4>
 81a:	e6 0c       	add	r14, r6
 81c:	f7 1c       	adc	r15, r7
 81e:	08 1d       	adc	r16, r8
 820:	19 1d       	adc	r17, r9
 822:	9a 01       	movw	r18, r20
 824:	ab 01       	movw	r20, r22
 826:	2a 0d       	add	r18, r10
 828:	3b 1d       	adc	r19, r11
 82a:	4c 1d       	adc	r20, r12
 82c:	5d 1d       	adc	r21, r13
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	a0 e0       	ldi	r26, 0x00	; 0
 834:	b0 e0       	ldi	r27, 0x00	; 0
 836:	e6 14       	cp	r14, r6
 838:	f7 04       	cpc	r15, r7
 83a:	08 05       	cpc	r16, r8
 83c:	19 05       	cpc	r17, r9
 83e:	20 f4       	brcc	.+8      	; 0x848 <__mulsf3+0xe8>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	a0 e0       	ldi	r26, 0x00	; 0
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	ba 01       	movw	r22, r20
 84a:	a9 01       	movw	r20, r18
 84c:	48 0f       	add	r20, r24
 84e:	59 1f       	adc	r21, r25
 850:	6a 1f       	adc	r22, r26
 852:	7b 1f       	adc	r23, r27
 854:	aa 0c       	add	r10, r10
 856:	bb 1c       	adc	r11, r11
 858:	cc 1c       	adc	r12, r12
 85a:	dd 1c       	adc	r13, r13
 85c:	97 fe       	sbrs	r9, 7
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__stack+0x11>
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	a0 e0       	ldi	r26, 0x00	; 0
 866:	b0 e0       	ldi	r27, 0x00	; 0
 868:	a8 2a       	or	r10, r24
 86a:	b9 2a       	or	r11, r25
 86c:	ca 2a       	or	r12, r26
 86e:	db 2a       	or	r13, r27
 870:	31 96       	adiw	r30, 0x01	; 1
 872:	e0 32       	cpi	r30, 0x20	; 32
 874:	f1 05       	cpc	r31, r1
 876:	49 f0       	breq	.+18     	; 0x88a <__stack+0x2b>
 878:	66 0c       	add	r6, r6
 87a:	77 1c       	adc	r7, r7
 87c:	88 1c       	adc	r8, r8
 87e:	99 1c       	adc	r9, r9
 880:	56 94       	lsr	r5
 882:	47 94       	ror	r4
 884:	37 94       	ror	r3
 886:	27 94       	ror	r2
 888:	c3 cf       	rjmp	.-122    	; 0x810 <__mulsf3+0xb0>
 88a:	fa 85       	ldd	r31, Y+10	; 0x0a
 88c:	ea 89       	ldd	r30, Y+18	; 0x12
 88e:	2b 89       	ldd	r18, Y+19	; 0x13
 890:	3c 89       	ldd	r19, Y+20	; 0x14
 892:	8b 85       	ldd	r24, Y+11	; 0x0b
 894:	9c 85       	ldd	r25, Y+12	; 0x0c
 896:	28 0f       	add	r18, r24
 898:	39 1f       	adc	r19, r25
 89a:	2e 5f       	subi	r18, 0xFE	; 254
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	17 c0       	rjmp	.+46     	; 0x8ce <__stack+0x6f>
 8a0:	ca 01       	movw	r24, r20
 8a2:	81 70       	andi	r24, 0x01	; 1
 8a4:	90 70       	andi	r25, 0x00	; 0
 8a6:	89 2b       	or	r24, r25
 8a8:	61 f0       	breq	.+24     	; 0x8c2 <__stack+0x63>
 8aa:	16 95       	lsr	r17
 8ac:	07 95       	ror	r16
 8ae:	f7 94       	ror	r15
 8b0:	e7 94       	ror	r14
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	a0 e0       	ldi	r26, 0x00	; 0
 8b8:	b0 e8       	ldi	r27, 0x80	; 128
 8ba:	e8 2a       	or	r14, r24
 8bc:	f9 2a       	or	r15, r25
 8be:	0a 2b       	or	r16, r26
 8c0:	1b 2b       	or	r17, r27
 8c2:	76 95       	lsr	r23
 8c4:	67 95       	ror	r22
 8c6:	57 95       	ror	r21
 8c8:	47 95       	ror	r20
 8ca:	2f 5f       	subi	r18, 0xFF	; 255
 8cc:	3f 4f       	sbci	r19, 0xFF	; 255
 8ce:	77 fd       	sbrc	r23, 7
 8d0:	e7 cf       	rjmp	.-50     	; 0x8a0 <__stack+0x41>
 8d2:	0c c0       	rjmp	.+24     	; 0x8ec <__stack+0x8d>
 8d4:	44 0f       	add	r20, r20
 8d6:	55 1f       	adc	r21, r21
 8d8:	66 1f       	adc	r22, r22
 8da:	77 1f       	adc	r23, r23
 8dc:	17 fd       	sbrc	r17, 7
 8de:	41 60       	ori	r20, 0x01	; 1
 8e0:	ee 0c       	add	r14, r14
 8e2:	ff 1c       	adc	r15, r15
 8e4:	00 1f       	adc	r16, r16
 8e6:	11 1f       	adc	r17, r17
 8e8:	21 50       	subi	r18, 0x01	; 1
 8ea:	30 40       	sbci	r19, 0x00	; 0
 8ec:	40 30       	cpi	r20, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	59 07       	cpc	r21, r25
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	69 07       	cpc	r22, r25
 8f6:	90 e4       	ldi	r25, 0x40	; 64
 8f8:	79 07       	cpc	r23, r25
 8fa:	60 f3       	brcs	.-40     	; 0x8d4 <__stack+0x75>
 8fc:	2b 8f       	std	Y+27, r18	; 0x1b
 8fe:	3c 8f       	std	Y+28, r19	; 0x1c
 900:	db 01       	movw	r26, r22
 902:	ca 01       	movw	r24, r20
 904:	8f 77       	andi	r24, 0x7F	; 127
 906:	90 70       	andi	r25, 0x00	; 0
 908:	a0 70       	andi	r26, 0x00	; 0
 90a:	b0 70       	andi	r27, 0x00	; 0
 90c:	80 34       	cpi	r24, 0x40	; 64
 90e:	91 05       	cpc	r25, r1
 910:	a1 05       	cpc	r26, r1
 912:	b1 05       	cpc	r27, r1
 914:	61 f4       	brne	.+24     	; 0x92e <__stack+0xcf>
 916:	47 fd       	sbrc	r20, 7
 918:	0a c0       	rjmp	.+20     	; 0x92e <__stack+0xcf>
 91a:	e1 14       	cp	r14, r1
 91c:	f1 04       	cpc	r15, r1
 91e:	01 05       	cpc	r16, r1
 920:	11 05       	cpc	r17, r1
 922:	29 f0       	breq	.+10     	; 0x92e <__stack+0xcf>
 924:	40 5c       	subi	r20, 0xC0	; 192
 926:	5f 4f       	sbci	r21, 0xFF	; 255
 928:	6f 4f       	sbci	r22, 0xFF	; 255
 92a:	7f 4f       	sbci	r23, 0xFF	; 255
 92c:	40 78       	andi	r20, 0x80	; 128
 92e:	1a 8e       	std	Y+26, r1	; 0x1a
 930:	fe 17       	cp	r31, r30
 932:	11 f0       	breq	.+4      	; 0x938 <__stack+0xd9>
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	8a 8f       	std	Y+26, r24	; 0x1a
 938:	4d 8f       	std	Y+29, r20	; 0x1d
 93a:	5e 8f       	std	Y+30, r21	; 0x1e
 93c:	6f 8f       	std	Y+31, r22	; 0x1f
 93e:	78 a3       	std	Y+32, r23	; 0x20
 940:	83 e0       	ldi	r24, 0x03	; 3
 942:	89 8f       	std	Y+25, r24	; 0x19
 944:	ce 01       	movw	r24, r28
 946:	49 96       	adiw	r24, 0x19	; 25
 948:	0e 94 a2 05 	call	0xb44	; 0xb44 <__pack_f>
 94c:	a0 96       	adiw	r28, 0x20	; 32
 94e:	e2 e1       	ldi	r30, 0x12	; 18
 950:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__epilogue_restores__>

00000954 <__ltsf2>:
 954:	a8 e1       	ldi	r26, 0x18	; 24
 956:	b0 e0       	ldi	r27, 0x00	; 0
 958:	e0 eb       	ldi	r30, 0xB0	; 176
 95a:	f4 e0       	ldi	r31, 0x04	; 4
 95c:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__prologue_saves__+0x18>
 960:	69 83       	std	Y+1, r22	; 0x01
 962:	7a 83       	std	Y+2, r23	; 0x02
 964:	8b 83       	std	Y+3, r24	; 0x03
 966:	9c 83       	std	Y+4, r25	; 0x04
 968:	2d 83       	std	Y+5, r18	; 0x05
 96a:	3e 83       	std	Y+6, r19	; 0x06
 96c:	4f 83       	std	Y+7, r20	; 0x07
 96e:	58 87       	std	Y+8, r21	; 0x08
 970:	89 e0       	ldi	r24, 0x09	; 9
 972:	e8 2e       	mov	r14, r24
 974:	f1 2c       	mov	r15, r1
 976:	ec 0e       	add	r14, r28
 978:	fd 1e       	adc	r15, r29
 97a:	ce 01       	movw	r24, r28
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	b7 01       	movw	r22, r14
 980:	0e 94 77 06 	call	0xcee	; 0xcee <__unpack_f>
 984:	8e 01       	movw	r16, r28
 986:	0f 5e       	subi	r16, 0xEF	; 239
 988:	1f 4f       	sbci	r17, 0xFF	; 255
 98a:	ce 01       	movw	r24, r28
 98c:	05 96       	adiw	r24, 0x05	; 5
 98e:	b8 01       	movw	r22, r16
 990:	0e 94 77 06 	call	0xcee	; 0xcee <__unpack_f>
 994:	89 85       	ldd	r24, Y+9	; 0x09
 996:	82 30       	cpi	r24, 0x02	; 2
 998:	40 f0       	brcs	.+16     	; 0x9aa <__ltsf2+0x56>
 99a:	89 89       	ldd	r24, Y+17	; 0x11
 99c:	82 30       	cpi	r24, 0x02	; 2
 99e:	28 f0       	brcs	.+10     	; 0x9aa <__ltsf2+0x56>
 9a0:	c7 01       	movw	r24, r14
 9a2:	b8 01       	movw	r22, r16
 9a4:	0e 94 ef 06 	call	0xdde	; 0xdde <__fpcmp_parts_f>
 9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__ltsf2+0x58>
 9aa:	81 e0       	ldi	r24, 0x01	; 1
 9ac:	68 96       	adiw	r28, 0x18	; 24
 9ae:	e6 e0       	ldi	r30, 0x06	; 6
 9b0:	0c 94 70 07 	jmp	0xee0	; 0xee0 <__epilogue_restores__+0x18>

000009b4 <__floatunsisf>:
 9b4:	a8 e0       	ldi	r26, 0x08	; 8
 9b6:	b0 e0       	ldi	r27, 0x00	; 0
 9b8:	e0 ee       	ldi	r30, 0xE0	; 224
 9ba:	f4 e0       	ldi	r31, 0x04	; 4
 9bc:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__prologue_saves__+0x10>
 9c0:	7b 01       	movw	r14, r22
 9c2:	8c 01       	movw	r16, r24
 9c4:	61 15       	cp	r22, r1
 9c6:	71 05       	cpc	r23, r1
 9c8:	81 05       	cpc	r24, r1
 9ca:	91 05       	cpc	r25, r1
 9cc:	19 f4       	brne	.+6      	; 0x9d4 <__floatunsisf+0x20>
 9ce:	82 e0       	ldi	r24, 0x02	; 2
 9d0:	89 83       	std	Y+1, r24	; 0x01
 9d2:	60 c0       	rjmp	.+192    	; 0xa94 <__floatunsisf+0xe0>
 9d4:	83 e0       	ldi	r24, 0x03	; 3
 9d6:	89 83       	std	Y+1, r24	; 0x01
 9d8:	8e e1       	ldi	r24, 0x1E	; 30
 9da:	c8 2e       	mov	r12, r24
 9dc:	d1 2c       	mov	r13, r1
 9de:	dc 82       	std	Y+4, r13	; 0x04
 9e0:	cb 82       	std	Y+3, r12	; 0x03
 9e2:	ed 82       	std	Y+5, r14	; 0x05
 9e4:	fe 82       	std	Y+6, r15	; 0x06
 9e6:	0f 83       	std	Y+7, r16	; 0x07
 9e8:	18 87       	std	Y+8, r17	; 0x08
 9ea:	c8 01       	movw	r24, r16
 9ec:	b7 01       	movw	r22, r14
 9ee:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__clzsi2>
 9f2:	fc 01       	movw	r30, r24
 9f4:	31 97       	sbiw	r30, 0x01	; 1
 9f6:	f7 ff       	sbrs	r31, 7
 9f8:	3b c0       	rjmp	.+118    	; 0xa70 <__floatunsisf+0xbc>
 9fa:	22 27       	eor	r18, r18
 9fc:	33 27       	eor	r19, r19
 9fe:	2e 1b       	sub	r18, r30
 a00:	3f 0b       	sbc	r19, r31
 a02:	57 01       	movw	r10, r14
 a04:	68 01       	movw	r12, r16
 a06:	02 2e       	mov	r0, r18
 a08:	04 c0       	rjmp	.+8      	; 0xa12 <__floatunsisf+0x5e>
 a0a:	d6 94       	lsr	r13
 a0c:	c7 94       	ror	r12
 a0e:	b7 94       	ror	r11
 a10:	a7 94       	ror	r10
 a12:	0a 94       	dec	r0
 a14:	d2 f7       	brpl	.-12     	; 0xa0a <__floatunsisf+0x56>
 a16:	40 e0       	ldi	r20, 0x00	; 0
 a18:	50 e0       	ldi	r21, 0x00	; 0
 a1a:	60 e0       	ldi	r22, 0x00	; 0
 a1c:	70 e0       	ldi	r23, 0x00	; 0
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	a0 e0       	ldi	r26, 0x00	; 0
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	04 c0       	rjmp	.+8      	; 0xa30 <__floatunsisf+0x7c>
 a28:	88 0f       	add	r24, r24
 a2a:	99 1f       	adc	r25, r25
 a2c:	aa 1f       	adc	r26, r26
 a2e:	bb 1f       	adc	r27, r27
 a30:	2a 95       	dec	r18
 a32:	d2 f7       	brpl	.-12     	; 0xa28 <__floatunsisf+0x74>
 a34:	01 97       	sbiw	r24, 0x01	; 1
 a36:	a1 09       	sbc	r26, r1
 a38:	b1 09       	sbc	r27, r1
 a3a:	8e 21       	and	r24, r14
 a3c:	9f 21       	and	r25, r15
 a3e:	a0 23       	and	r26, r16
 a40:	b1 23       	and	r27, r17
 a42:	00 97       	sbiw	r24, 0x00	; 0
 a44:	a1 05       	cpc	r26, r1
 a46:	b1 05       	cpc	r27, r1
 a48:	21 f0       	breq	.+8      	; 0xa52 <__floatunsisf+0x9e>
 a4a:	41 e0       	ldi	r20, 0x01	; 1
 a4c:	50 e0       	ldi	r21, 0x00	; 0
 a4e:	60 e0       	ldi	r22, 0x00	; 0
 a50:	70 e0       	ldi	r23, 0x00	; 0
 a52:	4a 29       	or	r20, r10
 a54:	5b 29       	or	r21, r11
 a56:	6c 29       	or	r22, r12
 a58:	7d 29       	or	r23, r13
 a5a:	4d 83       	std	Y+5, r20	; 0x05
 a5c:	5e 83       	std	Y+6, r21	; 0x06
 a5e:	6f 83       	std	Y+7, r22	; 0x07
 a60:	78 87       	std	Y+8, r23	; 0x08
 a62:	8e e1       	ldi	r24, 0x1E	; 30
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	8e 1b       	sub	r24, r30
 a68:	9f 0b       	sbc	r25, r31
 a6a:	9c 83       	std	Y+4, r25	; 0x04
 a6c:	8b 83       	std	Y+3, r24	; 0x03
 a6e:	12 c0       	rjmp	.+36     	; 0xa94 <__floatunsisf+0xe0>
 a70:	30 97       	sbiw	r30, 0x00	; 0
 a72:	81 f0       	breq	.+32     	; 0xa94 <__floatunsisf+0xe0>
 a74:	0e 2e       	mov	r0, r30
 a76:	04 c0       	rjmp	.+8      	; 0xa80 <__floatunsisf+0xcc>
 a78:	ee 0c       	add	r14, r14
 a7a:	ff 1c       	adc	r15, r15
 a7c:	00 1f       	adc	r16, r16
 a7e:	11 1f       	adc	r17, r17
 a80:	0a 94       	dec	r0
 a82:	d2 f7       	brpl	.-12     	; 0xa78 <__floatunsisf+0xc4>
 a84:	ed 82       	std	Y+5, r14	; 0x05
 a86:	fe 82       	std	Y+6, r15	; 0x06
 a88:	0f 83       	std	Y+7, r16	; 0x07
 a8a:	18 87       	std	Y+8, r17	; 0x08
 a8c:	ce 1a       	sub	r12, r30
 a8e:	df 0a       	sbc	r13, r31
 a90:	dc 82       	std	Y+4, r13	; 0x04
 a92:	cb 82       	std	Y+3, r12	; 0x03
 a94:	1a 82       	std	Y+2, r1	; 0x02
 a96:	ce 01       	movw	r24, r28
 a98:	01 96       	adiw	r24, 0x01	; 1
 a9a:	0e 94 a2 05 	call	0xb44	; 0xb44 <__pack_f>
 a9e:	28 96       	adiw	r28, 0x08	; 8
 aa0:	ea e0       	ldi	r30, 0x0A	; 10
 aa2:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__epilogue_restores__+0x10>

00000aa6 <__clzsi2>:
 aa6:	ef 92       	push	r14
 aa8:	ff 92       	push	r15
 aaa:	0f 93       	push	r16
 aac:	1f 93       	push	r17
 aae:	7b 01       	movw	r14, r22
 ab0:	8c 01       	movw	r16, r24
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	e8 16       	cp	r14, r24
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	f8 06       	cpc	r15, r24
 aba:	81 e0       	ldi	r24, 0x01	; 1
 abc:	08 07       	cpc	r16, r24
 abe:	80 e0       	ldi	r24, 0x00	; 0
 ac0:	18 07       	cpc	r17, r24
 ac2:	88 f4       	brcc	.+34     	; 0xae6 <__clzsi2+0x40>
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	e8 16       	cp	r14, r24
 ac8:	f1 04       	cpc	r15, r1
 aca:	01 05       	cpc	r16, r1
 acc:	11 05       	cpc	r17, r1
 ace:	31 f0       	breq	.+12     	; 0xadc <__clzsi2+0x36>
 ad0:	28 f0       	brcs	.+10     	; 0xadc <__clzsi2+0x36>
 ad2:	88 e0       	ldi	r24, 0x08	; 8
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	a0 e0       	ldi	r26, 0x00	; 0
 ad8:	b0 e0       	ldi	r27, 0x00	; 0
 ada:	17 c0       	rjmp	.+46     	; 0xb0a <__clzsi2+0x64>
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	a0 e0       	ldi	r26, 0x00	; 0
 ae2:	b0 e0       	ldi	r27, 0x00	; 0
 ae4:	12 c0       	rjmp	.+36     	; 0xb0a <__clzsi2+0x64>
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	e8 16       	cp	r14, r24
 aea:	80 e0       	ldi	r24, 0x00	; 0
 aec:	f8 06       	cpc	r15, r24
 aee:	80 e0       	ldi	r24, 0x00	; 0
 af0:	08 07       	cpc	r16, r24
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	18 07       	cpc	r17, r24
 af6:	28 f0       	brcs	.+10     	; 0xb02 <__clzsi2+0x5c>
 af8:	88 e1       	ldi	r24, 0x18	; 24
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	a0 e0       	ldi	r26, 0x00	; 0
 afe:	b0 e0       	ldi	r27, 0x00	; 0
 b00:	04 c0       	rjmp	.+8      	; 0xb0a <__clzsi2+0x64>
 b02:	80 e1       	ldi	r24, 0x10	; 16
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	a0 e0       	ldi	r26, 0x00	; 0
 b08:	b0 e0       	ldi	r27, 0x00	; 0
 b0a:	20 e2       	ldi	r18, 0x20	; 32
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	40 e0       	ldi	r20, 0x00	; 0
 b10:	50 e0       	ldi	r21, 0x00	; 0
 b12:	28 1b       	sub	r18, r24
 b14:	39 0b       	sbc	r19, r25
 b16:	4a 0b       	sbc	r20, r26
 b18:	5b 0b       	sbc	r21, r27
 b1a:	04 c0       	rjmp	.+8      	; 0xb24 <__clzsi2+0x7e>
 b1c:	16 95       	lsr	r17
 b1e:	07 95       	ror	r16
 b20:	f7 94       	ror	r15
 b22:	e7 94       	ror	r14
 b24:	8a 95       	dec	r24
 b26:	d2 f7       	brpl	.-12     	; 0xb1c <__clzsi2+0x76>
 b28:	f7 01       	movw	r30, r14
 b2a:	e8 59       	subi	r30, 0x98	; 152
 b2c:	ff 4f       	sbci	r31, 0xFF	; 255
 b2e:	80 81       	ld	r24, Z
 b30:	28 1b       	sub	r18, r24
 b32:	31 09       	sbc	r19, r1
 b34:	41 09       	sbc	r20, r1
 b36:	51 09       	sbc	r21, r1
 b38:	c9 01       	movw	r24, r18
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	ff 90       	pop	r15
 b40:	ef 90       	pop	r14
 b42:	08 95       	ret

00000b44 <__pack_f>:
 b44:	df 92       	push	r13
 b46:	ef 92       	push	r14
 b48:	ff 92       	push	r15
 b4a:	0f 93       	push	r16
 b4c:	1f 93       	push	r17
 b4e:	fc 01       	movw	r30, r24
 b50:	e4 80       	ldd	r14, Z+4	; 0x04
 b52:	f5 80       	ldd	r15, Z+5	; 0x05
 b54:	06 81       	ldd	r16, Z+6	; 0x06
 b56:	17 81       	ldd	r17, Z+7	; 0x07
 b58:	d1 80       	ldd	r13, Z+1	; 0x01
 b5a:	80 81       	ld	r24, Z
 b5c:	82 30       	cpi	r24, 0x02	; 2
 b5e:	48 f4       	brcc	.+18     	; 0xb72 <__pack_f+0x2e>
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	a0 e1       	ldi	r26, 0x10	; 16
 b66:	b0 e0       	ldi	r27, 0x00	; 0
 b68:	e8 2a       	or	r14, r24
 b6a:	f9 2a       	or	r15, r25
 b6c:	0a 2b       	or	r16, r26
 b6e:	1b 2b       	or	r17, r27
 b70:	a5 c0       	rjmp	.+330    	; 0xcbc <__pack_f+0x178>
 b72:	84 30       	cpi	r24, 0x04	; 4
 b74:	09 f4       	brne	.+2      	; 0xb78 <__pack_f+0x34>
 b76:	9f c0       	rjmp	.+318    	; 0xcb6 <__pack_f+0x172>
 b78:	82 30       	cpi	r24, 0x02	; 2
 b7a:	21 f4       	brne	.+8      	; 0xb84 <__pack_f+0x40>
 b7c:	ee 24       	eor	r14, r14
 b7e:	ff 24       	eor	r15, r15
 b80:	87 01       	movw	r16, r14
 b82:	05 c0       	rjmp	.+10     	; 0xb8e <__pack_f+0x4a>
 b84:	e1 14       	cp	r14, r1
 b86:	f1 04       	cpc	r15, r1
 b88:	01 05       	cpc	r16, r1
 b8a:	11 05       	cpc	r17, r1
 b8c:	19 f4       	brne	.+6      	; 0xb94 <__pack_f+0x50>
 b8e:	e0 e0       	ldi	r30, 0x00	; 0
 b90:	f0 e0       	ldi	r31, 0x00	; 0
 b92:	96 c0       	rjmp	.+300    	; 0xcc0 <__pack_f+0x17c>
 b94:	62 81       	ldd	r22, Z+2	; 0x02
 b96:	73 81       	ldd	r23, Z+3	; 0x03
 b98:	9f ef       	ldi	r25, 0xFF	; 255
 b9a:	62 38       	cpi	r22, 0x82	; 130
 b9c:	79 07       	cpc	r23, r25
 b9e:	0c f0       	brlt	.+2      	; 0xba2 <__pack_f+0x5e>
 ba0:	5b c0       	rjmp	.+182    	; 0xc58 <__pack_f+0x114>
 ba2:	22 e8       	ldi	r18, 0x82	; 130
 ba4:	3f ef       	ldi	r19, 0xFF	; 255
 ba6:	26 1b       	sub	r18, r22
 ba8:	37 0b       	sbc	r19, r23
 baa:	2a 31       	cpi	r18, 0x1A	; 26
 bac:	31 05       	cpc	r19, r1
 bae:	2c f0       	brlt	.+10     	; 0xbba <__pack_f+0x76>
 bb0:	20 e0       	ldi	r18, 0x00	; 0
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	40 e0       	ldi	r20, 0x00	; 0
 bb6:	50 e0       	ldi	r21, 0x00	; 0
 bb8:	2a c0       	rjmp	.+84     	; 0xc0e <__pack_f+0xca>
 bba:	b8 01       	movw	r22, r16
 bbc:	a7 01       	movw	r20, r14
 bbe:	02 2e       	mov	r0, r18
 bc0:	04 c0       	rjmp	.+8      	; 0xbca <__pack_f+0x86>
 bc2:	76 95       	lsr	r23
 bc4:	67 95       	ror	r22
 bc6:	57 95       	ror	r21
 bc8:	47 95       	ror	r20
 bca:	0a 94       	dec	r0
 bcc:	d2 f7       	brpl	.-12     	; 0xbc2 <__pack_f+0x7e>
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	90 e0       	ldi	r25, 0x00	; 0
 bd2:	a0 e0       	ldi	r26, 0x00	; 0
 bd4:	b0 e0       	ldi	r27, 0x00	; 0
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <__pack_f+0x9c>
 bd8:	88 0f       	add	r24, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	aa 1f       	adc	r26, r26
 bde:	bb 1f       	adc	r27, r27
 be0:	2a 95       	dec	r18
 be2:	d2 f7       	brpl	.-12     	; 0xbd8 <__pack_f+0x94>
 be4:	01 97       	sbiw	r24, 0x01	; 1
 be6:	a1 09       	sbc	r26, r1
 be8:	b1 09       	sbc	r27, r1
 bea:	8e 21       	and	r24, r14
 bec:	9f 21       	and	r25, r15
 bee:	a0 23       	and	r26, r16
 bf0:	b1 23       	and	r27, r17
 bf2:	00 97       	sbiw	r24, 0x00	; 0
 bf4:	a1 05       	cpc	r26, r1
 bf6:	b1 05       	cpc	r27, r1
 bf8:	21 f0       	breq	.+8      	; 0xc02 <__pack_f+0xbe>
 bfa:	81 e0       	ldi	r24, 0x01	; 1
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	a0 e0       	ldi	r26, 0x00	; 0
 c00:	b0 e0       	ldi	r27, 0x00	; 0
 c02:	9a 01       	movw	r18, r20
 c04:	ab 01       	movw	r20, r22
 c06:	28 2b       	or	r18, r24
 c08:	39 2b       	or	r19, r25
 c0a:	4a 2b       	or	r20, r26
 c0c:	5b 2b       	or	r21, r27
 c0e:	da 01       	movw	r26, r20
 c10:	c9 01       	movw	r24, r18
 c12:	8f 77       	andi	r24, 0x7F	; 127
 c14:	90 70       	andi	r25, 0x00	; 0
 c16:	a0 70       	andi	r26, 0x00	; 0
 c18:	b0 70       	andi	r27, 0x00	; 0
 c1a:	80 34       	cpi	r24, 0x40	; 64
 c1c:	91 05       	cpc	r25, r1
 c1e:	a1 05       	cpc	r26, r1
 c20:	b1 05       	cpc	r27, r1
 c22:	39 f4       	brne	.+14     	; 0xc32 <__pack_f+0xee>
 c24:	27 ff       	sbrs	r18, 7
 c26:	09 c0       	rjmp	.+18     	; 0xc3a <__pack_f+0xf6>
 c28:	20 5c       	subi	r18, 0xC0	; 192
 c2a:	3f 4f       	sbci	r19, 0xFF	; 255
 c2c:	4f 4f       	sbci	r20, 0xFF	; 255
 c2e:	5f 4f       	sbci	r21, 0xFF	; 255
 c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0xf6>
 c32:	21 5c       	subi	r18, 0xC1	; 193
 c34:	3f 4f       	sbci	r19, 0xFF	; 255
 c36:	4f 4f       	sbci	r20, 0xFF	; 255
 c38:	5f 4f       	sbci	r21, 0xFF	; 255
 c3a:	e0 e0       	ldi	r30, 0x00	; 0
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	20 30       	cpi	r18, 0x00	; 0
 c40:	a0 e0       	ldi	r26, 0x00	; 0
 c42:	3a 07       	cpc	r19, r26
 c44:	a0 e0       	ldi	r26, 0x00	; 0
 c46:	4a 07       	cpc	r20, r26
 c48:	a0 e4       	ldi	r26, 0x40	; 64
 c4a:	5a 07       	cpc	r21, r26
 c4c:	10 f0       	brcs	.+4      	; 0xc52 <__pack_f+0x10e>
 c4e:	e1 e0       	ldi	r30, 0x01	; 1
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	79 01       	movw	r14, r18
 c54:	8a 01       	movw	r16, r20
 c56:	27 c0       	rjmp	.+78     	; 0xca6 <__pack_f+0x162>
 c58:	60 38       	cpi	r22, 0x80	; 128
 c5a:	71 05       	cpc	r23, r1
 c5c:	64 f5       	brge	.+88     	; 0xcb6 <__pack_f+0x172>
 c5e:	fb 01       	movw	r30, r22
 c60:	e1 58       	subi	r30, 0x81	; 129
 c62:	ff 4f       	sbci	r31, 0xFF	; 255
 c64:	d8 01       	movw	r26, r16
 c66:	c7 01       	movw	r24, r14
 c68:	8f 77       	andi	r24, 0x7F	; 127
 c6a:	90 70       	andi	r25, 0x00	; 0
 c6c:	a0 70       	andi	r26, 0x00	; 0
 c6e:	b0 70       	andi	r27, 0x00	; 0
 c70:	80 34       	cpi	r24, 0x40	; 64
 c72:	91 05       	cpc	r25, r1
 c74:	a1 05       	cpc	r26, r1
 c76:	b1 05       	cpc	r27, r1
 c78:	39 f4       	brne	.+14     	; 0xc88 <__pack_f+0x144>
 c7a:	e7 fe       	sbrs	r14, 7
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <__pack_f+0x154>
 c7e:	80 e4       	ldi	r24, 0x40	; 64
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	a0 e0       	ldi	r26, 0x00	; 0
 c84:	b0 e0       	ldi	r27, 0x00	; 0
 c86:	04 c0       	rjmp	.+8      	; 0xc90 <__pack_f+0x14c>
 c88:	8f e3       	ldi	r24, 0x3F	; 63
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	a0 e0       	ldi	r26, 0x00	; 0
 c8e:	b0 e0       	ldi	r27, 0x00	; 0
 c90:	e8 0e       	add	r14, r24
 c92:	f9 1e       	adc	r15, r25
 c94:	0a 1f       	adc	r16, r26
 c96:	1b 1f       	adc	r17, r27
 c98:	17 ff       	sbrs	r17, 7
 c9a:	05 c0       	rjmp	.+10     	; 0xca6 <__pack_f+0x162>
 c9c:	16 95       	lsr	r17
 c9e:	07 95       	ror	r16
 ca0:	f7 94       	ror	r15
 ca2:	e7 94       	ror	r14
 ca4:	31 96       	adiw	r30, 0x01	; 1
 ca6:	87 e0       	ldi	r24, 0x07	; 7
 ca8:	16 95       	lsr	r17
 caa:	07 95       	ror	r16
 cac:	f7 94       	ror	r15
 cae:	e7 94       	ror	r14
 cb0:	8a 95       	dec	r24
 cb2:	d1 f7       	brne	.-12     	; 0xca8 <__pack_f+0x164>
 cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <__pack_f+0x17c>
 cb6:	ee 24       	eor	r14, r14
 cb8:	ff 24       	eor	r15, r15
 cba:	87 01       	movw	r16, r14
 cbc:	ef ef       	ldi	r30, 0xFF	; 255
 cbe:	f0 e0       	ldi	r31, 0x00	; 0
 cc0:	6e 2f       	mov	r22, r30
 cc2:	67 95       	ror	r22
 cc4:	66 27       	eor	r22, r22
 cc6:	67 95       	ror	r22
 cc8:	90 2f       	mov	r25, r16
 cca:	9f 77       	andi	r25, 0x7F	; 127
 ccc:	d7 94       	ror	r13
 cce:	dd 24       	eor	r13, r13
 cd0:	d7 94       	ror	r13
 cd2:	8e 2f       	mov	r24, r30
 cd4:	86 95       	lsr	r24
 cd6:	49 2f       	mov	r20, r25
 cd8:	46 2b       	or	r20, r22
 cda:	58 2f       	mov	r21, r24
 cdc:	5d 29       	or	r21, r13
 cde:	b7 01       	movw	r22, r14
 ce0:	ca 01       	movw	r24, r20
 ce2:	1f 91       	pop	r17
 ce4:	0f 91       	pop	r16
 ce6:	ff 90       	pop	r15
 ce8:	ef 90       	pop	r14
 cea:	df 90       	pop	r13
 cec:	08 95       	ret

00000cee <__unpack_f>:
 cee:	fc 01       	movw	r30, r24
 cf0:	db 01       	movw	r26, r22
 cf2:	40 81       	ld	r20, Z
 cf4:	51 81       	ldd	r21, Z+1	; 0x01
 cf6:	22 81       	ldd	r18, Z+2	; 0x02
 cf8:	62 2f       	mov	r22, r18
 cfa:	6f 77       	andi	r22, 0x7F	; 127
 cfc:	70 e0       	ldi	r23, 0x00	; 0
 cfe:	22 1f       	adc	r18, r18
 d00:	22 27       	eor	r18, r18
 d02:	22 1f       	adc	r18, r18
 d04:	93 81       	ldd	r25, Z+3	; 0x03
 d06:	89 2f       	mov	r24, r25
 d08:	88 0f       	add	r24, r24
 d0a:	82 2b       	or	r24, r18
 d0c:	28 2f       	mov	r18, r24
 d0e:	30 e0       	ldi	r19, 0x00	; 0
 d10:	99 1f       	adc	r25, r25
 d12:	99 27       	eor	r25, r25
 d14:	99 1f       	adc	r25, r25
 d16:	11 96       	adiw	r26, 0x01	; 1
 d18:	9c 93       	st	X, r25
 d1a:	11 97       	sbiw	r26, 0x01	; 1
 d1c:	21 15       	cp	r18, r1
 d1e:	31 05       	cpc	r19, r1
 d20:	a9 f5       	brne	.+106    	; 0xd8c <__unpack_f+0x9e>
 d22:	41 15       	cp	r20, r1
 d24:	51 05       	cpc	r21, r1
 d26:	61 05       	cpc	r22, r1
 d28:	71 05       	cpc	r23, r1
 d2a:	11 f4       	brne	.+4      	; 0xd30 <__unpack_f+0x42>
 d2c:	82 e0       	ldi	r24, 0x02	; 2
 d2e:	37 c0       	rjmp	.+110    	; 0xd9e <__unpack_f+0xb0>
 d30:	82 e8       	ldi	r24, 0x82	; 130
 d32:	9f ef       	ldi	r25, 0xFF	; 255
 d34:	13 96       	adiw	r26, 0x03	; 3
 d36:	9c 93       	st	X, r25
 d38:	8e 93       	st	-X, r24
 d3a:	12 97       	sbiw	r26, 0x02	; 2
 d3c:	9a 01       	movw	r18, r20
 d3e:	ab 01       	movw	r20, r22
 d40:	67 e0       	ldi	r22, 0x07	; 7
 d42:	22 0f       	add	r18, r18
 d44:	33 1f       	adc	r19, r19
 d46:	44 1f       	adc	r20, r20
 d48:	55 1f       	adc	r21, r21
 d4a:	6a 95       	dec	r22
 d4c:	d1 f7       	brne	.-12     	; 0xd42 <__unpack_f+0x54>
 d4e:	83 e0       	ldi	r24, 0x03	; 3
 d50:	8c 93       	st	X, r24
 d52:	0d c0       	rjmp	.+26     	; 0xd6e <__unpack_f+0x80>
 d54:	22 0f       	add	r18, r18
 d56:	33 1f       	adc	r19, r19
 d58:	44 1f       	adc	r20, r20
 d5a:	55 1f       	adc	r21, r21
 d5c:	12 96       	adiw	r26, 0x02	; 2
 d5e:	8d 91       	ld	r24, X+
 d60:	9c 91       	ld	r25, X
 d62:	13 97       	sbiw	r26, 0x03	; 3
 d64:	01 97       	sbiw	r24, 0x01	; 1
 d66:	13 96       	adiw	r26, 0x03	; 3
 d68:	9c 93       	st	X, r25
 d6a:	8e 93       	st	-X, r24
 d6c:	12 97       	sbiw	r26, 0x02	; 2
 d6e:	20 30       	cpi	r18, 0x00	; 0
 d70:	80 e0       	ldi	r24, 0x00	; 0
 d72:	38 07       	cpc	r19, r24
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	48 07       	cpc	r20, r24
 d78:	80 e4       	ldi	r24, 0x40	; 64
 d7a:	58 07       	cpc	r21, r24
 d7c:	58 f3       	brcs	.-42     	; 0xd54 <__unpack_f+0x66>
 d7e:	14 96       	adiw	r26, 0x04	; 4
 d80:	2d 93       	st	X+, r18
 d82:	3d 93       	st	X+, r19
 d84:	4d 93       	st	X+, r20
 d86:	5c 93       	st	X, r21
 d88:	17 97       	sbiw	r26, 0x07	; 7
 d8a:	08 95       	ret
 d8c:	2f 3f       	cpi	r18, 0xFF	; 255
 d8e:	31 05       	cpc	r19, r1
 d90:	79 f4       	brne	.+30     	; 0xdb0 <__unpack_f+0xc2>
 d92:	41 15       	cp	r20, r1
 d94:	51 05       	cpc	r21, r1
 d96:	61 05       	cpc	r22, r1
 d98:	71 05       	cpc	r23, r1
 d9a:	19 f4       	brne	.+6      	; 0xda2 <__unpack_f+0xb4>
 d9c:	84 e0       	ldi	r24, 0x04	; 4
 d9e:	8c 93       	st	X, r24
 da0:	08 95       	ret
 da2:	64 ff       	sbrs	r22, 4
 da4:	03 c0       	rjmp	.+6      	; 0xdac <__unpack_f+0xbe>
 da6:	81 e0       	ldi	r24, 0x01	; 1
 da8:	8c 93       	st	X, r24
 daa:	12 c0       	rjmp	.+36     	; 0xdd0 <__unpack_f+0xe2>
 dac:	1c 92       	st	X, r1
 dae:	10 c0       	rjmp	.+32     	; 0xdd0 <__unpack_f+0xe2>
 db0:	2f 57       	subi	r18, 0x7F	; 127
 db2:	30 40       	sbci	r19, 0x00	; 0
 db4:	13 96       	adiw	r26, 0x03	; 3
 db6:	3c 93       	st	X, r19
 db8:	2e 93       	st	-X, r18
 dba:	12 97       	sbiw	r26, 0x02	; 2
 dbc:	83 e0       	ldi	r24, 0x03	; 3
 dbe:	8c 93       	st	X, r24
 dc0:	87 e0       	ldi	r24, 0x07	; 7
 dc2:	44 0f       	add	r20, r20
 dc4:	55 1f       	adc	r21, r21
 dc6:	66 1f       	adc	r22, r22
 dc8:	77 1f       	adc	r23, r23
 dca:	8a 95       	dec	r24
 dcc:	d1 f7       	brne	.-12     	; 0xdc2 <__unpack_f+0xd4>
 dce:	70 64       	ori	r23, 0x40	; 64
 dd0:	14 96       	adiw	r26, 0x04	; 4
 dd2:	4d 93       	st	X+, r20
 dd4:	5d 93       	st	X+, r21
 dd6:	6d 93       	st	X+, r22
 dd8:	7c 93       	st	X, r23
 dda:	17 97       	sbiw	r26, 0x07	; 7
 ddc:	08 95       	ret

00000dde <__fpcmp_parts_f>:
 dde:	1f 93       	push	r17
 de0:	dc 01       	movw	r26, r24
 de2:	fb 01       	movw	r30, r22
 de4:	9c 91       	ld	r25, X
 de6:	92 30       	cpi	r25, 0x02	; 2
 de8:	08 f4       	brcc	.+2      	; 0xdec <__fpcmp_parts_f+0xe>
 dea:	47 c0       	rjmp	.+142    	; 0xe7a <__fpcmp_parts_f+0x9c>
 dec:	80 81       	ld	r24, Z
 dee:	82 30       	cpi	r24, 0x02	; 2
 df0:	08 f4       	brcc	.+2      	; 0xdf4 <__fpcmp_parts_f+0x16>
 df2:	43 c0       	rjmp	.+134    	; 0xe7a <__fpcmp_parts_f+0x9c>
 df4:	94 30       	cpi	r25, 0x04	; 4
 df6:	51 f4       	brne	.+20     	; 0xe0c <__fpcmp_parts_f+0x2e>
 df8:	11 96       	adiw	r26, 0x01	; 1
 dfa:	1c 91       	ld	r17, X
 dfc:	84 30       	cpi	r24, 0x04	; 4
 dfe:	99 f5       	brne	.+102    	; 0xe66 <__fpcmp_parts_f+0x88>
 e00:	81 81       	ldd	r24, Z+1	; 0x01
 e02:	68 2f       	mov	r22, r24
 e04:	70 e0       	ldi	r23, 0x00	; 0
 e06:	61 1b       	sub	r22, r17
 e08:	71 09       	sbc	r23, r1
 e0a:	3f c0       	rjmp	.+126    	; 0xe8a <__fpcmp_parts_f+0xac>
 e0c:	84 30       	cpi	r24, 0x04	; 4
 e0e:	21 f0       	breq	.+8      	; 0xe18 <__fpcmp_parts_f+0x3a>
 e10:	92 30       	cpi	r25, 0x02	; 2
 e12:	31 f4       	brne	.+12     	; 0xe20 <__fpcmp_parts_f+0x42>
 e14:	82 30       	cpi	r24, 0x02	; 2
 e16:	b9 f1       	breq	.+110    	; 0xe86 <__fpcmp_parts_f+0xa8>
 e18:	81 81       	ldd	r24, Z+1	; 0x01
 e1a:	88 23       	and	r24, r24
 e1c:	89 f1       	breq	.+98     	; 0xe80 <__fpcmp_parts_f+0xa2>
 e1e:	2d c0       	rjmp	.+90     	; 0xe7a <__fpcmp_parts_f+0x9c>
 e20:	11 96       	adiw	r26, 0x01	; 1
 e22:	1c 91       	ld	r17, X
 e24:	11 97       	sbiw	r26, 0x01	; 1
 e26:	82 30       	cpi	r24, 0x02	; 2
 e28:	f1 f0       	breq	.+60     	; 0xe66 <__fpcmp_parts_f+0x88>
 e2a:	81 81       	ldd	r24, Z+1	; 0x01
 e2c:	18 17       	cp	r17, r24
 e2e:	d9 f4       	brne	.+54     	; 0xe66 <__fpcmp_parts_f+0x88>
 e30:	12 96       	adiw	r26, 0x02	; 2
 e32:	2d 91       	ld	r18, X+
 e34:	3c 91       	ld	r19, X
 e36:	13 97       	sbiw	r26, 0x03	; 3
 e38:	82 81       	ldd	r24, Z+2	; 0x02
 e3a:	93 81       	ldd	r25, Z+3	; 0x03
 e3c:	82 17       	cp	r24, r18
 e3e:	93 07       	cpc	r25, r19
 e40:	94 f0       	brlt	.+36     	; 0xe66 <__fpcmp_parts_f+0x88>
 e42:	28 17       	cp	r18, r24
 e44:	39 07       	cpc	r19, r25
 e46:	bc f0       	brlt	.+46     	; 0xe76 <__fpcmp_parts_f+0x98>
 e48:	14 96       	adiw	r26, 0x04	; 4
 e4a:	8d 91       	ld	r24, X+
 e4c:	9d 91       	ld	r25, X+
 e4e:	0d 90       	ld	r0, X+
 e50:	bc 91       	ld	r27, X
 e52:	a0 2d       	mov	r26, r0
 e54:	24 81       	ldd	r18, Z+4	; 0x04
 e56:	35 81       	ldd	r19, Z+5	; 0x05
 e58:	46 81       	ldd	r20, Z+6	; 0x06
 e5a:	57 81       	ldd	r21, Z+7	; 0x07
 e5c:	28 17       	cp	r18, r24
 e5e:	39 07       	cpc	r19, r25
 e60:	4a 07       	cpc	r20, r26
 e62:	5b 07       	cpc	r21, r27
 e64:	18 f4       	brcc	.+6      	; 0xe6c <__fpcmp_parts_f+0x8e>
 e66:	11 23       	and	r17, r17
 e68:	41 f0       	breq	.+16     	; 0xe7a <__fpcmp_parts_f+0x9c>
 e6a:	0a c0       	rjmp	.+20     	; 0xe80 <__fpcmp_parts_f+0xa2>
 e6c:	82 17       	cp	r24, r18
 e6e:	93 07       	cpc	r25, r19
 e70:	a4 07       	cpc	r26, r20
 e72:	b5 07       	cpc	r27, r21
 e74:	40 f4       	brcc	.+16     	; 0xe86 <__fpcmp_parts_f+0xa8>
 e76:	11 23       	and	r17, r17
 e78:	19 f0       	breq	.+6      	; 0xe80 <__fpcmp_parts_f+0xa2>
 e7a:	61 e0       	ldi	r22, 0x01	; 1
 e7c:	70 e0       	ldi	r23, 0x00	; 0
 e7e:	05 c0       	rjmp	.+10     	; 0xe8a <__fpcmp_parts_f+0xac>
 e80:	6f ef       	ldi	r22, 0xFF	; 255
 e82:	7f ef       	ldi	r23, 0xFF	; 255
 e84:	02 c0       	rjmp	.+4      	; 0xe8a <__fpcmp_parts_f+0xac>
 e86:	60 e0       	ldi	r22, 0x00	; 0
 e88:	70 e0       	ldi	r23, 0x00	; 0
 e8a:	cb 01       	movw	r24, r22
 e8c:	1f 91       	pop	r17
 e8e:	08 95       	ret

00000e90 <__prologue_saves__>:
 e90:	2f 92       	push	r2
 e92:	3f 92       	push	r3
 e94:	4f 92       	push	r4
 e96:	5f 92       	push	r5
 e98:	6f 92       	push	r6
 e9a:	7f 92       	push	r7
 e9c:	8f 92       	push	r8
 e9e:	9f 92       	push	r9
 ea0:	af 92       	push	r10
 ea2:	bf 92       	push	r11
 ea4:	cf 92       	push	r12
 ea6:	df 92       	push	r13
 ea8:	ef 92       	push	r14
 eaa:	ff 92       	push	r15
 eac:	0f 93       	push	r16
 eae:	1f 93       	push	r17
 eb0:	cf 93       	push	r28
 eb2:	df 93       	push	r29
 eb4:	cd b7       	in	r28, 0x3d	; 61
 eb6:	de b7       	in	r29, 0x3e	; 62
 eb8:	ca 1b       	sub	r28, r26
 eba:	db 0b       	sbc	r29, r27
 ebc:	0f b6       	in	r0, 0x3f	; 63
 ebe:	f8 94       	cli
 ec0:	de bf       	out	0x3e, r29	; 62
 ec2:	0f be       	out	0x3f, r0	; 63
 ec4:	cd bf       	out	0x3d, r28	; 61
 ec6:	09 94       	ijmp

00000ec8 <__epilogue_restores__>:
 ec8:	2a 88       	ldd	r2, Y+18	; 0x12
 eca:	39 88       	ldd	r3, Y+17	; 0x11
 ecc:	48 88       	ldd	r4, Y+16	; 0x10
 ece:	5f 84       	ldd	r5, Y+15	; 0x0f
 ed0:	6e 84       	ldd	r6, Y+14	; 0x0e
 ed2:	7d 84       	ldd	r7, Y+13	; 0x0d
 ed4:	8c 84       	ldd	r8, Y+12	; 0x0c
 ed6:	9b 84       	ldd	r9, Y+11	; 0x0b
 ed8:	aa 84       	ldd	r10, Y+10	; 0x0a
 eda:	b9 84       	ldd	r11, Y+9	; 0x09
 edc:	c8 84       	ldd	r12, Y+8	; 0x08
 ede:	df 80       	ldd	r13, Y+7	; 0x07
 ee0:	ee 80       	ldd	r14, Y+6	; 0x06
 ee2:	fd 80       	ldd	r15, Y+5	; 0x05
 ee4:	0c 81       	ldd	r16, Y+4	; 0x04
 ee6:	1b 81       	ldd	r17, Y+3	; 0x03
 ee8:	aa 81       	ldd	r26, Y+2	; 0x02
 eea:	b9 81       	ldd	r27, Y+1	; 0x01
 eec:	ce 0f       	add	r28, r30
 eee:	d1 1d       	adc	r29, r1
 ef0:	0f b6       	in	r0, 0x3f	; 63
 ef2:	f8 94       	cli
 ef4:	de bf       	out	0x3e, r29	; 62
 ef6:	0f be       	out	0x3f, r0	; 63
 ef8:	cd bf       	out	0x3d, r28	; 61
 efa:	ed 01       	movw	r28, r26
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
