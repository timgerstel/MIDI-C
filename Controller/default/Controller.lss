
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001318  000013ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800168  00800168  000014b4  2**0
                  ALLOC
  3 .debug_aranges 000001a0  00000000  00000000  000014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d3  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002bab  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001401  00000000  00000000  000045d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b38  00000000  00000000  000059d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  0000750c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000554  00000000  00000000  0000783c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c45  00000000  00000000  00007d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000089d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_8>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 e1       	ldi	r30, 0x18	; 24
      78:	f3 e1       	ldi	r31, 0x13	; 19
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <main>
      8a:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <modify>:
}


void modify(){
	//analogLEDTest();
}
      92:	08 95       	ret

00000094 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      94:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      96:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      98:	88 e1       	ldi	r24, 0x18	; 24
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
}
      a0:	08 95       	ret

000000a2 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a2:	8f ef       	ldi	r24, 0xFF	; 255
      a4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a6:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      a8:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      aa:	87 e0       	ldi	r24, 0x07	; 7
      ac:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      ae:	11 ba       	out	0x11, r1	; 17
}
      b0:	08 95       	ret

000000b2 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b2:	87 e4       	ldi	r24, 0x47	; 71
      b4:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b6:	87 e8       	ldi	r24, 0x87	; 135
      b8:	86 b9       	out	0x06, r24	; 6
}
      ba:	08 95       	ret

000000bc <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
      bc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
      c2:	88 e0       	ldi	r24, 0x08	; 8
      c4:	89 bf       	out	0x39, r24	; 57
	sei();
      c6:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
      c8:	80 ea       	ldi	r24, 0xA0	; 160
      ca:	97 e0       	ldi	r25, 0x07	; 7
      cc:	99 bd       	out	0x29, r25	; 41
      ce:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
      d0:	1d bc       	out	0x2d, r1	; 45
      d2:	1c bc       	out	0x2c, r1	; 44

}
      d4:	08 95       	ret

000000d6 <ledOFF>:
}



void ledOFF(){
	PORTB = 0x00;
      d6:	18 ba       	out	0x18, r1	; 24
}
      d8:	08 95       	ret

000000da <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
      da:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
      dc:	34 9b       	sbis	0x06, 4	; 6
      de:	fe cf       	rjmp	.-4      	; 0xdc <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
      e0:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
      e2:	24 b1       	in	r18, 0x04	; 4
      e4:	35 b1       	in	r19, 0x05	; 5
}
      e6:	c9 01       	movw	r24, r18
      e8:	08 95       	ret

000000ea <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
      ea:	0e 94 6d 00 	call	0xda	; 0xda <ReadADC>
      ee:	9c 01       	movw	r18, r24
      f0:	90 93 77 01 	sts	0x0177, r25
      f4:	80 93 76 01 	sts	0x0176, r24
		if (adc_value > 30){
      f8:	8f 31       	cpi	r24, 0x1F	; 31
      fa:	91 05       	cpc	r25, r1
      fc:	28 f1       	brcs	.+74     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     102:	2d 33       	cpi	r18, 0x3D	; 61
     104:	31 05       	cpc	r19, r1
     106:	00 f1       	brcs	.+64     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     10c:	2b 35       	cpi	r18, 0x5B	; 91
     10e:	31 05       	cpc	r19, r1
     110:	d8 f0       	brcs	.+54     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     112:	84 e0       	ldi	r24, 0x04	; 4
     114:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     116:	29 37       	cpi	r18, 0x79	; 121
     118:	31 05       	cpc	r19, r1
     11a:	b0 f0       	brcs	.+44     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     11c:	88 e0       	ldi	r24, 0x08	; 8
     11e:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     120:	27 39       	cpi	r18, 0x97	; 151
     122:	31 05       	cpc	r19, r1
     124:	88 f0       	brcs	.+34     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     126:	80 e1       	ldi	r24, 0x10	; 16
     128:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     12a:	25 3b       	cpi	r18, 0xB5	; 181
     12c:	31 05       	cpc	r19, r1
     12e:	60 f0       	brcs	.+24     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     130:	80 e2       	ldi	r24, 0x20	; 32
     132:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     134:	23 3d       	cpi	r18, 0xD3	; 211
     136:	31 05       	cpc	r19, r1
     138:	38 f0       	brcs	.+14     	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     13a:	80 e4       	ldi	r24, 0x40	; 64
     13c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     13e:	21 3f       	cpi	r18, 0xF1	; 241
     140:	31 05       	cpc	r19, r1
     142:	10 f0       	brcs	.+4      	; 0x148 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     144:	80 e8       	ldi	r24, 0x80	; 128
     146:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     148:	20 3f       	cpi	r18, 0xF0	; 240
     14a:	31 05       	cpc	r19, r1
     14c:	10 f0       	brcs	.+4      	; 0x152 <analogLEDTest+0x68>
			PORTB = 0xFF;
     14e:	8f ef       	ldi	r24, 0xFF	; 255
     150:	88 bb       	out	0x18, r24	; 24
     152:	08 95       	ret

00000154 <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
     154:	5d 9b       	sbis	0x0b, 5	; 11
     156:	fe cf       	rjmp	.-4      	; 0x154 <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     158:	8c b9       	out	0x0c, r24	; 12
}
     15a:	08 95       	ret

0000015c <midiTransitTest>:
	}	

}

void midiTransitTest(){
	midi_Transmit(144);
     15c:	80 e9       	ldi	r24, 0x90	; 144
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(67);
     164:	83 e4       	ldi	r24, 0x43	; 67
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     16c:	84 e6       	ldi	r24, 0x64	; 100
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     174:	88 e8       	ldi	r24, 0x88	; 136
     176:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     178:	24 e6       	ldi	r18, 0x64	; 100
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	f9 01       	movw	r30, r18
     17e:	31 97       	sbiw	r30, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     184:	d9 f7       	brne	.-10     	; 0x17c <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
     186:	80 e8       	ldi	r24, 0x80	; 128
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(67);
     18e:	83 e4       	ldi	r24, 0x43	; 67
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     196:	84 e6       	ldi	r24, 0x64	; 100
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     19e:	88 e8       	ldi	r24, 0x88	; 136
     1a0:	93 e1       	ldi	r25, 0x13	; 19
     1a2:	24 e6       	ldi	r18, 0x64	; 100
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	31 97       	sbiw	r30, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
     1b0:	80 e9       	ldi	r24, 0x90	; 144
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(98);
     1b8:	82 e6       	ldi	r24, 0x62	; 98
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     1c0:	84 e6       	ldi	r24, 0x64	; 100
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     1c8:	88 e8       	ldi	r24, 0x88	; 136
     1ca:	93 e1       	ldi	r25, 0x13	; 19
     1cc:	24 e6       	ldi	r18, 0x64	; 100
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	f9 01       	movw	r30, r18
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1d8:	d9 f7       	brne	.-10     	; 0x1d0 <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
     1da:	80 e8       	ldi	r24, 0x80	; 128
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(98);
     1e2:	82 e6       	ldi	r24, 0x62	; 98
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     1ea:	84 e6       	ldi	r24, 0x64	; 100
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     1f2:	88 e8       	ldi	r24, 0x88	; 136
     1f4:	93 e1       	ldi	r25, 0x13	; 19
     1f6:	24 e6       	ldi	r18, 0x64	; 100
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	f9 01       	movw	r30, r18
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     200:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     202:	d9 f7       	brne	.-10     	; 0x1fa <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
     204:	80 e9       	ldi	r24, 0x90	; 144
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(60);
     20c:	8c e3       	ldi	r24, 0x3C	; 60
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     214:	84 e6       	ldi	r24, 0x64	; 100
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     21c:	88 e8       	ldi	r24, 0x88	; 136
     21e:	93 e1       	ldi	r25, 0x13	; 19
     220:	24 e6       	ldi	r18, 0x64	; 100
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	f9 01       	movw	r30, r18
     226:	31 97       	sbiw	r30, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     22a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     22c:	d9 f7       	brne	.-10     	; 0x224 <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
     22e:	80 e8       	ldi	r24, 0x80	; 128
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(60);
     236:	8c e3       	ldi	r24, 0x3C	; 60
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
	midi_Transmit(100);
     23e:	84 e6       	ldi	r24, 0x64	; 100
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
     246:	88 e8       	ldi	r24, 0x88	; 136
     248:	93 e1       	ldi	r25, 0x13	; 19
     24a:	24 e6       	ldi	r18, 0x64	; 100
     24c:	30 e0       	ldi	r19, 0x00	; 0
     24e:	f9 01       	movw	r30, r18
     250:	31 97       	sbiw	r30, 0x01	; 1
     252:	f1 f7       	brne	.-4      	; 0x250 <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     254:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     256:	d9 f7       	brne	.-10     	; 0x24e <midiTransitTest+0xf2>
	_delay_ms(500);

}
     258:	08 95       	ret

0000025a <playSong>:

/***** Create Methods *****/



void playSong(){
     25a:	8f 92       	push	r8
     25c:	9f 92       	push	r9
     25e:	af 92       	push	r10
     260:	bf 92       	push	r11
     262:	cf 92       	push	r12
     264:	df 92       	push	r13
     266:	ef 92       	push	r14
     268:	ff 92       	push	r15
     26a:	0f 93       	push	r16
     26c:	1f 93       	push	r17
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
	eeprom_address= 0x00;
     272:	10 92 73 01 	sts	0x0173, r1
     276:	10 92 72 01 	sts	0x0172, r1
     27a:	84 e6       	ldi	r24, 0x64	; 100
     27c:	88 2e       	mov	r8, r24
     27e:	91 2c       	mov	r9, r1
     280:	63 c0       	rjmp	.+198    	; 0x348 <playSong+0xee>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     282:	e1 99       	sbic	0x1c, 1	; 28
     284:	fe cf       	rjmp	.-4      	; 0x282 <playSong+0x28>
	/* Set up address register */
	EEAR = uiAddress;
     286:	3f bb       	out	0x1f, r19	; 31
     288:	2e bb       	out	0x1e, r18	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     28a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     28c:	8d b3       	in	r24, 0x1d	; 29


void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
     28e:	88 bb       	out	0x18, r24	; 24
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     290:	e1 99       	sbic	0x1c, 1	; 28
     292:	fe cf       	rjmp	.-4      	; 0x290 <playSong+0x36>
	/* Set up address register */
	EEAR = uiAddress;
     294:	3f bb       	out	0x1f, r19	; 31
     296:	2e bb       	out	0x1e, r18	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     298:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     29a:	8d b3       	in	r24, 0x1d	; 29

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 aa 00 	call	0x154	; 0x154 <midi_Transmit>
		eeprom_address++;
     2a2:	c0 91 72 01 	lds	r28, 0x0172
     2a6:	d0 91 73 01 	lds	r29, 0x0173
     2aa:	21 96       	adiw	r28, 0x01	; 1
     2ac:	d0 93 73 01 	sts	0x0173, r29
     2b0:	c0 93 72 01 	sts	0x0172, r28
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     2b4:	e1 99       	sbic	0x1c, 1	; 28
     2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <playSong+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     2b8:	df bb       	out	0x1f, r29	; 31
     2ba:	ce bb       	out	0x1e, r28	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     2bc:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     2be:	6d b3       	in	r22, 0x1d	; 29
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
     2c0:	70 e0       	ldi	r23, 0x00	; 0
     2c2:	80 e0       	ldi	r24, 0x00	; 0
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	0e 94 e5 06 	call	0xdca	; 0xdca <__floatunsisf>
     2ca:	5b 01       	movw	r10, r22
     2cc:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	4a e7       	ldi	r20, 0x7A	; 122
     2d4:	54 e4       	ldi	r21, 0x44	; 68
     2d6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__mulsf3>
     2da:	7b 01       	movw	r14, r22
     2dc:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e8       	ldi	r20, 0x80	; 128
     2e4:	5f e3       	ldi	r21, 0x3F	; 63
     2e6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <__ltsf2>
     2ea:	88 23       	and	r24, r24
     2ec:	1c f4       	brge	.+6      	; 0x2f4 <playSong+0x9a>
     2ee:	61 e0       	ldi	r22, 0x01	; 1
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	22 c0       	rjmp	.+68     	; 0x338 <playSong+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
     2f4:	c8 01       	movw	r24, r16
     2f6:	b7 01       	movw	r22, r14
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	3f ef       	ldi	r19, 0xFF	; 255
     2fc:	4f e7       	ldi	r20, 0x7F	; 127
     2fe:	57 e4       	ldi	r21, 0x47	; 71
     300:	0e 94 01 06 	call	0xc02	; 0xc02 <__gtsf2>
     304:	18 16       	cp	r1, r24
     306:	a4 f4       	brge	.+40     	; 0x330 <playSong+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     308:	c6 01       	movw	r24, r12
     30a:	b5 01       	movw	r22, r10
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e2       	ldi	r20, 0x20	; 32
     312:	51 e4       	ldi	r21, 0x41	; 65
     314:	0e 94 07 05 	call	0xa0e	; 0xa0e <__mulsf3>
     318:	0e 94 31 03 	call	0x662	; 0x662 <__fixunssfsi>
     31c:	05 c0       	rjmp	.+10     	; 0x328 <playSong+0xce>
     31e:	c4 01       	movw	r24, r8
     320:	01 97       	sbiw	r24, 0x01	; 1
     322:	f1 f7       	brne	.-4      	; 0x320 <playSong+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     324:	61 50       	subi	r22, 0x01	; 1
     326:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     328:	61 15       	cp	r22, r1
     32a:	71 05       	cpc	r23, r1
     32c:	c1 f7       	brne	.-16     	; 0x31e <playSong+0xc4>
     32e:	07 c0       	rjmp	.+14     	; 0x33e <playSong+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     330:	c8 01       	movw	r24, r16
     332:	b7 01       	movw	r22, r14
     334:	0e 94 31 03 	call	0x662	; 0x662 <__fixunssfsi>
     338:	cb 01       	movw	r24, r22
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	f1 f7       	brne	.-4      	; 0x33a <playSong+0xe0>
		eeprom_address++;
     33e:	21 96       	adiw	r28, 0x01	; 1
     340:	d0 93 73 01 	sts	0x0173, r29
     344:	c0 93 72 01 	sts	0x0172, r28



void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
     348:	20 91 72 01 	lds	r18, 0x0172
     34c:	30 91 73 01 	lds	r19, 0x0173
     350:	80 91 74 01 	lds	r24, 0x0174
     354:	90 91 75 01 	lds	r25, 0x0175
     358:	28 17       	cp	r18, r24
     35a:	39 07       	cpc	r19, r25
     35c:	08 f4       	brcc	.+2      	; 0x360 <playSong+0x106>
     35e:	91 cf       	rjmp	.-222    	; 0x282 <playSong+0x28>
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
		eeprom_address++;
	}
	
}
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	cf 90       	pop	r12
     370:	bf 90       	pop	r11
     372:	af 90       	pop	r10
     374:	9f 90       	pop	r9
     376:	8f 90       	pop	r8
     378:	08 95       	ret

0000037a <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     37a:	5f 9b       	sbis	0x0b, 7	; 11
     37c:	fe cf       	rjmp	.-4      	; 0x37a <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     37e:	8c b1       	in	r24, 0x0c	; 12
}
     380:	08 95       	ret

00000382 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     382:	01 c0       	rjmp	.+2      	; 0x386 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     384:	8c b1       	in	r24, 0x0c	; 12
     386:	5f 99       	sbic	0x0b, 7	; 11
     388:	fd cf       	rjmp	.-6      	; 0x384 <midi_Flush+0x2>
}
     38a:	08 95       	ret

0000038c <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     38c:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     38e:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     390:	08 95       	ret

00000392 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     392:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     394:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     396:	8c b5       	in	r24, 0x2c	; 44
     398:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     39a:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     39c:	08 95       	ret

0000039e <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     39e:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     3a0:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     3a2:	9d bd       	out	0x2d, r25	; 45
     3a4:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     3a6:	2f bf       	out	0x3f, r18	; 63
}
     3a8:	08 95       	ret

000003aa <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     3aa:	e1 99       	sbic	0x1c, 1	; 28
     3ac:	fe cf       	rjmp	.-4      	; 0x3aa <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
     3ae:	9f bb       	out	0x1f, r25	; 31
     3b0:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     3b2:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     3b4:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     3b6:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
     3b8:	08 95       	ret

000003ba <writeSong2>:
	PORTB = EEPROM_read(9);
	_delay_ms(500);
}


void writeSong2(){
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	c8 e7       	ldi	r28, 0x78	; 120
     3c0:	d1 e0       	ldi	r29, 0x01	; 1
     3c2:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     3c4:	5f 9b       	sbis	0x0b, 7	; 11
     3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <writeSong2+0xa>

	/* get and return data from buffer */
	return UDR;
     3c8:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
	for(int i =0; i <3; i++){
		midiData[i] = midi_Receive();
     3ca:	81 93       	st	Z+, r24


void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
	for(int i =0; i <3; i++){
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	eb 37       	cpi	r30, 0x7B	; 123
     3d0:	f8 07       	cpc	r31, r24
     3d2:	c1 f7       	brne	.-16     	; 0x3c4 <writeSong2+0xa>
		midiData[i] = midi_Receive();
	}
	PORTB = midiData[1];
     3d4:	80 91 79 01 	lds	r24, 0x0179
     3d8:	88 bb       	out	0x18, r24	; 24
	TCNT1 = 0;
     3da:	1d bc       	out	0x2d, r1	; 45
     3dc:	1c bc       	out	0x2c, r1	; 44
	captureTime = TCNT1;
     3de:	2c b5       	in	r18, 0x2c	; 44
     3e0:	3d b5       	in	r19, 0x2d	; 45
     3e2:	42 2f       	mov	r20, r18
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
     3e4:	92 2f       	mov	r25, r18
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	89 2f       	mov	r24, r25
     3ea:	99 0f       	add	r25, r25
     3ec:	99 0b       	sbc	r25, r25
     3ee:	80 83       	st	Z, r24
	midiData[4] = captureTimeB;
     3f0:	11 82       	std	Z+1, r1	; 0x01
     3f2:	32 96       	adiw	r30, 0x02	; 2
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     3f4:	5f 9b       	sbis	0x0b, 7	; 11
     3f6:	fe cf       	rjmp	.-4      	; 0x3f4 <writeSong2+0x3a>

	/* get and return data from buffer */
	return UDR;
     3f8:	8c b1       	in	r24, 0x0c	; 12
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
		midiData[j] = midi_Receive();
     3fa:	81 93       	st	Z+, r24
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	e0 38       	cpi	r30, 0x80	; 128
     400:	f8 07       	cpc	r31, r24
     402:	c1 f7       	brne	.-16     	; 0x3f4 <writeSong2+0x3a>
		midiData[j] = midi_Receive();
	}
	interval = TCNT1 - captureTime;
     404:	2c b5       	in	r18, 0x2c	; 44
     406:	3d b5       	in	r19, 0x2d	; 45
	unsigned char intervalA = ((interval << 8) >> 8);
	unsigned char intervalB = (interval >> 8);
	midiData[8] = intervalA;
     408:	92 2f       	mov	r25, r18
     40a:	94 1b       	sub	r25, r20
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	89 2f       	mov	r24, r25
     410:	99 0f       	add	r25, r25
     412:	99 0b       	sbc	r25, r25
     414:	80 83       	st	Z, r24
	midiData[9] = intervalB;
     416:	11 82       	std	Z+1, r1	; 0x01

	
	

	for(int j= 0; j < 10; j++) {
		EEPROM_write(eeprom_address, midiData[j]);
     418:	80 91 72 01 	lds	r24, 0x0172
     41c:	90 91 73 01 	lds	r25, 0x0173
     420:	69 91       	ld	r22, Y+
     422:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
		eeprom_address++;		
     426:	80 91 72 01 	lds	r24, 0x0172
     42a:	90 91 73 01 	lds	r25, 0x0173
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 73 01 	sts	0x0173, r25
     434:	80 93 72 01 	sts	0x0172, r24
	midiData[9] = intervalB;

	
	

	for(int j= 0; j < 10; j++) {
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	c2 38       	cpi	r28, 0x82	; 130
     43c:	d8 07       	cpc	r29, r24
     43e:	61 f7       	brne	.-40     	; 0x418 <writeSong2+0x5e>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}	

}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     446:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeSong2>
	//midiTransitTest();
}
     44a:	08 95       	ret

0000044c <eeprom_test>:
	}
	
}

void eeprom_test(){
	EEPROM_write(1, 1);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(2, 2);
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(3, 3);
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	63 e0       	ldi	r22, 0x03	; 3
     466:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(4, 4);
     46a:	84 e0       	ldi	r24, 0x04	; 4
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	64 e0       	ldi	r22, 0x04	; 4
     470:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(5, 5);
     474:	85 e0       	ldi	r24, 0x05	; 5
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	65 e0       	ldi	r22, 0x05	; 5
     47a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(6, 6);
     47e:	86 e0       	ldi	r24, 0x06	; 6
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	66 e0       	ldi	r22, 0x06	; 6
     484:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(7, 7);
     488:	87 e0       	ldi	r24, 0x07	; 7
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	67 e0       	ldi	r22, 0x07	; 7
     48e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(8, 8);
     492:	88 e0       	ldi	r24, 0x08	; 8
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	68 e0       	ldi	r22, 0x08	; 8
     498:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	EEPROM_write(9, 9);
     49c:	89 e0       	ldi	r24, 0x09	; 9
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	69 e0       	ldi	r22, 0x09	; 9
     4a2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <EEPROM_write>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     4a6:	e1 99       	sbic	0x1c, 1	; 28
     4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <eeprom_test+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	9f bb       	out	0x1f, r25	; 31
     4b0:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     4b2:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     4b4:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(5, 5);
	EEPROM_write(6, 6);
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
     4b6:	88 bb       	out	0x18, r24	; 24
     4b8:	88 e8       	ldi	r24, 0x88	; 136
     4ba:	93 e1       	ldi	r25, 0x13	; 19
     4bc:	24 e6       	ldi	r18, 0x64	; 100
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	f9 01       	movw	r30, r18
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	f1 f7       	brne	.-4      	; 0x4c2 <eeprom_test+0x76>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4c8:	d9 f7       	brne	.-10     	; 0x4c0 <eeprom_test+0x74>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     4ca:	e1 99       	sbic	0x1c, 1	; 28
     4cc:	fe cf       	rjmp	.-4      	; 0x4ca <eeprom_test+0x7e>
	/* Set up address register */
	EEAR = uiAddress;
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	9f bb       	out	0x1f, r25	; 31
     4d4:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     4d6:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     4d8:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
     4da:	88 bb       	out	0x18, r24	; 24
     4dc:	88 e8       	ldi	r24, 0x88	; 136
     4de:	93 e1       	ldi	r25, 0x13	; 19
     4e0:	24 e6       	ldi	r18, 0x64	; 100
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	f9 01       	movw	r30, r18
     4e6:	31 97       	sbiw	r30, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <eeprom_test+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <eeprom_test+0x98>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     4ee:	e1 99       	sbic	0x1c, 1	; 28
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <eeprom_test+0xa2>
	/* Set up address register */
	EEAR = uiAddress;
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	9f bb       	out	0x1f, r25	; 31
     4f8:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     4fa:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     4fc:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
     4fe:	88 bb       	out	0x18, r24	; 24
     500:	88 e8       	ldi	r24, 0x88	; 136
     502:	93 e1       	ldi	r25, 0x13	; 19
     504:	24 e6       	ldi	r18, 0x64	; 100
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	f9 01       	movw	r30, r18
     50a:	31 97       	sbiw	r30, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <eeprom_test+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     50e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     510:	d9 f7       	brne	.-10     	; 0x508 <eeprom_test+0xbc>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     512:	e1 99       	sbic	0x1c, 1	; 28
     514:	fe cf       	rjmp	.-4      	; 0x512 <eeprom_test+0xc6>
	/* Set up address register */
	EEAR = uiAddress;
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	9f bb       	out	0x1f, r25	; 31
     51c:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     51e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     520:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
     522:	88 bb       	out	0x18, r24	; 24
     524:	88 e8       	ldi	r24, 0x88	; 136
     526:	93 e1       	ldi	r25, 0x13	; 19
     528:	24 e6       	ldi	r18, 0x64	; 100
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	f9 01       	movw	r30, r18
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	f1 f7       	brne	.-4      	; 0x52e <eeprom_test+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     532:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     534:	d9 f7       	brne	.-10     	; 0x52c <eeprom_test+0xe0>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     536:	e1 99       	sbic	0x1c, 1	; 28
     538:	fe cf       	rjmp	.-4      	; 0x536 <eeprom_test+0xea>
	/* Set up address register */
	EEAR = uiAddress;
     53a:	85 e0       	ldi	r24, 0x05	; 5
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	9f bb       	out	0x1f, r25	; 31
     540:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     542:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     544:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
     546:	88 bb       	out	0x18, r24	; 24
     548:	88 e8       	ldi	r24, 0x88	; 136
     54a:	93 e1       	ldi	r25, 0x13	; 19
     54c:	24 e6       	ldi	r18, 0x64	; 100
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	f9 01       	movw	r30, r18
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <eeprom_test+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     556:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	d9 f7       	brne	.-10     	; 0x550 <eeprom_test+0x104>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     55a:	e1 99       	sbic	0x1c, 1	; 28
     55c:	fe cf       	rjmp	.-4      	; 0x55a <eeprom_test+0x10e>
	/* Set up address register */
	EEAR = uiAddress;
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f bb       	out	0x1f, r25	; 31
     564:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     566:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     568:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
     56a:	88 bb       	out	0x18, r24	; 24
     56c:	88 e8       	ldi	r24, 0x88	; 136
     56e:	93 e1       	ldi	r25, 0x13	; 19
     570:	24 e6       	ldi	r18, 0x64	; 100
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	f9 01       	movw	r30, r18
     576:	31 97       	sbiw	r30, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <eeprom_test+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     57a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     57c:	d9 f7       	brne	.-10     	; 0x574 <eeprom_test+0x128>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     57e:	e1 99       	sbic	0x1c, 1	; 28
     580:	fe cf       	rjmp	.-4      	; 0x57e <eeprom_test+0x132>
	/* Set up address register */
	EEAR = uiAddress;
     582:	87 e0       	ldi	r24, 0x07	; 7
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	9f bb       	out	0x1f, r25	; 31
     588:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     58a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     58c:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
     58e:	88 bb       	out	0x18, r24	; 24
     590:	88 e8       	ldi	r24, 0x88	; 136
     592:	93 e1       	ldi	r25, 0x13	; 19
     594:	24 e6       	ldi	r18, 0x64	; 100
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	f9 01       	movw	r30, r18
     59a:	31 97       	sbiw	r30, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <eeprom_test+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     59e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5a0:	d9 f7       	brne	.-10     	; 0x598 <eeprom_test+0x14c>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     5a2:	e1 99       	sbic	0x1c, 1	; 28
     5a4:	fe cf       	rjmp	.-4      	; 0x5a2 <eeprom_test+0x156>
	/* Set up address register */
	EEAR = uiAddress;
     5a6:	88 e0       	ldi	r24, 0x08	; 8
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	9f bb       	out	0x1f, r25	; 31
     5ac:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     5ae:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     5b0:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
     5b2:	88 bb       	out	0x18, r24	; 24
     5b4:	88 e8       	ldi	r24, 0x88	; 136
     5b6:	93 e1       	ldi	r25, 0x13	; 19
     5b8:	24 e6       	ldi	r18, 0x64	; 100
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	f9 01       	movw	r30, r18
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <eeprom_test+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5c4:	d9 f7       	brne	.-10     	; 0x5bc <eeprom_test+0x170>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     5c6:	e1 99       	sbic	0x1c, 1	; 28
     5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <eeprom_test+0x17a>
	/* Set up address register */
	EEAR = uiAddress;
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	9f bb       	out	0x1f, r25	; 31
     5d0:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     5d2:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     5d4:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
	_delay_ms(500);
	PORTB = EEPROM_read(9);
     5d6:	88 bb       	out	0x18, r24	; 24
     5d8:	88 e8       	ldi	r24, 0x88	; 136
     5da:	93 e1       	ldi	r25, 0x13	; 19
     5dc:	24 e6       	ldi	r18, 0x64	; 100
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <eeprom_test+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e8:	d9 f7       	brne	.-10     	; 0x5e0 <eeprom_test+0x194>
	_delay_ms(500);
}
     5ea:	08 95       	ret

000005ec <playBack>:
	//midiTransitTest();
}

void playBack(){
	//midiTransitTest();
	eeprom_test();
     5ec:	0e 94 26 02 	call	0x44c	; 0x44c <eeprom_test>
}
     5f0:	08 95       	ret

000005f2 <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
     5f2:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     5f8:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     5fa:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     5fc:	17 e0       	ldi	r17, 0x07	; 7
     5fe:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
     600:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
     602:	0e 94 5e 00 	call	0xbc	; 0xbc <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     606:	87 e4       	ldi	r24, 0x47	; 71
     608:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     60a:	87 e8       	ldi	r24, 0x87	; 135
     60c:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     60e:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     610:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     612:	88 e1       	ldi	r24, 0x18	; 24
     614:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     616:	86 e8       	ldi	r24, 0x86	; 134
     618:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     61a:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
     61c:	99 b3       	in	r25, 0x19	; 25
     61e:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
     620:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
     622:	82 ff       	sbrs	r24, 2
     624:	05 c0       	rjmp	.+10     	; 0x630 <main+0x3e>
     626:	99 23       	and	r25, r25
     628:	c1 f7       	brne	.-16     	; 0x61a <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     62a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <writeSong2>
     62e:	f5 cf       	rjmp	.-22     	; 0x61a <main+0x28>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
     630:	99 23       	and	r25, r25
     632:	99 f3       	breq	.-26     	; 0x61a <main+0x28>
			if (mod){ // Modify Mode
     634:	20 fd       	sbrc	r18, 0
     636:	f1 cf       	rjmp	.-30     	; 0x61a <main+0x28>
	//midiTransitTest();
}

void playBack(){
	//midiTransitTest();
	eeprom_test();
     638:	0e 94 26 02 	call	0x44c	; 0x44c <eeprom_test>
     63c:	ee cf       	rjmp	.-36     	; 0x61a <main+0x28>

0000063e <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     63e:	e1 99       	sbic	0x1c, 1	; 28
     640:	fe cf       	rjmp	.-4      	; 0x63e <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     642:	9f bb       	out	0x1f, r25	; 31
     644:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     646:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
     648:	8d b3       	in	r24, 0x1d	; 29
}
     64a:	08 95       	ret

0000064c <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	0f b6       	in	r0, 0x3f	; 63
     652:	0f 92       	push	r0
     654:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
     656:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
}
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <__fixunssfsi>:
     662:	ef 92       	push	r14
     664:	ff 92       	push	r15
     666:	0f 93       	push	r16
     668:	1f 93       	push	r17
     66a:	7b 01       	movw	r14, r22
     66c:	8c 01       	movw	r16, r24
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	40 e0       	ldi	r20, 0x00	; 0
     674:	5f e4       	ldi	r21, 0x4F	; 79
     676:	0e 94 31 06 	call	0xc62	; 0xc62 <__gesf2>
     67a:	88 23       	and	r24, r24
     67c:	8c f0       	brlt	.+34     	; 0x6a0 <__fixunssfsi+0x3e>
     67e:	c8 01       	movw	r24, r16
     680:	b7 01       	movw	r22, r14
     682:	20 e0       	ldi	r18, 0x00	; 0
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	5f e4       	ldi	r21, 0x4F	; 79
     68a:	0e 94 a9 04 	call	0x952	; 0x952 <__subsf3>
     68e:	0e 94 91 06 	call	0xd22	; 0xd22 <__fixsfsi>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	20 50       	subi	r18, 0x00	; 0
     698:	30 40       	sbci	r19, 0x00	; 0
     69a:	40 40       	sbci	r20, 0x00	; 0
     69c:	50 48       	sbci	r21, 0x80	; 128
     69e:	06 c0       	rjmp	.+12     	; 0x6ac <__fixunssfsi+0x4a>
     6a0:	c8 01       	movw	r24, r16
     6a2:	b7 01       	movw	r22, r14
     6a4:	0e 94 91 06 	call	0xd22	; 0xd22 <__fixsfsi>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	b9 01       	movw	r22, r18
     6ae:	ca 01       	movw	r24, r20
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	08 95       	ret

000006ba <_fpadd_parts>:
     6ba:	a0 e0       	ldi	r26, 0x00	; 0
     6bc:	b0 e0       	ldi	r27, 0x00	; 0
     6be:	e3 e6       	ldi	r30, 0x63	; 99
     6c0:	f3 e0       	ldi	r31, 0x03	; 3
     6c2:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__prologue_saves__>
     6c6:	dc 01       	movw	r26, r24
     6c8:	2b 01       	movw	r4, r22
     6ca:	fa 01       	movw	r30, r20
     6cc:	9c 91       	ld	r25, X
     6ce:	92 30       	cpi	r25, 0x02	; 2
     6d0:	08 f4       	brcc	.+2      	; 0x6d4 <_fpadd_parts+0x1a>
     6d2:	39 c1       	rjmp	.+626    	; 0x946 <__stack+0xe7>
     6d4:	eb 01       	movw	r28, r22
     6d6:	88 81       	ld	r24, Y
     6d8:	82 30       	cpi	r24, 0x02	; 2
     6da:	08 f4       	brcc	.+2      	; 0x6de <_fpadd_parts+0x24>
     6dc:	33 c1       	rjmp	.+614    	; 0x944 <__stack+0xe5>
     6de:	94 30       	cpi	r25, 0x04	; 4
     6e0:	69 f4       	brne	.+26     	; 0x6fc <_fpadd_parts+0x42>
     6e2:	84 30       	cpi	r24, 0x04	; 4
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <_fpadd_parts+0x2e>
     6e6:	2f c1       	rjmp	.+606    	; 0x946 <__stack+0xe7>
     6e8:	11 96       	adiw	r26, 0x01	; 1
     6ea:	9c 91       	ld	r25, X
     6ec:	11 97       	sbiw	r26, 0x01	; 1
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	98 17       	cp	r25, r24
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <_fpadd_parts+0x3c>
     6f4:	28 c1       	rjmp	.+592    	; 0x946 <__stack+0xe7>
     6f6:	a0 e6       	ldi	r26, 0x60	; 96
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	25 c1       	rjmp	.+586    	; 0x946 <__stack+0xe7>
     6fc:	84 30       	cpi	r24, 0x04	; 4
     6fe:	09 f4       	brne	.+2      	; 0x702 <_fpadd_parts+0x48>
     700:	21 c1       	rjmp	.+578    	; 0x944 <__stack+0xe5>
     702:	82 30       	cpi	r24, 0x02	; 2
     704:	a9 f4       	brne	.+42     	; 0x730 <_fpadd_parts+0x76>
     706:	92 30       	cpi	r25, 0x02	; 2
     708:	09 f0       	breq	.+2      	; 0x70c <_fpadd_parts+0x52>
     70a:	1d c1       	rjmp	.+570    	; 0x946 <__stack+0xe7>
     70c:	9a 01       	movw	r18, r20
     70e:	ad 01       	movw	r20, r26
     710:	88 e0       	ldi	r24, 0x08	; 8
     712:	ea 01       	movw	r28, r20
     714:	09 90       	ld	r0, Y+
     716:	ae 01       	movw	r20, r28
     718:	e9 01       	movw	r28, r18
     71a:	09 92       	st	Y+, r0
     71c:	9e 01       	movw	r18, r28
     71e:	81 50       	subi	r24, 0x01	; 1
     720:	c1 f7       	brne	.-16     	; 0x712 <_fpadd_parts+0x58>
     722:	e2 01       	movw	r28, r4
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	11 96       	adiw	r26, 0x01	; 1
     728:	9c 91       	ld	r25, X
     72a:	89 23       	and	r24, r25
     72c:	81 83       	std	Z+1, r24	; 0x01
     72e:	08 c1       	rjmp	.+528    	; 0x940 <__stack+0xe1>
     730:	92 30       	cpi	r25, 0x02	; 2
     732:	09 f4       	brne	.+2      	; 0x736 <_fpadd_parts+0x7c>
     734:	07 c1       	rjmp	.+526    	; 0x944 <__stack+0xe5>
     736:	12 96       	adiw	r26, 0x02	; 2
     738:	2d 90       	ld	r2, X+
     73a:	3c 90       	ld	r3, X
     73c:	13 97       	sbiw	r26, 0x03	; 3
     73e:	eb 01       	movw	r28, r22
     740:	8a 81       	ldd	r24, Y+2	; 0x02
     742:	9b 81       	ldd	r25, Y+3	; 0x03
     744:	14 96       	adiw	r26, 0x04	; 4
     746:	ad 90       	ld	r10, X+
     748:	bd 90       	ld	r11, X+
     74a:	cd 90       	ld	r12, X+
     74c:	dc 90       	ld	r13, X
     74e:	17 97       	sbiw	r26, 0x07	; 7
     750:	ec 80       	ldd	r14, Y+4	; 0x04
     752:	fd 80       	ldd	r15, Y+5	; 0x05
     754:	0e 81       	ldd	r16, Y+6	; 0x06
     756:	1f 81       	ldd	r17, Y+7	; 0x07
     758:	91 01       	movw	r18, r2
     75a:	28 1b       	sub	r18, r24
     75c:	39 0b       	sbc	r19, r25
     75e:	b9 01       	movw	r22, r18
     760:	37 ff       	sbrs	r19, 7
     762:	04 c0       	rjmp	.+8      	; 0x76c <_fpadd_parts+0xb2>
     764:	66 27       	eor	r22, r22
     766:	77 27       	eor	r23, r23
     768:	62 1b       	sub	r22, r18
     76a:	73 0b       	sbc	r23, r19
     76c:	60 32       	cpi	r22, 0x20	; 32
     76e:	71 05       	cpc	r23, r1
     770:	0c f0       	brlt	.+2      	; 0x774 <_fpadd_parts+0xba>
     772:	61 c0       	rjmp	.+194    	; 0x836 <_fpadd_parts+0x17c>
     774:	12 16       	cp	r1, r18
     776:	13 06       	cpc	r1, r19
     778:	6c f5       	brge	.+90     	; 0x7d4 <_fpadd_parts+0x11a>
     77a:	37 01       	movw	r6, r14
     77c:	48 01       	movw	r8, r16
     77e:	06 2e       	mov	r0, r22
     780:	04 c0       	rjmp	.+8      	; 0x78a <_fpadd_parts+0xd0>
     782:	96 94       	lsr	r9
     784:	87 94       	ror	r8
     786:	77 94       	ror	r7
     788:	67 94       	ror	r6
     78a:	0a 94       	dec	r0
     78c:	d2 f7       	brpl	.-12     	; 0x782 <_fpadd_parts+0xc8>
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	04 c0       	rjmp	.+8      	; 0x7a0 <_fpadd_parts+0xe6>
     798:	22 0f       	add	r18, r18
     79a:	33 1f       	adc	r19, r19
     79c:	44 1f       	adc	r20, r20
     79e:	55 1f       	adc	r21, r21
     7a0:	6a 95       	dec	r22
     7a2:	d2 f7       	brpl	.-12     	; 0x798 <_fpadd_parts+0xde>
     7a4:	21 50       	subi	r18, 0x01	; 1
     7a6:	30 40       	sbci	r19, 0x00	; 0
     7a8:	40 40       	sbci	r20, 0x00	; 0
     7aa:	50 40       	sbci	r21, 0x00	; 0
     7ac:	2e 21       	and	r18, r14
     7ae:	3f 21       	and	r19, r15
     7b0:	40 23       	and	r20, r16
     7b2:	51 23       	and	r21, r17
     7b4:	21 15       	cp	r18, r1
     7b6:	31 05       	cpc	r19, r1
     7b8:	41 05       	cpc	r20, r1
     7ba:	51 05       	cpc	r21, r1
     7bc:	21 f0       	breq	.+8      	; 0x7c6 <_fpadd_parts+0x10c>
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e0       	ldi	r20, 0x00	; 0
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	79 01       	movw	r14, r18
     7c8:	8a 01       	movw	r16, r20
     7ca:	e6 28       	or	r14, r6
     7cc:	f7 28       	or	r15, r7
     7ce:	08 29       	or	r16, r8
     7d0:	19 29       	or	r17, r9
     7d2:	3c c0       	rjmp	.+120    	; 0x84c <_fpadd_parts+0x192>
     7d4:	23 2b       	or	r18, r19
     7d6:	d1 f1       	breq	.+116    	; 0x84c <_fpadd_parts+0x192>
     7d8:	26 0e       	add	r2, r22
     7da:	37 1e       	adc	r3, r23
     7dc:	35 01       	movw	r6, r10
     7de:	46 01       	movw	r8, r12
     7e0:	06 2e       	mov	r0, r22
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <_fpadd_parts+0x132>
     7e4:	96 94       	lsr	r9
     7e6:	87 94       	ror	r8
     7e8:	77 94       	ror	r7
     7ea:	67 94       	ror	r6
     7ec:	0a 94       	dec	r0
     7ee:	d2 f7       	brpl	.-12     	; 0x7e4 <_fpadd_parts+0x12a>
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e0       	ldi	r20, 0x00	; 0
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	04 c0       	rjmp	.+8      	; 0x802 <_fpadd_parts+0x148>
     7fa:	22 0f       	add	r18, r18
     7fc:	33 1f       	adc	r19, r19
     7fe:	44 1f       	adc	r20, r20
     800:	55 1f       	adc	r21, r21
     802:	6a 95       	dec	r22
     804:	d2 f7       	brpl	.-12     	; 0x7fa <_fpadd_parts+0x140>
     806:	21 50       	subi	r18, 0x01	; 1
     808:	30 40       	sbci	r19, 0x00	; 0
     80a:	40 40       	sbci	r20, 0x00	; 0
     80c:	50 40       	sbci	r21, 0x00	; 0
     80e:	2a 21       	and	r18, r10
     810:	3b 21       	and	r19, r11
     812:	4c 21       	and	r20, r12
     814:	5d 21       	and	r21, r13
     816:	21 15       	cp	r18, r1
     818:	31 05       	cpc	r19, r1
     81a:	41 05       	cpc	r20, r1
     81c:	51 05       	cpc	r21, r1
     81e:	21 f0       	breq	.+8      	; 0x828 <_fpadd_parts+0x16e>
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	59 01       	movw	r10, r18
     82a:	6a 01       	movw	r12, r20
     82c:	a6 28       	or	r10, r6
     82e:	b7 28       	or	r11, r7
     830:	c8 28       	or	r12, r8
     832:	d9 28       	or	r13, r9
     834:	0b c0       	rjmp	.+22     	; 0x84c <_fpadd_parts+0x192>
     836:	82 15       	cp	r24, r2
     838:	93 05       	cpc	r25, r3
     83a:	2c f0       	brlt	.+10     	; 0x846 <_fpadd_parts+0x18c>
     83c:	1c 01       	movw	r2, r24
     83e:	aa 24       	eor	r10, r10
     840:	bb 24       	eor	r11, r11
     842:	65 01       	movw	r12, r10
     844:	03 c0       	rjmp	.+6      	; 0x84c <_fpadd_parts+0x192>
     846:	ee 24       	eor	r14, r14
     848:	ff 24       	eor	r15, r15
     84a:	87 01       	movw	r16, r14
     84c:	11 96       	adiw	r26, 0x01	; 1
     84e:	9c 91       	ld	r25, X
     850:	d2 01       	movw	r26, r4
     852:	11 96       	adiw	r26, 0x01	; 1
     854:	8c 91       	ld	r24, X
     856:	98 17       	cp	r25, r24
     858:	09 f4       	brne	.+2      	; 0x85c <_fpadd_parts+0x1a2>
     85a:	45 c0       	rjmp	.+138    	; 0x8e6 <__stack+0x87>
     85c:	99 23       	and	r25, r25
     85e:	39 f0       	breq	.+14     	; 0x86e <__stack+0xf>
     860:	a8 01       	movw	r20, r16
     862:	97 01       	movw	r18, r14
     864:	2a 19       	sub	r18, r10
     866:	3b 09       	sbc	r19, r11
     868:	4c 09       	sbc	r20, r12
     86a:	5d 09       	sbc	r21, r13
     86c:	06 c0       	rjmp	.+12     	; 0x87a <__stack+0x1b>
     86e:	a6 01       	movw	r20, r12
     870:	95 01       	movw	r18, r10
     872:	2e 19       	sub	r18, r14
     874:	3f 09       	sbc	r19, r15
     876:	40 0b       	sbc	r20, r16
     878:	51 0b       	sbc	r21, r17
     87a:	57 fd       	sbrc	r21, 7
     87c:	08 c0       	rjmp	.+16     	; 0x88e <__stack+0x2f>
     87e:	11 82       	std	Z+1, r1	; 0x01
     880:	33 82       	std	Z+3, r3	; 0x03
     882:	22 82       	std	Z+2, r2	; 0x02
     884:	24 83       	std	Z+4, r18	; 0x04
     886:	35 83       	std	Z+5, r19	; 0x05
     888:	46 83       	std	Z+6, r20	; 0x06
     88a:	57 83       	std	Z+7, r21	; 0x07
     88c:	1d c0       	rjmp	.+58     	; 0x8c8 <__stack+0x69>
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	81 83       	std	Z+1, r24	; 0x01
     892:	33 82       	std	Z+3, r3	; 0x03
     894:	22 82       	std	Z+2, r2	; 0x02
     896:	88 27       	eor	r24, r24
     898:	99 27       	eor	r25, r25
     89a:	dc 01       	movw	r26, r24
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	a4 0b       	sbc	r26, r20
     8a2:	b5 0b       	sbc	r27, r21
     8a4:	84 83       	std	Z+4, r24	; 0x04
     8a6:	95 83       	std	Z+5, r25	; 0x05
     8a8:	a6 83       	std	Z+6, r26	; 0x06
     8aa:	b7 83       	std	Z+7, r27	; 0x07
     8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <__stack+0x69>
     8ae:	22 0f       	add	r18, r18
     8b0:	33 1f       	adc	r19, r19
     8b2:	44 1f       	adc	r20, r20
     8b4:	55 1f       	adc	r21, r21
     8b6:	24 83       	std	Z+4, r18	; 0x04
     8b8:	35 83       	std	Z+5, r19	; 0x05
     8ba:	46 83       	std	Z+6, r20	; 0x06
     8bc:	57 83       	std	Z+7, r21	; 0x07
     8be:	82 81       	ldd	r24, Z+2	; 0x02
     8c0:	93 81       	ldd	r25, Z+3	; 0x03
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	93 83       	std	Z+3, r25	; 0x03
     8c6:	82 83       	std	Z+2, r24	; 0x02
     8c8:	24 81       	ldd	r18, Z+4	; 0x04
     8ca:	35 81       	ldd	r19, Z+5	; 0x05
     8cc:	46 81       	ldd	r20, Z+6	; 0x06
     8ce:	57 81       	ldd	r21, Z+7	; 0x07
     8d0:	da 01       	movw	r26, r20
     8d2:	c9 01       	movw	r24, r18
     8d4:	01 97       	sbiw	r24, 0x01	; 1
     8d6:	a1 09       	sbc	r26, r1
     8d8:	b1 09       	sbc	r27, r1
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	af 4f       	sbci	r26, 0xFF	; 255
     8e0:	bf 43       	sbci	r27, 0x3F	; 63
     8e2:	28 f3       	brcs	.-54     	; 0x8ae <__stack+0x4f>
     8e4:	0b c0       	rjmp	.+22     	; 0x8fc <__stack+0x9d>
     8e6:	91 83       	std	Z+1, r25	; 0x01
     8e8:	33 82       	std	Z+3, r3	; 0x03
     8ea:	22 82       	std	Z+2, r2	; 0x02
     8ec:	ea 0c       	add	r14, r10
     8ee:	fb 1c       	adc	r15, r11
     8f0:	0c 1d       	adc	r16, r12
     8f2:	1d 1d       	adc	r17, r13
     8f4:	e4 82       	std	Z+4, r14	; 0x04
     8f6:	f5 82       	std	Z+5, r15	; 0x05
     8f8:	06 83       	std	Z+6, r16	; 0x06
     8fa:	17 83       	std	Z+7, r17	; 0x07
     8fc:	83 e0       	ldi	r24, 0x03	; 3
     8fe:	80 83       	st	Z, r24
     900:	24 81       	ldd	r18, Z+4	; 0x04
     902:	35 81       	ldd	r19, Z+5	; 0x05
     904:	46 81       	ldd	r20, Z+6	; 0x06
     906:	57 81       	ldd	r21, Z+7	; 0x07
     908:	57 ff       	sbrs	r21, 7
     90a:	1a c0       	rjmp	.+52     	; 0x940 <__stack+0xe1>
     90c:	c9 01       	movw	r24, r18
     90e:	aa 27       	eor	r26, r26
     910:	97 fd       	sbrc	r25, 7
     912:	a0 95       	com	r26
     914:	ba 2f       	mov	r27, r26
     916:	81 70       	andi	r24, 0x01	; 1
     918:	90 70       	andi	r25, 0x00	; 0
     91a:	a0 70       	andi	r26, 0x00	; 0
     91c:	b0 70       	andi	r27, 0x00	; 0
     91e:	56 95       	lsr	r21
     920:	47 95       	ror	r20
     922:	37 95       	ror	r19
     924:	27 95       	ror	r18
     926:	82 2b       	or	r24, r18
     928:	93 2b       	or	r25, r19
     92a:	a4 2b       	or	r26, r20
     92c:	b5 2b       	or	r27, r21
     92e:	84 83       	std	Z+4, r24	; 0x04
     930:	95 83       	std	Z+5, r25	; 0x05
     932:	a6 83       	std	Z+6, r26	; 0x06
     934:	b7 83       	std	Z+7, r27	; 0x07
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	93 81       	ldd	r25, Z+3	; 0x03
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	93 83       	std	Z+3, r25	; 0x03
     93e:	82 83       	std	Z+2, r24	; 0x02
     940:	df 01       	movw	r26, r30
     942:	01 c0       	rjmp	.+2      	; 0x946 <__stack+0xe7>
     944:	d2 01       	movw	r26, r4
     946:	cd 01       	movw	r24, r26
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	e2 e1       	ldi	r30, 0x12	; 18
     94e:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__epilogue_restores__>

00000952 <__subsf3>:
     952:	a0 e2       	ldi	r26, 0x20	; 32
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__prologue_saves__+0x18>
     95e:	69 83       	std	Y+1, r22	; 0x01
     960:	7a 83       	std	Y+2, r23	; 0x02
     962:	8b 83       	std	Y+3, r24	; 0x03
     964:	9c 83       	std	Y+4, r25	; 0x04
     966:	2d 83       	std	Y+5, r18	; 0x05
     968:	3e 83       	std	Y+6, r19	; 0x06
     96a:	4f 83       	std	Y+7, r20	; 0x07
     96c:	58 87       	std	Y+8, r21	; 0x08
     96e:	e9 e0       	ldi	r30, 0x09	; 9
     970:	ee 2e       	mov	r14, r30
     972:	f1 2c       	mov	r15, r1
     974:	ec 0e       	add	r14, r28
     976:	fd 1e       	adc	r15, r29
     978:	ce 01       	movw	r24, r28
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	b7 01       	movw	r22, r14
     97e:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     982:	8e 01       	movw	r16, r28
     984:	0f 5e       	subi	r16, 0xEF	; 239
     986:	1f 4f       	sbci	r17, 0xFF	; 255
     988:	ce 01       	movw	r24, r28
     98a:	05 96       	adiw	r24, 0x05	; 5
     98c:	b8 01       	movw	r22, r16
     98e:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     992:	8a 89       	ldd	r24, Y+18	; 0x12
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	89 27       	eor	r24, r25
     998:	8a 8b       	std	Y+18, r24	; 0x12
     99a:	c7 01       	movw	r24, r14
     99c:	b8 01       	movw	r22, r16
     99e:	ae 01       	movw	r20, r28
     9a0:	47 5e       	subi	r20, 0xE7	; 231
     9a2:	5f 4f       	sbci	r21, 0xFF	; 255
     9a4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_fpadd_parts>
     9a8:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__pack_f>
     9ac:	a0 96       	adiw	r28, 0x20	; 32
     9ae:	e6 e0       	ldi	r30, 0x06	; 6
     9b0:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__epilogue_restores__+0x18>

000009b4 <__addsf3>:
     9b4:	a0 e2       	ldi	r26, 0x20	; 32
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e0 ee       	ldi	r30, 0xE0	; 224
     9ba:	f4 e0       	ldi	r31, 0x04	; 4
     9bc:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__prologue_saves__+0x18>
     9c0:	69 83       	std	Y+1, r22	; 0x01
     9c2:	7a 83       	std	Y+2, r23	; 0x02
     9c4:	8b 83       	std	Y+3, r24	; 0x03
     9c6:	9c 83       	std	Y+4, r25	; 0x04
     9c8:	2d 83       	std	Y+5, r18	; 0x05
     9ca:	3e 83       	std	Y+6, r19	; 0x06
     9cc:	4f 83       	std	Y+7, r20	; 0x07
     9ce:	58 87       	std	Y+8, r21	; 0x08
     9d0:	f9 e0       	ldi	r31, 0x09	; 9
     9d2:	ef 2e       	mov	r14, r31
     9d4:	f1 2c       	mov	r15, r1
     9d6:	ec 0e       	add	r14, r28
     9d8:	fd 1e       	adc	r15, r29
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	b7 01       	movw	r22, r14
     9e0:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     9e4:	8e 01       	movw	r16, r28
     9e6:	0f 5e       	subi	r16, 0xEF	; 239
     9e8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ea:	ce 01       	movw	r24, r28
     9ec:	05 96       	adiw	r24, 0x05	; 5
     9ee:	b8 01       	movw	r22, r16
     9f0:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     9f4:	c7 01       	movw	r24, r14
     9f6:	b8 01       	movw	r22, r16
     9f8:	ae 01       	movw	r20, r28
     9fa:	47 5e       	subi	r20, 0xE7	; 231
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
     9fe:	0e 94 5d 03 	call	0x6ba	; 0x6ba <_fpadd_parts>
     a02:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__pack_f>
     a06:	a0 96       	adiw	r28, 0x20	; 32
     a08:	e6 e0       	ldi	r30, 0x06	; 6
     a0a:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__epilogue_restores__+0x18>

00000a0e <__mulsf3>:
     a0e:	a0 e2       	ldi	r26, 0x20	; 32
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__prologue_saves__>
     a1a:	69 83       	std	Y+1, r22	; 0x01
     a1c:	7a 83       	std	Y+2, r23	; 0x02
     a1e:	8b 83       	std	Y+3, r24	; 0x03
     a20:	9c 83       	std	Y+4, r25	; 0x04
     a22:	2d 83       	std	Y+5, r18	; 0x05
     a24:	3e 83       	std	Y+6, r19	; 0x06
     a26:	4f 83       	std	Y+7, r20	; 0x07
     a28:	58 87       	std	Y+8, r21	; 0x08
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	be 01       	movw	r22, r28
     a30:	67 5f       	subi	r22, 0xF7	; 247
     a32:	7f 4f       	sbci	r23, 0xFF	; 255
     a34:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     a38:	ce 01       	movw	r24, r28
     a3a:	05 96       	adiw	r24, 0x05	; 5
     a3c:	be 01       	movw	r22, r28
     a3e:	6f 5e       	subi	r22, 0xEF	; 239
     a40:	7f 4f       	sbci	r23, 0xFF	; 255
     a42:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     a46:	99 85       	ldd	r25, Y+9	; 0x09
     a48:	92 30       	cpi	r25, 0x02	; 2
     a4a:	88 f0       	brcs	.+34     	; 0xa6e <__mulsf3+0x60>
     a4c:	89 89       	ldd	r24, Y+17	; 0x11
     a4e:	82 30       	cpi	r24, 0x02	; 2
     a50:	c8 f0       	brcs	.+50     	; 0xa84 <__mulsf3+0x76>
     a52:	94 30       	cpi	r25, 0x04	; 4
     a54:	19 f4       	brne	.+6      	; 0xa5c <__mulsf3+0x4e>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	51 f4       	brne	.+20     	; 0xa6e <__mulsf3+0x60>
     a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__mulsf3+0x56>
     a5c:	84 30       	cpi	r24, 0x04	; 4
     a5e:	29 f4       	brne	.+10     	; 0xa6a <__mulsf3+0x5c>
     a60:	92 30       	cpi	r25, 0x02	; 2
     a62:	81 f4       	brne	.+32     	; 0xa84 <__mulsf3+0x76>
     a64:	80 e6       	ldi	r24, 0x60	; 96
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	c6 c0       	rjmp	.+396    	; 0xbf6 <__mulsf3+0x1e8>
     a6a:	92 30       	cpi	r25, 0x02	; 2
     a6c:	49 f4       	brne	.+18     	; 0xa80 <__mulsf3+0x72>
     a6e:	20 e0       	ldi	r18, 0x00	; 0
     a70:	9a 85       	ldd	r25, Y+10	; 0x0a
     a72:	8a 89       	ldd	r24, Y+18	; 0x12
     a74:	98 13       	cpse	r25, r24
     a76:	21 e0       	ldi	r18, 0x01	; 1
     a78:	2a 87       	std	Y+10, r18	; 0x0a
     a7a:	ce 01       	movw	r24, r28
     a7c:	09 96       	adiw	r24, 0x09	; 9
     a7e:	bb c0       	rjmp	.+374    	; 0xbf6 <__mulsf3+0x1e8>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	49 f4       	brne	.+18     	; 0xa96 <__mulsf3+0x88>
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	9a 85       	ldd	r25, Y+10	; 0x0a
     a88:	8a 89       	ldd	r24, Y+18	; 0x12
     a8a:	98 13       	cpse	r25, r24
     a8c:	21 e0       	ldi	r18, 0x01	; 1
     a8e:	2a 8b       	std	Y+18, r18	; 0x12
     a90:	ce 01       	movw	r24, r28
     a92:	41 96       	adiw	r24, 0x11	; 17
     a94:	b0 c0       	rjmp	.+352    	; 0xbf6 <__mulsf3+0x1e8>
     a96:	2d 84       	ldd	r2, Y+13	; 0x0d
     a98:	3e 84       	ldd	r3, Y+14	; 0x0e
     a9a:	4f 84       	ldd	r4, Y+15	; 0x0f
     a9c:	58 88       	ldd	r5, Y+16	; 0x10
     a9e:	6d 88       	ldd	r6, Y+21	; 0x15
     aa0:	7e 88       	ldd	r7, Y+22	; 0x16
     aa2:	8f 88       	ldd	r8, Y+23	; 0x17
     aa4:	98 8c       	ldd	r9, Y+24	; 0x18
     aa6:	ee 24       	eor	r14, r14
     aa8:	ff 24       	eor	r15, r15
     aaa:	87 01       	movw	r16, r14
     aac:	aa 24       	eor	r10, r10
     aae:	bb 24       	eor	r11, r11
     ab0:	65 01       	movw	r12, r10
     ab2:	40 e0       	ldi	r20, 0x00	; 0
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	e0 e0       	ldi	r30, 0x00	; 0
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	c1 01       	movw	r24, r2
     ac0:	81 70       	andi	r24, 0x01	; 1
     ac2:	90 70       	andi	r25, 0x00	; 0
     ac4:	89 2b       	or	r24, r25
     ac6:	e9 f0       	breq	.+58     	; 0xb02 <__mulsf3+0xf4>
     ac8:	e6 0c       	add	r14, r6
     aca:	f7 1c       	adc	r15, r7
     acc:	08 1d       	adc	r16, r8
     ace:	19 1d       	adc	r17, r9
     ad0:	9a 01       	movw	r18, r20
     ad2:	ab 01       	movw	r20, r22
     ad4:	2a 0d       	add	r18, r10
     ad6:	3b 1d       	adc	r19, r11
     ad8:	4c 1d       	adc	r20, r12
     ada:	5d 1d       	adc	r21, r13
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	a0 e0       	ldi	r26, 0x00	; 0
     ae2:	b0 e0       	ldi	r27, 0x00	; 0
     ae4:	e6 14       	cp	r14, r6
     ae6:	f7 04       	cpc	r15, r7
     ae8:	08 05       	cpc	r16, r8
     aea:	19 05       	cpc	r17, r9
     aec:	20 f4       	brcc	.+8      	; 0xaf6 <__mulsf3+0xe8>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e0       	ldi	r26, 0x00	; 0
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	ba 01       	movw	r22, r20
     af8:	a9 01       	movw	r20, r18
     afa:	48 0f       	add	r20, r24
     afc:	59 1f       	adc	r21, r25
     afe:	6a 1f       	adc	r22, r26
     b00:	7b 1f       	adc	r23, r27
     b02:	aa 0c       	add	r10, r10
     b04:	bb 1c       	adc	r11, r11
     b06:	cc 1c       	adc	r12, r12
     b08:	dd 1c       	adc	r13, r13
     b0a:	97 fe       	sbrs	r9, 7
     b0c:	08 c0       	rjmp	.+16     	; 0xb1e <__mulsf3+0x110>
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	a8 2a       	or	r10, r24
     b18:	b9 2a       	or	r11, r25
     b1a:	ca 2a       	or	r12, r26
     b1c:	db 2a       	or	r13, r27
     b1e:	31 96       	adiw	r30, 0x01	; 1
     b20:	e0 32       	cpi	r30, 0x20	; 32
     b22:	f1 05       	cpc	r31, r1
     b24:	49 f0       	breq	.+18     	; 0xb38 <__mulsf3+0x12a>
     b26:	66 0c       	add	r6, r6
     b28:	77 1c       	adc	r7, r7
     b2a:	88 1c       	adc	r8, r8
     b2c:	99 1c       	adc	r9, r9
     b2e:	56 94       	lsr	r5
     b30:	47 94       	ror	r4
     b32:	37 94       	ror	r3
     b34:	27 94       	ror	r2
     b36:	c3 cf       	rjmp	.-122    	; 0xabe <__mulsf3+0xb0>
     b38:	fa 85       	ldd	r31, Y+10	; 0x0a
     b3a:	ea 89       	ldd	r30, Y+18	; 0x12
     b3c:	2b 89       	ldd	r18, Y+19	; 0x13
     b3e:	3c 89       	ldd	r19, Y+20	; 0x14
     b40:	8b 85       	ldd	r24, Y+11	; 0x0b
     b42:	9c 85       	ldd	r25, Y+12	; 0x0c
     b44:	28 0f       	add	r18, r24
     b46:	39 1f       	adc	r19, r25
     b48:	2e 5f       	subi	r18, 0xFE	; 254
     b4a:	3f 4f       	sbci	r19, 0xFF	; 255
     b4c:	17 c0       	rjmp	.+46     	; 0xb7c <__mulsf3+0x16e>
     b4e:	ca 01       	movw	r24, r20
     b50:	81 70       	andi	r24, 0x01	; 1
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	89 2b       	or	r24, r25
     b56:	61 f0       	breq	.+24     	; 0xb70 <__mulsf3+0x162>
     b58:	16 95       	lsr	r17
     b5a:	07 95       	ror	r16
     b5c:	f7 94       	ror	r15
     b5e:	e7 94       	ror	r14
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e8       	ldi	r27, 0x80	; 128
     b68:	e8 2a       	or	r14, r24
     b6a:	f9 2a       	or	r15, r25
     b6c:	0a 2b       	or	r16, r26
     b6e:	1b 2b       	or	r17, r27
     b70:	76 95       	lsr	r23
     b72:	67 95       	ror	r22
     b74:	57 95       	ror	r21
     b76:	47 95       	ror	r20
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	77 fd       	sbrc	r23, 7
     b7e:	e7 cf       	rjmp	.-50     	; 0xb4e <__mulsf3+0x140>
     b80:	0c c0       	rjmp	.+24     	; 0xb9a <__mulsf3+0x18c>
     b82:	44 0f       	add	r20, r20
     b84:	55 1f       	adc	r21, r21
     b86:	66 1f       	adc	r22, r22
     b88:	77 1f       	adc	r23, r23
     b8a:	17 fd       	sbrc	r17, 7
     b8c:	41 60       	ori	r20, 0x01	; 1
     b8e:	ee 0c       	add	r14, r14
     b90:	ff 1c       	adc	r15, r15
     b92:	00 1f       	adc	r16, r16
     b94:	11 1f       	adc	r17, r17
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	30 40       	sbci	r19, 0x00	; 0
     b9a:	40 30       	cpi	r20, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	59 07       	cpc	r21, r25
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	69 07       	cpc	r22, r25
     ba4:	90 e4       	ldi	r25, 0x40	; 64
     ba6:	79 07       	cpc	r23, r25
     ba8:	60 f3       	brcs	.-40     	; 0xb82 <__mulsf3+0x174>
     baa:	2b 8f       	std	Y+27, r18	; 0x1b
     bac:	3c 8f       	std	Y+28, r19	; 0x1c
     bae:	db 01       	movw	r26, r22
     bb0:	ca 01       	movw	r24, r20
     bb2:	8f 77       	andi	r24, 0x7F	; 127
     bb4:	90 70       	andi	r25, 0x00	; 0
     bb6:	a0 70       	andi	r26, 0x00	; 0
     bb8:	b0 70       	andi	r27, 0x00	; 0
     bba:	80 34       	cpi	r24, 0x40	; 64
     bbc:	91 05       	cpc	r25, r1
     bbe:	a1 05       	cpc	r26, r1
     bc0:	b1 05       	cpc	r27, r1
     bc2:	61 f4       	brne	.+24     	; 0xbdc <__mulsf3+0x1ce>
     bc4:	47 fd       	sbrc	r20, 7
     bc6:	0a c0       	rjmp	.+20     	; 0xbdc <__mulsf3+0x1ce>
     bc8:	e1 14       	cp	r14, r1
     bca:	f1 04       	cpc	r15, r1
     bcc:	01 05       	cpc	r16, r1
     bce:	11 05       	cpc	r17, r1
     bd0:	29 f0       	breq	.+10     	; 0xbdc <__mulsf3+0x1ce>
     bd2:	40 5c       	subi	r20, 0xC0	; 192
     bd4:	5f 4f       	sbci	r21, 0xFF	; 255
     bd6:	6f 4f       	sbci	r22, 0xFF	; 255
     bd8:	7f 4f       	sbci	r23, 0xFF	; 255
     bda:	40 78       	andi	r20, 0x80	; 128
     bdc:	1a 8e       	std	Y+26, r1	; 0x1a
     bde:	fe 17       	cp	r31, r30
     be0:	11 f0       	breq	.+4      	; 0xbe6 <__mulsf3+0x1d8>
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	8a 8f       	std	Y+26, r24	; 0x1a
     be6:	4d 8f       	std	Y+29, r20	; 0x1d
     be8:	5e 8f       	std	Y+30, r21	; 0x1e
     bea:	6f 8f       	std	Y+31, r22	; 0x1f
     bec:	78 a3       	std	Y+32, r23	; 0x20
     bee:	83 e0       	ldi	r24, 0x03	; 3
     bf0:	89 8f       	std	Y+25, r24	; 0x19
     bf2:	ce 01       	movw	r24, r28
     bf4:	49 96       	adiw	r24, 0x19	; 25
     bf6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__pack_f>
     bfa:	a0 96       	adiw	r28, 0x20	; 32
     bfc:	e2 e1       	ldi	r30, 0x12	; 18
     bfe:	0c 94 6f 09 	jmp	0x12de	; 0x12de <__epilogue_restores__>

00000c02 <__gtsf2>:
     c02:	a8 e1       	ldi	r26, 0x18	; 24
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e7 e0       	ldi	r30, 0x07	; 7
     c08:	f6 e0       	ldi	r31, 0x06	; 6
     c0a:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__prologue_saves__+0x18>
     c0e:	69 83       	std	Y+1, r22	; 0x01
     c10:	7a 83       	std	Y+2, r23	; 0x02
     c12:	8b 83       	std	Y+3, r24	; 0x03
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	2d 83       	std	Y+5, r18	; 0x05
     c18:	3e 83       	std	Y+6, r19	; 0x06
     c1a:	4f 83       	std	Y+7, r20	; 0x07
     c1c:	58 87       	std	Y+8, r21	; 0x08
     c1e:	89 e0       	ldi	r24, 0x09	; 9
     c20:	e8 2e       	mov	r14, r24
     c22:	f1 2c       	mov	r15, r1
     c24:	ec 0e       	add	r14, r28
     c26:	fd 1e       	adc	r15, r29
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	b7 01       	movw	r22, r14
     c2e:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     c32:	8e 01       	movw	r16, r28
     c34:	0f 5e       	subi	r16, 0xEF	; 239
     c36:	1f 4f       	sbci	r17, 0xFF	; 255
     c38:	ce 01       	movw	r24, r28
     c3a:	05 96       	adiw	r24, 0x05	; 5
     c3c:	b8 01       	movw	r22, r16
     c3e:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	82 30       	cpi	r24, 0x02	; 2
     c46:	40 f0       	brcs	.+16     	; 0xc58 <__gtsf2+0x56>
     c48:	89 89       	ldd	r24, Y+17	; 0x11
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	28 f0       	brcs	.+10     	; 0xc58 <__gtsf2+0x56>
     c4e:	c7 01       	movw	r24, r14
     c50:	b8 01       	movw	r22, r16
     c52:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fpcmp_parts_f>
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <__gtsf2+0x58>
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	68 96       	adiw	r28, 0x18	; 24
     c5c:	e6 e0       	ldi	r30, 0x06	; 6
     c5e:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__epilogue_restores__+0x18>

00000c62 <__gesf2>:
     c62:	a8 e1       	ldi	r26, 0x18	; 24
     c64:	b0 e0       	ldi	r27, 0x00	; 0
     c66:	e7 e3       	ldi	r30, 0x37	; 55
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__prologue_saves__+0x18>
     c6e:	69 83       	std	Y+1, r22	; 0x01
     c70:	7a 83       	std	Y+2, r23	; 0x02
     c72:	8b 83       	std	Y+3, r24	; 0x03
     c74:	9c 83       	std	Y+4, r25	; 0x04
     c76:	2d 83       	std	Y+5, r18	; 0x05
     c78:	3e 83       	std	Y+6, r19	; 0x06
     c7a:	4f 83       	std	Y+7, r20	; 0x07
     c7c:	58 87       	std	Y+8, r21	; 0x08
     c7e:	89 e0       	ldi	r24, 0x09	; 9
     c80:	e8 2e       	mov	r14, r24
     c82:	f1 2c       	mov	r15, r1
     c84:	ec 0e       	add	r14, r28
     c86:	fd 1e       	adc	r15, r29
     c88:	ce 01       	movw	r24, r28
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	b7 01       	movw	r22, r14
     c8e:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     c92:	8e 01       	movw	r16, r28
     c94:	0f 5e       	subi	r16, 0xEF	; 239
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	ce 01       	movw	r24, r28
     c9a:	05 96       	adiw	r24, 0x05	; 5
     c9c:	b8 01       	movw	r22, r16
     c9e:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     ca2:	89 85       	ldd	r24, Y+9	; 0x09
     ca4:	82 30       	cpi	r24, 0x02	; 2
     ca6:	40 f0       	brcs	.+16     	; 0xcb8 <__gesf2+0x56>
     ca8:	89 89       	ldd	r24, Y+17	; 0x11
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	28 f0       	brcs	.+10     	; 0xcb8 <__gesf2+0x56>
     cae:	c7 01       	movw	r24, r14
     cb0:	b8 01       	movw	r22, r16
     cb2:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fpcmp_parts_f>
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <__gesf2+0x58>
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	68 96       	adiw	r28, 0x18	; 24
     cbc:	e6 e0       	ldi	r30, 0x06	; 6
     cbe:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__epilogue_restores__+0x18>

00000cc2 <__ltsf2>:
     cc2:	a8 e1       	ldi	r26, 0x18	; 24
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e6       	ldi	r30, 0x67	; 103
     cc8:	f6 e0       	ldi	r31, 0x06	; 6
     cca:	0c 94 5f 09 	jmp	0x12be	; 0x12be <__prologue_saves__+0x18>
     cce:	69 83       	std	Y+1, r22	; 0x01
     cd0:	7a 83       	std	Y+2, r23	; 0x02
     cd2:	8b 83       	std	Y+3, r24	; 0x03
     cd4:	9c 83       	std	Y+4, r25	; 0x04
     cd6:	2d 83       	std	Y+5, r18	; 0x05
     cd8:	3e 83       	std	Y+6, r19	; 0x06
     cda:	4f 83       	std	Y+7, r20	; 0x07
     cdc:	58 87       	std	Y+8, r21	; 0x08
     cde:	89 e0       	ldi	r24, 0x09	; 9
     ce0:	e8 2e       	mov	r14, r24
     ce2:	f1 2c       	mov	r15, r1
     ce4:	ec 0e       	add	r14, r28
     ce6:	fd 1e       	adc	r15, r29
     ce8:	ce 01       	movw	r24, r28
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	b7 01       	movw	r22, r14
     cee:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     cf2:	8e 01       	movw	r16, r28
     cf4:	0f 5e       	subi	r16, 0xEF	; 239
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	ce 01       	movw	r24, r28
     cfa:	05 96       	adiw	r24, 0x05	; 5
     cfc:	b8 01       	movw	r22, r16
     cfe:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	40 f0       	brcs	.+16     	; 0xd18 <__ltsf2+0x56>
     d08:	89 89       	ldd	r24, Y+17	; 0x11
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	28 f0       	brcs	.+10     	; 0xd18 <__ltsf2+0x56>
     d0e:	c7 01       	movw	r24, r14
     d10:	b8 01       	movw	r22, r16
     d12:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__fpcmp_parts_f>
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <__ltsf2+0x58>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	68 96       	adiw	r28, 0x18	; 24
     d1c:	e6 e0       	ldi	r30, 0x06	; 6
     d1e:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__epilogue_restores__+0x18>

00000d22 <__fixsfsi>:
     d22:	ac e0       	ldi	r26, 0x0C	; 12
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e7 e9       	ldi	r30, 0x97	; 151
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <__prologue_saves__+0x20>
     d2e:	69 83       	std	Y+1, r22	; 0x01
     d30:	7a 83       	std	Y+2, r23	; 0x02
     d32:	8b 83       	std	Y+3, r24	; 0x03
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	ce 01       	movw	r24, r28
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	be 01       	movw	r22, r28
     d3c:	6b 5f       	subi	r22, 0xFB	; 251
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	0e 94 82 08 	call	0x1104	; 0x1104 <__unpack_f>
     d44:	8d 81       	ldd	r24, Y+5	; 0x05
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	61 f1       	breq	.+88     	; 0xda2 <__fixsfsi+0x80>
     d4a:	82 30       	cpi	r24, 0x02	; 2
     d4c:	50 f1       	brcs	.+84     	; 0xda2 <__fixsfsi+0x80>
     d4e:	84 30       	cpi	r24, 0x04	; 4
     d50:	21 f4       	brne	.+8      	; 0xd5a <__fixsfsi+0x38>
     d52:	8e 81       	ldd	r24, Y+6	; 0x06
     d54:	88 23       	and	r24, r24
     d56:	51 f1       	breq	.+84     	; 0xdac <__fixsfsi+0x8a>
     d58:	2e c0       	rjmp	.+92     	; 0xdb6 <__fixsfsi+0x94>
     d5a:	2f 81       	ldd	r18, Y+7	; 0x07
     d5c:	38 85       	ldd	r19, Y+8	; 0x08
     d5e:	37 fd       	sbrc	r19, 7
     d60:	20 c0       	rjmp	.+64     	; 0xda2 <__fixsfsi+0x80>
     d62:	6e 81       	ldd	r22, Y+6	; 0x06
     d64:	2f 31       	cpi	r18, 0x1F	; 31
     d66:	31 05       	cpc	r19, r1
     d68:	1c f0       	brlt	.+6      	; 0xd70 <__fixsfsi+0x4e>
     d6a:	66 23       	and	r22, r22
     d6c:	f9 f0       	breq	.+62     	; 0xdac <__fixsfsi+0x8a>
     d6e:	23 c0       	rjmp	.+70     	; 0xdb6 <__fixsfsi+0x94>
     d70:	8e e1       	ldi	r24, 0x1E	; 30
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	82 1b       	sub	r24, r18
     d76:	93 0b       	sbc	r25, r19
     d78:	29 85       	ldd	r18, Y+9	; 0x09
     d7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d7c:	4b 85       	ldd	r20, Y+11	; 0x0b
     d7e:	5c 85       	ldd	r21, Y+12	; 0x0c
     d80:	04 c0       	rjmp	.+8      	; 0xd8a <__fixsfsi+0x68>
     d82:	56 95       	lsr	r21
     d84:	47 95       	ror	r20
     d86:	37 95       	ror	r19
     d88:	27 95       	ror	r18
     d8a:	8a 95       	dec	r24
     d8c:	d2 f7       	brpl	.-12     	; 0xd82 <__fixsfsi+0x60>
     d8e:	66 23       	and	r22, r22
     d90:	b1 f0       	breq	.+44     	; 0xdbe <__fixsfsi+0x9c>
     d92:	50 95       	com	r21
     d94:	40 95       	com	r20
     d96:	30 95       	com	r19
     d98:	21 95       	neg	r18
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	4f 4f       	sbci	r20, 0xFF	; 255
     d9e:	5f 4f       	sbci	r21, 0xFF	; 255
     da0:	0e c0       	rjmp	.+28     	; 0xdbe <__fixsfsi+0x9c>
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	50 e0       	ldi	r21, 0x00	; 0
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <__fixsfsi+0x9c>
     dac:	2f ef       	ldi	r18, 0xFF	; 255
     dae:	3f ef       	ldi	r19, 0xFF	; 255
     db0:	4f ef       	ldi	r20, 0xFF	; 255
     db2:	5f e7       	ldi	r21, 0x7F	; 127
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <__fixsfsi+0x9c>
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e8       	ldi	r21, 0x80	; 128
     dbe:	b9 01       	movw	r22, r18
     dc0:	ca 01       	movw	r24, r20
     dc2:	2c 96       	adiw	r28, 0x0c	; 12
     dc4:	e2 e0       	ldi	r30, 0x02	; 2
     dc6:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__epilogue_restores__+0x20>

00000dca <__floatunsisf>:
     dca:	a8 e0       	ldi	r26, 0x08	; 8
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb ee       	ldi	r30, 0xEB	; 235
     dd0:	f6 e0       	ldi	r31, 0x06	; 6
     dd2:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__prologue_saves__+0x10>
     dd6:	7b 01       	movw	r14, r22
     dd8:	8c 01       	movw	r16, r24
     dda:	61 15       	cp	r22, r1
     ddc:	71 05       	cpc	r23, r1
     dde:	81 05       	cpc	r24, r1
     de0:	91 05       	cpc	r25, r1
     de2:	19 f4       	brne	.+6      	; 0xdea <__floatunsisf+0x20>
     de4:	82 e0       	ldi	r24, 0x02	; 2
     de6:	89 83       	std	Y+1, r24	; 0x01
     de8:	60 c0       	rjmp	.+192    	; 0xeaa <__floatunsisf+0xe0>
     dea:	83 e0       	ldi	r24, 0x03	; 3
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	8e e1       	ldi	r24, 0x1E	; 30
     df0:	c8 2e       	mov	r12, r24
     df2:	d1 2c       	mov	r13, r1
     df4:	dc 82       	std	Y+4, r13	; 0x04
     df6:	cb 82       	std	Y+3, r12	; 0x03
     df8:	ed 82       	std	Y+5, r14	; 0x05
     dfa:	fe 82       	std	Y+6, r15	; 0x06
     dfc:	0f 83       	std	Y+7, r16	; 0x07
     dfe:	18 87       	std	Y+8, r17	; 0x08
     e00:	c8 01       	movw	r24, r16
     e02:	b7 01       	movw	r22, r14
     e04:	0e 94 5e 07 	call	0xebc	; 0xebc <__clzsi2>
     e08:	fc 01       	movw	r30, r24
     e0a:	31 97       	sbiw	r30, 0x01	; 1
     e0c:	f7 ff       	sbrs	r31, 7
     e0e:	3b c0       	rjmp	.+118    	; 0xe86 <__floatunsisf+0xbc>
     e10:	22 27       	eor	r18, r18
     e12:	33 27       	eor	r19, r19
     e14:	2e 1b       	sub	r18, r30
     e16:	3f 0b       	sbc	r19, r31
     e18:	57 01       	movw	r10, r14
     e1a:	68 01       	movw	r12, r16
     e1c:	02 2e       	mov	r0, r18
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <__floatunsisf+0x5e>
     e20:	d6 94       	lsr	r13
     e22:	c7 94       	ror	r12
     e24:	b7 94       	ror	r11
     e26:	a7 94       	ror	r10
     e28:	0a 94       	dec	r0
     e2a:	d2 f7       	brpl	.-12     	; 0xe20 <__floatunsisf+0x56>
     e2c:	40 e0       	ldi	r20, 0x00	; 0
     e2e:	50 e0       	ldi	r21, 0x00	; 0
     e30:	60 e0       	ldi	r22, 0x00	; 0
     e32:	70 e0       	ldi	r23, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	04 c0       	rjmp	.+8      	; 0xe46 <__floatunsisf+0x7c>
     e3e:	88 0f       	add	r24, r24
     e40:	99 1f       	adc	r25, r25
     e42:	aa 1f       	adc	r26, r26
     e44:	bb 1f       	adc	r27, r27
     e46:	2a 95       	dec	r18
     e48:	d2 f7       	brpl	.-12     	; 0xe3e <__floatunsisf+0x74>
     e4a:	01 97       	sbiw	r24, 0x01	; 1
     e4c:	a1 09       	sbc	r26, r1
     e4e:	b1 09       	sbc	r27, r1
     e50:	8e 21       	and	r24, r14
     e52:	9f 21       	and	r25, r15
     e54:	a0 23       	and	r26, r16
     e56:	b1 23       	and	r27, r17
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	a1 05       	cpc	r26, r1
     e5c:	b1 05       	cpc	r27, r1
     e5e:	21 f0       	breq	.+8      	; 0xe68 <__floatunsisf+0x9e>
     e60:	41 e0       	ldi	r20, 0x01	; 1
     e62:	50 e0       	ldi	r21, 0x00	; 0
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	4a 29       	or	r20, r10
     e6a:	5b 29       	or	r21, r11
     e6c:	6c 29       	or	r22, r12
     e6e:	7d 29       	or	r23, r13
     e70:	4d 83       	std	Y+5, r20	; 0x05
     e72:	5e 83       	std	Y+6, r21	; 0x06
     e74:	6f 83       	std	Y+7, r22	; 0x07
     e76:	78 87       	std	Y+8, r23	; 0x08
     e78:	8e e1       	ldi	r24, 0x1E	; 30
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	8e 1b       	sub	r24, r30
     e7e:	9f 0b       	sbc	r25, r31
     e80:	9c 83       	std	Y+4, r25	; 0x04
     e82:	8b 83       	std	Y+3, r24	; 0x03
     e84:	12 c0       	rjmp	.+36     	; 0xeaa <__floatunsisf+0xe0>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	81 f0       	breq	.+32     	; 0xeaa <__floatunsisf+0xe0>
     e8a:	0e 2e       	mov	r0, r30
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <__floatunsisf+0xcc>
     e8e:	ee 0c       	add	r14, r14
     e90:	ff 1c       	adc	r15, r15
     e92:	00 1f       	adc	r16, r16
     e94:	11 1f       	adc	r17, r17
     e96:	0a 94       	dec	r0
     e98:	d2 f7       	brpl	.-12     	; 0xe8e <__floatunsisf+0xc4>
     e9a:	ed 82       	std	Y+5, r14	; 0x05
     e9c:	fe 82       	std	Y+6, r15	; 0x06
     e9e:	0f 83       	std	Y+7, r16	; 0x07
     ea0:	18 87       	std	Y+8, r17	; 0x08
     ea2:	ce 1a       	sub	r12, r30
     ea4:	df 0a       	sbc	r13, r31
     ea6:	dc 82       	std	Y+4, r13	; 0x04
     ea8:	cb 82       	std	Y+3, r12	; 0x03
     eaa:	1a 82       	std	Y+2, r1	; 0x02
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__pack_f>
     eb4:	28 96       	adiw	r28, 0x08	; 8
     eb6:	ea e0       	ldi	r30, 0x0A	; 10
     eb8:	0c 94 77 09 	jmp	0x12ee	; 0x12ee <__epilogue_restores__+0x10>

00000ebc <__clzsi2>:
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	7b 01       	movw	r14, r22
     ec6:	8c 01       	movw	r16, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	e8 16       	cp	r14, r24
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	f8 06       	cpc	r15, r24
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	08 07       	cpc	r16, r24
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	18 07       	cpc	r17, r24
     ed8:	88 f4       	brcc	.+34     	; 0xefc <__clzsi2+0x40>
     eda:	8f ef       	ldi	r24, 0xFF	; 255
     edc:	e8 16       	cp	r14, r24
     ede:	f1 04       	cpc	r15, r1
     ee0:	01 05       	cpc	r16, r1
     ee2:	11 05       	cpc	r17, r1
     ee4:	31 f0       	breq	.+12     	; 0xef2 <__clzsi2+0x36>
     ee6:	28 f0       	brcs	.+10     	; 0xef2 <__clzsi2+0x36>
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	17 c0       	rjmp	.+46     	; 0xf20 <__clzsi2+0x64>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	12 c0       	rjmp	.+36     	; 0xf20 <__clzsi2+0x64>
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	e8 16       	cp	r14, r24
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	f8 06       	cpc	r15, r24
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 07       	cpc	r16, r24
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	18 07       	cpc	r17, r24
     f0c:	28 f0       	brcs	.+10     	; 0xf18 <__clzsi2+0x5c>
     f0e:	88 e1       	ldi	r24, 0x18	; 24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	04 c0       	rjmp	.+8      	; 0xf20 <__clzsi2+0x64>
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	20 e2       	ldi	r18, 0x20	; 32
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	28 1b       	sub	r18, r24
     f2a:	39 0b       	sbc	r19, r25
     f2c:	4a 0b       	sbc	r20, r26
     f2e:	5b 0b       	sbc	r21, r27
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <__clzsi2+0x7e>
     f32:	16 95       	lsr	r17
     f34:	07 95       	ror	r16
     f36:	f7 94       	ror	r15
     f38:	e7 94       	ror	r14
     f3a:	8a 95       	dec	r24
     f3c:	d2 f7       	brpl	.-12     	; 0xf32 <__clzsi2+0x76>
     f3e:	f7 01       	movw	r30, r14
     f40:	e8 59       	subi	r30, 0x98	; 152
     f42:	ff 4f       	sbci	r31, 0xFF	; 255
     f44:	80 81       	ld	r24, Z
     f46:	28 1b       	sub	r18, r24
     f48:	31 09       	sbc	r19, r1
     f4a:	41 09       	sbc	r20, r1
     f4c:	51 09       	sbc	r21, r1
     f4e:	c9 01       	movw	r24, r18
     f50:	1f 91       	pop	r17
     f52:	0f 91       	pop	r16
     f54:	ff 90       	pop	r15
     f56:	ef 90       	pop	r14
     f58:	08 95       	ret

00000f5a <__pack_f>:
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	fc 01       	movw	r30, r24
     f66:	e4 80       	ldd	r14, Z+4	; 0x04
     f68:	f5 80       	ldd	r15, Z+5	; 0x05
     f6a:	06 81       	ldd	r16, Z+6	; 0x06
     f6c:	17 81       	ldd	r17, Z+7	; 0x07
     f6e:	d1 80       	ldd	r13, Z+1	; 0x01
     f70:	80 81       	ld	r24, Z
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	48 f4       	brcc	.+18     	; 0xf88 <__pack_f+0x2e>
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a0 e1       	ldi	r26, 0x10	; 16
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e8 2a       	or	r14, r24
     f80:	f9 2a       	or	r15, r25
     f82:	0a 2b       	or	r16, r26
     f84:	1b 2b       	or	r17, r27
     f86:	a5 c0       	rjmp	.+330    	; 0x10d2 <__pack_f+0x178>
     f88:	84 30       	cpi	r24, 0x04	; 4
     f8a:	09 f4       	brne	.+2      	; 0xf8e <__pack_f+0x34>
     f8c:	9f c0       	rjmp	.+318    	; 0x10cc <__pack_f+0x172>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	21 f4       	brne	.+8      	; 0xf9a <__pack_f+0x40>
     f92:	ee 24       	eor	r14, r14
     f94:	ff 24       	eor	r15, r15
     f96:	87 01       	movw	r16, r14
     f98:	05 c0       	rjmp	.+10     	; 0xfa4 <__pack_f+0x4a>
     f9a:	e1 14       	cp	r14, r1
     f9c:	f1 04       	cpc	r15, r1
     f9e:	01 05       	cpc	r16, r1
     fa0:	11 05       	cpc	r17, r1
     fa2:	19 f4       	brne	.+6      	; 0xfaa <__pack_f+0x50>
     fa4:	e0 e0       	ldi	r30, 0x00	; 0
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	96 c0       	rjmp	.+300    	; 0x10d6 <__pack_f+0x17c>
     faa:	62 81       	ldd	r22, Z+2	; 0x02
     fac:	73 81       	ldd	r23, Z+3	; 0x03
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	62 38       	cpi	r22, 0x82	; 130
     fb2:	79 07       	cpc	r23, r25
     fb4:	0c f0       	brlt	.+2      	; 0xfb8 <__pack_f+0x5e>
     fb6:	5b c0       	rjmp	.+182    	; 0x106e <__pack_f+0x114>
     fb8:	22 e8       	ldi	r18, 0x82	; 130
     fba:	3f ef       	ldi	r19, 0xFF	; 255
     fbc:	26 1b       	sub	r18, r22
     fbe:	37 0b       	sbc	r19, r23
     fc0:	2a 31       	cpi	r18, 0x1A	; 26
     fc2:	31 05       	cpc	r19, r1
     fc4:	2c f0       	brlt	.+10     	; 0xfd0 <__pack_f+0x76>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	2a c0       	rjmp	.+84     	; 0x1024 <__pack_f+0xca>
     fd0:	b8 01       	movw	r22, r16
     fd2:	a7 01       	movw	r20, r14
     fd4:	02 2e       	mov	r0, r18
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <__pack_f+0x86>
     fd8:	76 95       	lsr	r23
     fda:	67 95       	ror	r22
     fdc:	57 95       	ror	r21
     fde:	47 95       	ror	r20
     fe0:	0a 94       	dec	r0
     fe2:	d2 f7       	brpl	.-12     	; 0xfd8 <__pack_f+0x7e>
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	04 c0       	rjmp	.+8      	; 0xff6 <__pack_f+0x9c>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	aa 1f       	adc	r26, r26
     ff4:	bb 1f       	adc	r27, r27
     ff6:	2a 95       	dec	r18
     ff8:	d2 f7       	brpl	.-12     	; 0xfee <__pack_f+0x94>
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	a1 09       	sbc	r26, r1
     ffe:	b1 09       	sbc	r27, r1
    1000:	8e 21       	and	r24, r14
    1002:	9f 21       	and	r25, r15
    1004:	a0 23       	and	r26, r16
    1006:	b1 23       	and	r27, r17
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	a1 05       	cpc	r26, r1
    100c:	b1 05       	cpc	r27, r1
    100e:	21 f0       	breq	.+8      	; 0x1018 <__pack_f+0xbe>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 e0       	ldi	r26, 0x00	; 0
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	9a 01       	movw	r18, r20
    101a:	ab 01       	movw	r20, r22
    101c:	28 2b       	or	r18, r24
    101e:	39 2b       	or	r19, r25
    1020:	4a 2b       	or	r20, r26
    1022:	5b 2b       	or	r21, r27
    1024:	da 01       	movw	r26, r20
    1026:	c9 01       	movw	r24, r18
    1028:	8f 77       	andi	r24, 0x7F	; 127
    102a:	90 70       	andi	r25, 0x00	; 0
    102c:	a0 70       	andi	r26, 0x00	; 0
    102e:	b0 70       	andi	r27, 0x00	; 0
    1030:	80 34       	cpi	r24, 0x40	; 64
    1032:	91 05       	cpc	r25, r1
    1034:	a1 05       	cpc	r26, r1
    1036:	b1 05       	cpc	r27, r1
    1038:	39 f4       	brne	.+14     	; 0x1048 <__pack_f+0xee>
    103a:	27 ff       	sbrs	r18, 7
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <__pack_f+0xf6>
    103e:	20 5c       	subi	r18, 0xC0	; 192
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	4f 4f       	sbci	r20, 0xFF	; 255
    1044:	5f 4f       	sbci	r21, 0xFF	; 255
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__pack_f+0xf6>
    1048:	21 5c       	subi	r18, 0xC1	; 193
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	4f 4f       	sbci	r20, 0xFF	; 255
    104e:	5f 4f       	sbci	r21, 0xFF	; 255
    1050:	e0 e0       	ldi	r30, 0x00	; 0
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	20 30       	cpi	r18, 0x00	; 0
    1056:	a0 e0       	ldi	r26, 0x00	; 0
    1058:	3a 07       	cpc	r19, r26
    105a:	a0 e0       	ldi	r26, 0x00	; 0
    105c:	4a 07       	cpc	r20, r26
    105e:	a0 e4       	ldi	r26, 0x40	; 64
    1060:	5a 07       	cpc	r21, r26
    1062:	10 f0       	brcs	.+4      	; 0x1068 <__pack_f+0x10e>
    1064:	e1 e0       	ldi	r30, 0x01	; 1
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	79 01       	movw	r14, r18
    106a:	8a 01       	movw	r16, r20
    106c:	27 c0       	rjmp	.+78     	; 0x10bc <__pack_f+0x162>
    106e:	60 38       	cpi	r22, 0x80	; 128
    1070:	71 05       	cpc	r23, r1
    1072:	64 f5       	brge	.+88     	; 0x10cc <__pack_f+0x172>
    1074:	fb 01       	movw	r30, r22
    1076:	e1 58       	subi	r30, 0x81	; 129
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	d8 01       	movw	r26, r16
    107c:	c7 01       	movw	r24, r14
    107e:	8f 77       	andi	r24, 0x7F	; 127
    1080:	90 70       	andi	r25, 0x00	; 0
    1082:	a0 70       	andi	r26, 0x00	; 0
    1084:	b0 70       	andi	r27, 0x00	; 0
    1086:	80 34       	cpi	r24, 0x40	; 64
    1088:	91 05       	cpc	r25, r1
    108a:	a1 05       	cpc	r26, r1
    108c:	b1 05       	cpc	r27, r1
    108e:	39 f4       	brne	.+14     	; 0x109e <__pack_f+0x144>
    1090:	e7 fe       	sbrs	r14, 7
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <__pack_f+0x154>
    1094:	80 e4       	ldi	r24, 0x40	; 64
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <__pack_f+0x14c>
    109e:	8f e3       	ldi	r24, 0x3F	; 63
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e8 0e       	add	r14, r24
    10a8:	f9 1e       	adc	r15, r25
    10aa:	0a 1f       	adc	r16, r26
    10ac:	1b 1f       	adc	r17, r27
    10ae:	17 ff       	sbrs	r17, 7
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <__pack_f+0x162>
    10b2:	16 95       	lsr	r17
    10b4:	07 95       	ror	r16
    10b6:	f7 94       	ror	r15
    10b8:	e7 94       	ror	r14
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	87 e0       	ldi	r24, 0x07	; 7
    10be:	16 95       	lsr	r17
    10c0:	07 95       	ror	r16
    10c2:	f7 94       	ror	r15
    10c4:	e7 94       	ror	r14
    10c6:	8a 95       	dec	r24
    10c8:	d1 f7       	brne	.-12     	; 0x10be <__pack_f+0x164>
    10ca:	05 c0       	rjmp	.+10     	; 0x10d6 <__pack_f+0x17c>
    10cc:	ee 24       	eor	r14, r14
    10ce:	ff 24       	eor	r15, r15
    10d0:	87 01       	movw	r16, r14
    10d2:	ef ef       	ldi	r30, 0xFF	; 255
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	6e 2f       	mov	r22, r30
    10d8:	67 95       	ror	r22
    10da:	66 27       	eor	r22, r22
    10dc:	67 95       	ror	r22
    10de:	90 2f       	mov	r25, r16
    10e0:	9f 77       	andi	r25, 0x7F	; 127
    10e2:	d7 94       	ror	r13
    10e4:	dd 24       	eor	r13, r13
    10e6:	d7 94       	ror	r13
    10e8:	8e 2f       	mov	r24, r30
    10ea:	86 95       	lsr	r24
    10ec:	49 2f       	mov	r20, r25
    10ee:	46 2b       	or	r20, r22
    10f0:	58 2f       	mov	r21, r24
    10f2:	5d 29       	or	r21, r13
    10f4:	b7 01       	movw	r22, r14
    10f6:	ca 01       	movw	r24, r20
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	08 95       	ret

00001104 <__unpack_f>:
    1104:	fc 01       	movw	r30, r24
    1106:	db 01       	movw	r26, r22
    1108:	40 81       	ld	r20, Z
    110a:	51 81       	ldd	r21, Z+1	; 0x01
    110c:	22 81       	ldd	r18, Z+2	; 0x02
    110e:	62 2f       	mov	r22, r18
    1110:	6f 77       	andi	r22, 0x7F	; 127
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	22 1f       	adc	r18, r18
    1116:	22 27       	eor	r18, r18
    1118:	22 1f       	adc	r18, r18
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	89 2f       	mov	r24, r25
    111e:	88 0f       	add	r24, r24
    1120:	82 2b       	or	r24, r18
    1122:	28 2f       	mov	r18, r24
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	99 1f       	adc	r25, r25
    1128:	99 27       	eor	r25, r25
    112a:	99 1f       	adc	r25, r25
    112c:	11 96       	adiw	r26, 0x01	; 1
    112e:	9c 93       	st	X, r25
    1130:	11 97       	sbiw	r26, 0x01	; 1
    1132:	21 15       	cp	r18, r1
    1134:	31 05       	cpc	r19, r1
    1136:	a9 f5       	brne	.+106    	; 0x11a2 <__unpack_f+0x9e>
    1138:	41 15       	cp	r20, r1
    113a:	51 05       	cpc	r21, r1
    113c:	61 05       	cpc	r22, r1
    113e:	71 05       	cpc	r23, r1
    1140:	11 f4       	brne	.+4      	; 0x1146 <__unpack_f+0x42>
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	37 c0       	rjmp	.+110    	; 0x11b4 <__unpack_f+0xb0>
    1146:	82 e8       	ldi	r24, 0x82	; 130
    1148:	9f ef       	ldi	r25, 0xFF	; 255
    114a:	13 96       	adiw	r26, 0x03	; 3
    114c:	9c 93       	st	X, r25
    114e:	8e 93       	st	-X, r24
    1150:	12 97       	sbiw	r26, 0x02	; 2
    1152:	9a 01       	movw	r18, r20
    1154:	ab 01       	movw	r20, r22
    1156:	67 e0       	ldi	r22, 0x07	; 7
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	44 1f       	adc	r20, r20
    115e:	55 1f       	adc	r21, r21
    1160:	6a 95       	dec	r22
    1162:	d1 f7       	brne	.-12     	; 0x1158 <__unpack_f+0x54>
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	8c 93       	st	X, r24
    1168:	0d c0       	rjmp	.+26     	; 0x1184 <__unpack_f+0x80>
    116a:	22 0f       	add	r18, r18
    116c:	33 1f       	adc	r19, r19
    116e:	44 1f       	adc	r20, r20
    1170:	55 1f       	adc	r21, r21
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	8d 91       	ld	r24, X+
    1176:	9c 91       	ld	r25, X
    1178:	13 97       	sbiw	r26, 0x03	; 3
    117a:	01 97       	sbiw	r24, 0x01	; 1
    117c:	13 96       	adiw	r26, 0x03	; 3
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
    1182:	12 97       	sbiw	r26, 0x02	; 2
    1184:	20 30       	cpi	r18, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	38 07       	cpc	r19, r24
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	48 07       	cpc	r20, r24
    118e:	80 e4       	ldi	r24, 0x40	; 64
    1190:	58 07       	cpc	r21, r24
    1192:	58 f3       	brcs	.-42     	; 0x116a <__unpack_f+0x66>
    1194:	14 96       	adiw	r26, 0x04	; 4
    1196:	2d 93       	st	X+, r18
    1198:	3d 93       	st	X+, r19
    119a:	4d 93       	st	X+, r20
    119c:	5c 93       	st	X, r21
    119e:	17 97       	sbiw	r26, 0x07	; 7
    11a0:	08 95       	ret
    11a2:	2f 3f       	cpi	r18, 0xFF	; 255
    11a4:	31 05       	cpc	r19, r1
    11a6:	79 f4       	brne	.+30     	; 0x11c6 <__unpack_f+0xc2>
    11a8:	41 15       	cp	r20, r1
    11aa:	51 05       	cpc	r21, r1
    11ac:	61 05       	cpc	r22, r1
    11ae:	71 05       	cpc	r23, r1
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <__unpack_f+0xb4>
    11b2:	84 e0       	ldi	r24, 0x04	; 4
    11b4:	8c 93       	st	X, r24
    11b6:	08 95       	ret
    11b8:	64 ff       	sbrs	r22, 4
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <__unpack_f+0xbe>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	8c 93       	st	X, r24
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <__unpack_f+0xe2>
    11c2:	1c 92       	st	X, r1
    11c4:	10 c0       	rjmp	.+32     	; 0x11e6 <__unpack_f+0xe2>
    11c6:	2f 57       	subi	r18, 0x7F	; 127
    11c8:	30 40       	sbci	r19, 0x00	; 0
    11ca:	13 96       	adiw	r26, 0x03	; 3
    11cc:	3c 93       	st	X, r19
    11ce:	2e 93       	st	-X, r18
    11d0:	12 97       	sbiw	r26, 0x02	; 2
    11d2:	83 e0       	ldi	r24, 0x03	; 3
    11d4:	8c 93       	st	X, r24
    11d6:	87 e0       	ldi	r24, 0x07	; 7
    11d8:	44 0f       	add	r20, r20
    11da:	55 1f       	adc	r21, r21
    11dc:	66 1f       	adc	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	8a 95       	dec	r24
    11e2:	d1 f7       	brne	.-12     	; 0x11d8 <__unpack_f+0xd4>
    11e4:	70 64       	ori	r23, 0x40	; 64
    11e6:	14 96       	adiw	r26, 0x04	; 4
    11e8:	4d 93       	st	X+, r20
    11ea:	5d 93       	st	X+, r21
    11ec:	6d 93       	st	X+, r22
    11ee:	7c 93       	st	X, r23
    11f0:	17 97       	sbiw	r26, 0x07	; 7
    11f2:	08 95       	ret

000011f4 <__fpcmp_parts_f>:
    11f4:	1f 93       	push	r17
    11f6:	dc 01       	movw	r26, r24
    11f8:	fb 01       	movw	r30, r22
    11fa:	9c 91       	ld	r25, X
    11fc:	92 30       	cpi	r25, 0x02	; 2
    11fe:	08 f4       	brcc	.+2      	; 0x1202 <__fpcmp_parts_f+0xe>
    1200:	47 c0       	rjmp	.+142    	; 0x1290 <__fpcmp_parts_f+0x9c>
    1202:	80 81       	ld	r24, Z
    1204:	82 30       	cpi	r24, 0x02	; 2
    1206:	08 f4       	brcc	.+2      	; 0x120a <__fpcmp_parts_f+0x16>
    1208:	43 c0       	rjmp	.+134    	; 0x1290 <__fpcmp_parts_f+0x9c>
    120a:	94 30       	cpi	r25, 0x04	; 4
    120c:	51 f4       	brne	.+20     	; 0x1222 <__fpcmp_parts_f+0x2e>
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	1c 91       	ld	r17, X
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	99 f5       	brne	.+102    	; 0x127c <__fpcmp_parts_f+0x88>
    1216:	81 81       	ldd	r24, Z+1	; 0x01
    1218:	68 2f       	mov	r22, r24
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	61 1b       	sub	r22, r17
    121e:	71 09       	sbc	r23, r1
    1220:	3f c0       	rjmp	.+126    	; 0x12a0 <__fpcmp_parts_f+0xac>
    1222:	84 30       	cpi	r24, 0x04	; 4
    1224:	21 f0       	breq	.+8      	; 0x122e <__fpcmp_parts_f+0x3a>
    1226:	92 30       	cpi	r25, 0x02	; 2
    1228:	31 f4       	brne	.+12     	; 0x1236 <__fpcmp_parts_f+0x42>
    122a:	82 30       	cpi	r24, 0x02	; 2
    122c:	b9 f1       	breq	.+110    	; 0x129c <__fpcmp_parts_f+0xa8>
    122e:	81 81       	ldd	r24, Z+1	; 0x01
    1230:	88 23       	and	r24, r24
    1232:	89 f1       	breq	.+98     	; 0x1296 <__fpcmp_parts_f+0xa2>
    1234:	2d c0       	rjmp	.+90     	; 0x1290 <__fpcmp_parts_f+0x9c>
    1236:	11 96       	adiw	r26, 0x01	; 1
    1238:	1c 91       	ld	r17, X
    123a:	11 97       	sbiw	r26, 0x01	; 1
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	f1 f0       	breq	.+60     	; 0x127c <__fpcmp_parts_f+0x88>
    1240:	81 81       	ldd	r24, Z+1	; 0x01
    1242:	18 17       	cp	r17, r24
    1244:	d9 f4       	brne	.+54     	; 0x127c <__fpcmp_parts_f+0x88>
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	2d 91       	ld	r18, X+
    124a:	3c 91       	ld	r19, X
    124c:	13 97       	sbiw	r26, 0x03	; 3
    124e:	82 81       	ldd	r24, Z+2	; 0x02
    1250:	93 81       	ldd	r25, Z+3	; 0x03
    1252:	82 17       	cp	r24, r18
    1254:	93 07       	cpc	r25, r19
    1256:	94 f0       	brlt	.+36     	; 0x127c <__fpcmp_parts_f+0x88>
    1258:	28 17       	cp	r18, r24
    125a:	39 07       	cpc	r19, r25
    125c:	bc f0       	brlt	.+46     	; 0x128c <__fpcmp_parts_f+0x98>
    125e:	14 96       	adiw	r26, 0x04	; 4
    1260:	8d 91       	ld	r24, X+
    1262:	9d 91       	ld	r25, X+
    1264:	0d 90       	ld	r0, X+
    1266:	bc 91       	ld	r27, X
    1268:	a0 2d       	mov	r26, r0
    126a:	24 81       	ldd	r18, Z+4	; 0x04
    126c:	35 81       	ldd	r19, Z+5	; 0x05
    126e:	46 81       	ldd	r20, Z+6	; 0x06
    1270:	57 81       	ldd	r21, Z+7	; 0x07
    1272:	28 17       	cp	r18, r24
    1274:	39 07       	cpc	r19, r25
    1276:	4a 07       	cpc	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	18 f4       	brcc	.+6      	; 0x1282 <__fpcmp_parts_f+0x8e>
    127c:	11 23       	and	r17, r17
    127e:	41 f0       	breq	.+16     	; 0x1290 <__fpcmp_parts_f+0x9c>
    1280:	0a c0       	rjmp	.+20     	; 0x1296 <__fpcmp_parts_f+0xa2>
    1282:	82 17       	cp	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	a4 07       	cpc	r26, r20
    1288:	b5 07       	cpc	r27, r21
    128a:	40 f4       	brcc	.+16     	; 0x129c <__fpcmp_parts_f+0xa8>
    128c:	11 23       	and	r17, r17
    128e:	19 f0       	breq	.+6      	; 0x1296 <__fpcmp_parts_f+0xa2>
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <__fpcmp_parts_f+0xac>
    1296:	6f ef       	ldi	r22, 0xFF	; 255
    1298:	7f ef       	ldi	r23, 0xFF	; 255
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <__fpcmp_parts_f+0xac>
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	cb 01       	movw	r24, r22
    12a2:	1f 91       	pop	r17
    12a4:	08 95       	ret

000012a6 <__prologue_saves__>:
    12a6:	2f 92       	push	r2
    12a8:	3f 92       	push	r3
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	ca 1b       	sub	r28, r26
    12d0:	db 0b       	sbc	r29, r27
    12d2:	0f b6       	in	r0, 0x3f	; 63
    12d4:	f8 94       	cli
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	cd bf       	out	0x3d, r28	; 61
    12dc:	09 94       	ijmp

000012de <__epilogue_restores__>:
    12de:	2a 88       	ldd	r2, Y+18	; 0x12
    12e0:	39 88       	ldd	r3, Y+17	; 0x11
    12e2:	48 88       	ldd	r4, Y+16	; 0x10
    12e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    12e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    12e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    12ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    12ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    12f0:	b9 84       	ldd	r11, Y+9	; 0x09
    12f2:	c8 84       	ldd	r12, Y+8	; 0x08
    12f4:	df 80       	ldd	r13, Y+7	; 0x07
    12f6:	ee 80       	ldd	r14, Y+6	; 0x06
    12f8:	fd 80       	ldd	r15, Y+5	; 0x05
    12fa:	0c 81       	ldd	r16, Y+4	; 0x04
    12fc:	1b 81       	ldd	r17, Y+3	; 0x03
    12fe:	aa 81       	ldd	r26, Y+2	; 0x02
    1300:	b9 81       	ldd	r27, Y+1	; 0x01
    1302:	ce 0f       	add	r28, r30
    1304:	d1 1d       	adc	r29, r1
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	ed 01       	movw	r28, r26
    1312:	08 95       	ret

00001314 <_exit>:
    1314:	f8 94       	cli

00001316 <__stop_program>:
    1316:	ff cf       	rjmp	.-2      	; 0x1316 <__stop_program>
