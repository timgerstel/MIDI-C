
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000017  00800060  00800060  0000065c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000020f  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b3a  00000000  00000000  0000088b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000029d  00000000  00000000  000013c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000aa6  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000190  00000000  00000000  00002108  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ad  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000357  00000000  00000000  00002545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <main>
  74:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <modify>:
}


void modify(){
	//analogLEDTest();
}
  7c:	08 95       	ret

0000007e <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  7e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  80:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
}
  8a:	08 95       	ret

0000008c <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  90:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  92:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  98:	11 ba       	out	0x11, r1	; 17
}
  9a:	08 95       	ret

0000009c <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  9c:	87 e4       	ldi	r24, 0x47	; 71
  9e:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	86 b9       	out	0x06, r24	; 6
}
  a4:	08 95       	ret

000000a6 <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  a6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	89 bf       	out	0x39, r24	; 57
	sei();
  b0:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  b2:	80 ea       	ldi	r24, 0xA0	; 160
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	99 bd       	out	0x29, r25	; 41
  b8:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  ba:	1d bc       	out	0x2d, r1	; 45
  bc:	1c bc       	out	0x2c, r1	; 44

}
  be:	08 95       	ret

000000c0 <ledOFF>:
}



void ledOFF(){
	PORTB = 0x00;
  c0:	18 ba       	out	0x18, r1	; 24
}
  c2:	08 95       	ret

000000c4 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  c4:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  ca:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  cc:	24 b1       	in	r18, 0x04	; 4
  ce:	35 b1       	in	r19, 0x05	; 5
}
  d0:	c9 01       	movw	r24, r18
  d2:	08 95       	ret

000000d4 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
  d4:	0e 94 62 00 	call	0xc4	; 0xc4 <ReadADC>
  d8:	9c 01       	movw	r18, r24
  da:	90 93 71 00 	sts	0x0071, r25
  de:	80 93 70 00 	sts	0x0070, r24
		if (adc_value > 30){
  e2:	8f 31       	cpi	r24, 0x1F	; 31
  e4:	91 05       	cpc	r25, r1
  e6:	28 f1       	brcs	.+74     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
  ec:	2d 33       	cpi	r18, 0x3D	; 61
  ee:	31 05       	cpc	r19, r1
  f0:	00 f1       	brcs	.+64     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
  f6:	2b 35       	cpi	r18, 0x5B	; 91
  f8:	31 05       	cpc	r19, r1
  fa:	d8 f0       	brcs	.+54     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
 100:	29 37       	cpi	r18, 0x79	; 121
 102:	31 05       	cpc	r19, r1
 104:	b0 f0       	brcs	.+44     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
 10a:	27 39       	cpi	r18, 0x97	; 151
 10c:	31 05       	cpc	r19, r1
 10e:	88 f0       	brcs	.+34     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
 114:	25 3b       	cpi	r18, 0xB5	; 181
 116:	31 05       	cpc	r19, r1
 118:	60 f0       	brcs	.+24     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
 11e:	23 3d       	cpi	r18, 0xD3	; 211
 120:	31 05       	cpc	r19, r1
 122:	38 f0       	brcs	.+14     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
 128:	21 3f       	cpi	r18, 0xF1	; 241
 12a:	31 05       	cpc	r19, r1
 12c:	10 f0       	brcs	.+4      	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
 132:	20 3f       	cpi	r18, 0xF0	; 240
 134:	31 05       	cpc	r19, r1
 136:	10 f0       	brcs	.+4      	; 0x13c <analogLEDTest+0x68>
			PORTB = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret

0000013e <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 142:	8c b9       	out	0x0c, r24	; 12
}
 144:	08 95       	ret

00000146 <midiTransitTest>:
	start_addr = 0;
	
}

void midiTransitTest(){
	midi_Transmit(144);
 146:	80 e9       	ldi	r24, 0x90	; 144
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(67);
 14e:	83 e4       	ldi	r24, 0x43	; 67
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 156:	84 e6       	ldi	r24, 0x64	; 100
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 15e:	88 e8       	ldi	r24, 0x88	; 136
 160:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 162:	24 e6       	ldi	r18, 0x64	; 100
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	31 97       	sbiw	r30, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16e:	d9 f7       	brne	.-10     	; 0x166 <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
 170:	80 e8       	ldi	r24, 0x80	; 128
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(67);
 178:	83 e4       	ldi	r24, 0x43	; 67
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 180:	84 e6       	ldi	r24, 0x64	; 100
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 188:	88 e8       	ldi	r24, 0x88	; 136
 18a:	93 e1       	ldi	r25, 0x13	; 19
 18c:	24 e6       	ldi	r18, 0x64	; 100
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	31 97       	sbiw	r30, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 196:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 198:	d9 f7       	brne	.-10     	; 0x190 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
 19a:	80 e9       	ldi	r24, 0x90	; 144
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(98);
 1a2:	82 e6       	ldi	r24, 0x62	; 98
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 1b2:	88 e8       	ldi	r24, 0x88	; 136
 1b4:	93 e1       	ldi	r25, 0x13	; 19
 1b6:	24 e6       	ldi	r18, 0x64	; 100
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c2:	d9 f7       	brne	.-10     	; 0x1ba <midiTransitTest+0x74>
	_delay_ms(500);
	midi_Transmit(128);
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(98);
 1cc:	82 e6       	ldi	r24, 0x62	; 98
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 1d4:	84 e6       	ldi	r24, 0x64	; 100
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 1dc:	88 e8       	ldi	r24, 0x88	; 136
 1de:	93 e1       	ldi	r25, 0x13	; 19
 1e0:	24 e6       	ldi	r18, 0x64	; 100
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	f9 01       	movw	r30, r18
 1e6:	31 97       	sbiw	r30, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ec:	d9 f7       	brne	.-10     	; 0x1e4 <midiTransitTest+0x9e>
	_delay_ms(500);
	

	midi_Transmit(144);
 1ee:	80 e9       	ldi	r24, 0x90	; 144
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(60);
 1f6:	8c e3       	ldi	r24, 0x3C	; 60
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 1fe:	84 e6       	ldi	r24, 0x64	; 100
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 206:	88 e8       	ldi	r24, 0x88	; 136
 208:	93 e1       	ldi	r25, 0x13	; 19
 20a:	24 e6       	ldi	r18, 0x64	; 100
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	f9 01       	movw	r30, r18
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <midiTransitTest+0xca>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 214:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 216:	d9 f7       	brne	.-10     	; 0x20e <midiTransitTest+0xc8>
	_delay_ms(500);
	midi_Transmit(128);
 218:	80 e8       	ldi	r24, 0x80	; 128
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(60);
 220:	8c e3       	ldi	r24, 0x3C	; 60
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
	midi_Transmit(100);
 228:	84 e6       	ldi	r24, 0x64	; 100
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 230:	88 e8       	ldi	r24, 0x88	; 136
 232:	93 e1       	ldi	r25, 0x13	; 19
 234:	24 e6       	ldi	r18, 0x64	; 100
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	f9 01       	movw	r30, r18
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <midiTransitTest+0xf4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 23e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 240:	d9 f7       	brne	.-10     	; 0x238 <midiTransitTest+0xf2>
	_delay_ms(500);

}
 242:	08 95       	ret

00000244 <playSong>:
	}
	
	
}

void playSong(){
 244:	0f 93       	push	r16
 246:	1f 93       	push	r17
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	42 c0       	rjmp	.+132    	; 0x2d2 <playSong+0x8e>
	
	while(start_addr < stop_addr){
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e0       	ldi	r21, 0x00	; 0
	}
	
	
}

void playSong(){
 252:	ca 01       	movw	r24, r20
 254:	82 0f       	add	r24, r18
 256:	93 1f       	adc	r25, r19
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 258:	e1 99       	sbic	0x1c, 1	; 28
 25a:	fe cf       	rjmp	.-4      	; 0x258 <playSong+0x14>
	/* Set up address register */
	EEAR = uiAddress;
 25c:	9f bb       	out	0x1f, r25	; 31
 25e:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 260:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 262:	8d b3       	in	r24, 0x1d	; 29
	while(start_addr < stop_addr){
		

		for(int i = 0; i < 5; i++){

			midiData[i] = EEPROM_read(start_addr);
 264:	fa 01       	movw	r30, r20
 266:	ee 58       	subi	r30, 0x8E	; 142
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	80 83       	st	Z, r24
			start_addr++;
			if(i==4){
 26c:	44 30       	cpi	r20, 0x04	; 4
 26e:	51 05       	cpc	r21, r1
 270:	11 f4       	brne	.+4      	; 0x276 <playSong+0x32>
				TCNT1 = 0;
 272:	1d bc       	out	0x2d, r1	; 45
 274:	1c bc       	out	0x2c, r1	; 44
void playSong(){
	
	while(start_addr < stop_addr){
		

		for(int i = 0; i < 5; i++){
 276:	4f 5f       	subi	r20, 0xFF	; 255
 278:	5f 4f       	sbci	r21, 0xFF	; 255
 27a:	45 30       	cpi	r20, 0x05	; 5
 27c:	51 05       	cpc	r21, r1
 27e:	49 f7       	brne	.-46     	; 0x252 <playSong+0xe>
 280:	2b 5f       	subi	r18, 0xFB	; 251
 282:	3f 4f       	sbci	r19, 0xFF	; 255
 284:	30 93 6d 00 	sts	0x006D, r19
 288:	20 93 6c 00 	sts	0x006C, r18
			}
		}

		uint16_t lsb = midiData[3];
		uint16_t msb = midiData[4];
		uint16_t timeInterval = lsb + (0xFF00 & (msb << 8) );
 28c:	10 91 76 00 	lds	r17, 0x0076
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	80 91 75 00 	lds	r24, 0x0075
 296:	a8 01       	movw	r20, r16
 298:	48 0f       	add	r20, r24
 29a:	51 1d       	adc	r21, r1
		
		if(start_addr != 5){
 29c:	25 30       	cpi	r18, 0x05	; 5
 29e:	31 05       	cpc	r19, r1
 2a0:	29 f0       	breq	.+10     	; 0x2ac <playSong+0x68>
			while(TCNT1 < timeInterval);
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	9d b5       	in	r25, 0x2d	; 45
 2a6:	84 17       	cp	r24, r20
 2a8:	95 07       	cpc	r25, r21
 2aa:	d8 f3       	brcs	.-10     	; 0x2a2 <playSong+0x5e>
 2ac:	c0 e0       	ldi	r28, 0x00	; 0
 2ae:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 2b0:	fe 01       	movw	r30, r28
 2b2:	ee 58       	subi	r30, 0x8E	; 142
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	80 81       	ld	r24, Z
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
			if(i==1){
 2be:	c1 30       	cpi	r28, 0x01	; 1
 2c0:	d1 05       	cpc	r29, r1
 2c2:	19 f4       	brne	.+6      	; 0x2ca <playSong+0x86>
				PORTB = midiData[i];
 2c4:	80 91 73 00 	lds	r24, 0x0073
 2c8:	88 bb       	out	0x18, r24	; 24
		
		if(start_addr != 5){
			while(TCNT1 < timeInterval);
		}
		
		for(int i = 0; i < 3; i++){
 2ca:	21 96       	adiw	r28, 0x01	; 1
 2cc:	c3 30       	cpi	r28, 0x03	; 3
 2ce:	d1 05       	cpc	r29, r1
 2d0:	79 f7       	brne	.-34     	; 0x2b0 <playSong+0x6c>
	
}

void playSong(){
	
	while(start_addr < stop_addr){
 2d2:	20 91 6c 00 	lds	r18, 0x006C
 2d6:	30 91 6d 00 	lds	r19, 0x006D
 2da:	80 91 6e 00 	lds	r24, 0x006E
 2de:	90 91 6f 00 	lds	r25, 0x006F
 2e2:	28 17       	cp	r18, r24
 2e4:	39 07       	cpc	r19, r25
 2e6:	08 f4       	brcc	.+2      	; 0x2ea <playSong+0xa6>
 2e8:	b2 cf       	rjmp	.-156    	; 0x24e <playSong+0xa>
			if(i==1){
				PORTB = midiData[i];
			}
		}
	}
	start_addr = 0;
 2ea:	10 92 6d 00 	sts	0x006D, r1
 2ee:	10 92 6c 00 	sts	0x006C, r1
	
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	08 95       	ret

000002fc <playBack>:
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 2fc:	0e 94 22 01 	call	0x244	; 0x244 <playSong>
}
 300:	08 95       	ret

00000302 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 302:	ca 9b       	sbis	0x19, 2	; 25
 304:	02 c0       	rjmp	.+4      	; 0x30a <midi_Receive+0x8>
 306:	5f 9b       	sbis	0x0b, 7	; 11
 308:	fc cf       	rjmp	.-8      	; 0x302 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 30a:	8c b1       	in	r24, 0x0c	; 12
}
 30c:	08 95       	ret

0000030e <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 30e:	01 c0       	rjmp	.+2      	; 0x312 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 310:	8c b1       	in	r24, 0x0c	; 12
 312:	5f 99       	sbic	0x0b, 7	; 11
 314:	fd cf       	rjmp	.-6      	; 0x310 <midi_Flush+0x2>
}
 316:	08 95       	ret

00000318 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 318:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 31a:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 31c:	08 95       	ret

0000031e <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 31e:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 320:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 322:	8c b5       	in	r24, 0x2c	; 44
 324:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 326:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 328:	08 95       	ret

0000032a <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 32a:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 32c:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 32e:	9d bd       	out	0x2d, r25	; 45
 330:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 332:	2f bf       	out	0x3f, r18	; 63
}
 334:	08 95       	ret

00000336 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 336:	e1 99       	sbic	0x1c, 1	; 28
 338:	fe cf       	rjmp	.-4      	; 0x336 <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 33a:	9f bb       	out	0x1f, r25	; 31
 33c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 33e:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 340:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 342:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 344:	08 95       	ret

00000346 <writeSong2>:
	PORTB = EEPROM_read(9);
	_delay_ms(500);
}


void writeSong2(){
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	20 e0       	ldi	r18, 0x00	; 0
 34c:	30 e0       	ldi	r19, 0x00	; 0
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while( (PINA&0x04)&&(!(UCSRA & (1<<RXC)) ));
 34e:	ca 9b       	sbis	0x19, 2	; 25
 350:	02 c0       	rjmp	.+4      	; 0x356 <writeSong2+0x10>
 352:	5f 9b       	sbis	0x0b, 7	; 11
 354:	fc cf       	rjmp	.-8      	; 0x34e <writeSong2+0x8>

	/* get and return data from buffer */
	return UDR;
 356:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 358:	f9 01       	movw	r30, r18
 35a:	ee 58       	subi	r30, 0x8E	; 142
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	80 83       	st	Z, r24
		if(i==0){
 360:	21 15       	cp	r18, r1
 362:	31 05       	cpc	r19, r1
 364:	39 f4       	brne	.+14     	; 0x374 <writeSong2+0x2e>
			 lsb = TCNT1&0xFF;
 366:	8c b5       	in	r24, 0x2c	; 44
 368:	9d b5       	in	r25, 0x2d	; 45
 36a:	48 2f       	mov	r20, r24
			 msb = (TCNT1>>8);
 36c:	8c b5       	in	r24, 0x2c	; 44
 36e:	9d b5       	in	r25, 0x2d	; 45
			 TCNT1 = 0;
 370:	1d bc       	out	0x2d, r1	; 45
 372:	1c bc       	out	0x2c, r1	; 44


void writeSong2(){
	uint8_t lsb;
	uint8_t msb;
	for(int i = 0; i <3; i++){
 374:	2f 5f       	subi	r18, 0xFF	; 255
 376:	3f 4f       	sbci	r19, 0xFF	; 255
 378:	23 30       	cpi	r18, 0x03	; 3
 37a:	31 05       	cpc	r19, r1
 37c:	44 f3       	brlt	.-48     	; 0x34e <writeSong2+0x8>
			 lsb = TCNT1&0xFF;
			 msb = (TCNT1>>8);
			 TCNT1 = 0;
		}
	}
	midiData[3]= lsb;
 37e:	40 93 75 00 	sts	0x0075, r20
	midiData[4]= msb;
 382:	90 93 76 00 	sts	0x0076, r25
	PORTB = midiData[1];
 386:	80 91 73 00 	lds	r24, 0x0073
 38a:	88 bb       	out	0x18, r24	; 24
	// unsigned char lsb = (0xFF & ((interval << 8) >> 8));
	// unsigned char msb = (0xFF & ((interval >> 8)));
	// midiData[3] = lsb;
	// midiData[4] = msb;

	stop_addr = eeprom_address;
 38c:	80 91 6a 00 	lds	r24, 0x006A
 390:	90 91 6b 00 	lds	r25, 0x006B
 394:	90 93 6f 00 	sts	0x006F, r25
 398:	80 93 6e 00 	sts	0x006E, r24
 39c:	c2 e7       	ldi	r28, 0x72	; 114
 39e:	d0 e0       	ldi	r29, 0x00	; 0
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 3a0:	80 91 6a 00 	lds	r24, 0x006A
 3a4:	90 91 6b 00 	lds	r25, 0x006B
 3a8:	69 91       	ld	r22, Y+
 3aa:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
		eeprom_address++;		
 3ae:	80 91 6a 00 	lds	r24, 0x006A
 3b2:	90 91 6b 00 	lds	r25, 0x006B
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 6b 00 	sts	0x006B, r25
 3bc:	80 93 6a 00 	sts	0x006A, r24
	// unsigned char msb = (0xFF & ((interval >> 8)));
	// midiData[3] = lsb;
	// midiData[4] = msb;

	stop_addr = eeprom_address;
	for(int j= 0; j < 5; j++){
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	c7 37       	cpi	r28, 0x77	; 119
 3c4:	d8 07       	cpc	r29, r24
 3c6:	61 f7       	brne	.-40     	; 0x3a0 <writeSong2+0x5a>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
	
}
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 3ce:	0e 94 a3 01 	call	0x346	; 0x346 <writeSong2>
	//midiTransitTest();
}
 3d2:	08 95       	ret

000003d4 <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
 3d4:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
 3d6:	8f ef       	ldi	r24, 0xFF	; 255
 3d8:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 3da:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 3dc:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 3de:	17 e0       	ldi	r17, 0x07	; 7
 3e0:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 3e2:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 3e4:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 3e8:	87 e4       	ldi	r24, 0x47	; 71
 3ea:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 3ec:	87 e8       	ldi	r24, 0x87	; 135
 3ee:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 3f0:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 3f2:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 3f4:	88 e1       	ldi	r24, 0x18	; 24
 3f6:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 3f8:	86 e8       	ldi	r24, 0x86	; 134
 3fa:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
 3fc:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
 3fe:	99 b3       	in	r25, 0x19	; 25
 400:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
 402:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
 404:	82 ff       	sbrs	r24, 2
 406:	05 c0       	rjmp	.+10     	; 0x412 <main+0x3e>
 408:	99 23       	and	r25, r25
 40a:	c1 f7       	brne	.-16     	; 0x3fc <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
 40c:	0e 94 a3 01 	call	0x346	; 0x346 <writeSong2>
 410:	f5 cf       	rjmp	.-22     	; 0x3fc <main+0x28>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
 412:	99 23       	and	r25, r25
 414:	99 f3       	breq	.-26     	; 0x3fc <main+0x28>
			if (mod){ // Modify Mode
 416:	20 fd       	sbrc	r18, 0
 418:	f1 cf       	rjmp	.-30     	; 0x3fc <main+0x28>
}

void playBack(){
	//midiTransitTest();
	//eeprom_test();
	playSong();
 41a:	0e 94 22 01 	call	0x244	; 0x244 <playSong>
 41e:	ee cf       	rjmp	.-36     	; 0x3fc <main+0x28>

00000420 <eeprom_test>:




void eeprom_test(){
	EEPROM_write(1, 1);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	61 e0       	ldi	r22, 0x01	; 1
 426:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(2, 2);
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	62 e0       	ldi	r22, 0x02	; 2
 430:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(3, 3);
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	63 e0       	ldi	r22, 0x03	; 3
 43a:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(4, 4);
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	64 e0       	ldi	r22, 0x04	; 4
 444:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(5, 5);
 448:	85 e0       	ldi	r24, 0x05	; 5
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	65 e0       	ldi	r22, 0x05	; 5
 44e:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(6, 6);
 452:	86 e0       	ldi	r24, 0x06	; 6
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	66 e0       	ldi	r22, 0x06	; 6
 458:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(7, 7);
 45c:	87 e0       	ldi	r24, 0x07	; 7
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	67 e0       	ldi	r22, 0x07	; 7
 462:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(8, 8);
 466:	88 e0       	ldi	r24, 0x08	; 8
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	68 e0       	ldi	r22, 0x08	; 8
 46c:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	EEPROM_write(9, 9);
 470:	89 e0       	ldi	r24, 0x09	; 9
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	69 e0       	ldi	r22, 0x09	; 9
 476:	0e 94 9b 01 	call	0x336	; 0x336 <EEPROM_write>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 47a:	e1 99       	sbic	0x1c, 1	; 28
 47c:	fe cf       	rjmp	.-4      	; 0x47a <eeprom_test+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	9f bb       	out	0x1f, r25	; 31
 484:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 486:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 488:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(5, 5);
	EEPROM_write(6, 6);
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
 48a:	88 bb       	out	0x18, r24	; 24
 48c:	88 e8       	ldi	r24, 0x88	; 136
 48e:	93 e1       	ldi	r25, 0x13	; 19
 490:	24 e6       	ldi	r18, 0x64	; 100
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	f9 01       	movw	r30, r18
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <eeprom_test+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 49a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 49c:	d9 f7       	brne	.-10     	; 0x494 <eeprom_test+0x74>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 49e:	e1 99       	sbic	0x1c, 1	; 28
 4a0:	fe cf       	rjmp	.-4      	; 0x49e <eeprom_test+0x7e>
	/* Set up address register */
	EEAR = uiAddress;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	9f bb       	out	0x1f, r25	; 31
 4a8:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 4aa:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 4ac:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(7, 7);
	EEPROM_write(8, 8);
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
 4ae:	88 bb       	out	0x18, r24	; 24
 4b0:	88 e8       	ldi	r24, 0x88	; 136
 4b2:	93 e1       	ldi	r25, 0x13	; 19
 4b4:	24 e6       	ldi	r18, 0x64	; 100
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	f9 01       	movw	r30, r18
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <eeprom_test+0x9a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c0:	d9 f7       	brne	.-10     	; 0x4b8 <eeprom_test+0x98>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 4c2:	e1 99       	sbic	0x1c, 1	; 28
 4c4:	fe cf       	rjmp	.-4      	; 0x4c2 <eeprom_test+0xa2>
	/* Set up address register */
	EEAR = uiAddress;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	9f bb       	out	0x1f, r25	; 31
 4cc:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 4ce:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 4d0:	8d b3       	in	r24, 0x1d	; 29
	EEPROM_write(9, 9);
	PORTB = EEPROM_read(1);
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
 4d2:	88 bb       	out	0x18, r24	; 24
 4d4:	88 e8       	ldi	r24, 0x88	; 136
 4d6:	93 e1       	ldi	r25, 0x13	; 19
 4d8:	24 e6       	ldi	r18, 0x64	; 100
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	31 97       	sbiw	r30, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <eeprom_test+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <eeprom_test+0xbc>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 4e6:	e1 99       	sbic	0x1c, 1	; 28
 4e8:	fe cf       	rjmp	.-4      	; 0x4e6 <eeprom_test+0xc6>
	/* Set up address register */
	EEAR = uiAddress;
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	9f bb       	out	0x1f, r25	; 31
 4f0:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 4f2:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 4f4:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(2);
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
 4f6:	88 bb       	out	0x18, r24	; 24
 4f8:	88 e8       	ldi	r24, 0x88	; 136
 4fa:	93 e1       	ldi	r25, 0x13	; 19
 4fc:	24 e6       	ldi	r18, 0x64	; 100
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	f9 01       	movw	r30, r18
 502:	31 97       	sbiw	r30, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <eeprom_test+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 506:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 508:	d9 f7       	brne	.-10     	; 0x500 <eeprom_test+0xe0>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 50a:	e1 99       	sbic	0x1c, 1	; 28
 50c:	fe cf       	rjmp	.-4      	; 0x50a <eeprom_test+0xea>
	/* Set up address register */
	EEAR = uiAddress;
 50e:	85 e0       	ldi	r24, 0x05	; 5
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	9f bb       	out	0x1f, r25	; 31
 514:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 516:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 518:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(3);
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
 51a:	88 bb       	out	0x18, r24	; 24
 51c:	88 e8       	ldi	r24, 0x88	; 136
 51e:	93 e1       	ldi	r25, 0x13	; 19
 520:	24 e6       	ldi	r18, 0x64	; 100
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	f9 01       	movw	r30, r18
 526:	31 97       	sbiw	r30, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <eeprom_test+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 52a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 52c:	d9 f7       	brne	.-10     	; 0x524 <eeprom_test+0x104>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 52e:	e1 99       	sbic	0x1c, 1	; 28
 530:	fe cf       	rjmp	.-4      	; 0x52e <eeprom_test+0x10e>
	/* Set up address register */
	EEAR = uiAddress;
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	9f bb       	out	0x1f, r25	; 31
 538:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 53a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 53c:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(4);
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
 53e:	88 bb       	out	0x18, r24	; 24
 540:	88 e8       	ldi	r24, 0x88	; 136
 542:	93 e1       	ldi	r25, 0x13	; 19
 544:	24 e6       	ldi	r18, 0x64	; 100
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	31 97       	sbiw	r30, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <eeprom_test+0x12a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 54e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 550:	d9 f7       	brne	.-10     	; 0x548 <eeprom_test+0x128>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 552:	e1 99       	sbic	0x1c, 1	; 28
 554:	fe cf       	rjmp	.-4      	; 0x552 <eeprom_test+0x132>
	/* Set up address register */
	EEAR = uiAddress;
 556:	87 e0       	ldi	r24, 0x07	; 7
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	9f bb       	out	0x1f, r25	; 31
 55c:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 55e:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 560:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(5);
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
 562:	88 bb       	out	0x18, r24	; 24
 564:	88 e8       	ldi	r24, 0x88	; 136
 566:	93 e1       	ldi	r25, 0x13	; 19
 568:	24 e6       	ldi	r18, 0x64	; 100
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	31 97       	sbiw	r30, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <eeprom_test+0x14e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 572:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 574:	d9 f7       	brne	.-10     	; 0x56c <eeprom_test+0x14c>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 576:	e1 99       	sbic	0x1c, 1	; 28
 578:	fe cf       	rjmp	.-4      	; 0x576 <eeprom_test+0x156>
	/* Set up address register */
	EEAR = uiAddress;
 57a:	88 e0       	ldi	r24, 0x08	; 8
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9f bb       	out	0x1f, r25	; 31
 580:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 582:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 584:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(6);
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
 586:	88 bb       	out	0x18, r24	; 24
 588:	88 e8       	ldi	r24, 0x88	; 136
 58a:	93 e1       	ldi	r25, 0x13	; 19
 58c:	24 e6       	ldi	r18, 0x64	; 100
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	f9 01       	movw	r30, r18
 592:	31 97       	sbiw	r30, 0x01	; 1
 594:	f1 f7       	brne	.-4      	; 0x592 <eeprom_test+0x172>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 596:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 598:	d9 f7       	brne	.-10     	; 0x590 <eeprom_test+0x170>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 59a:	e1 99       	sbic	0x1c, 1	; 28
 59c:	fe cf       	rjmp	.-4      	; 0x59a <eeprom_test+0x17a>
	/* Set up address register */
	EEAR = uiAddress;
 59e:	89 e0       	ldi	r24, 0x09	; 9
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	9f bb       	out	0x1f, r25	; 31
 5a4:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 5a6:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 5a8:	8d b3       	in	r24, 0x1d	; 29
	_delay_ms(500);
	PORTB = EEPROM_read(7);
	_delay_ms(500);
	PORTB = EEPROM_read(8);
	_delay_ms(500);
	PORTB = EEPROM_read(9);
 5aa:	88 bb       	out	0x18, r24	; 24
 5ac:	88 e8       	ldi	r24, 0x88	; 136
 5ae:	93 e1       	ldi	r25, 0x13	; 19
 5b0:	24 e6       	ldi	r18, 0x64	; 100
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	31 97       	sbiw	r30, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <eeprom_test+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5ba:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5bc:	d9 f7       	brne	.-10     	; 0x5b4 <eeprom_test+0x194>
	_delay_ms(500);
}
 5be:	08 95       	ret

000005c0 <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 5c0:	e1 99       	sbic	0x1c, 1	; 28
 5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 5c4:	9f bb       	out	0x1f, r25	; 31
 5c6:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 5c8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 5ca:	8d b3       	in	r24, 0x1d	; 29
}
 5cc:	08 95       	ret

000005ce <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 5d8:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
 5da:	0f 90       	pop	r0
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	0f 90       	pop	r0
 5e0:	1f 90       	pop	r1
 5e2:	18 95       	reti

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
