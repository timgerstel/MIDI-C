
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001a  00800060  00800060  000003ce  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001dd  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000501  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000201  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000541  00000000  00000000  00000ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000140  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001f3  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000073  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 37       	cpi	r26, 0x7A	; 122
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 01 	call	0x2a0	; 0x2a0 <main>
  74:	0c 94 ab 01 	jmp	0x356	; 0x356 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  7c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  7e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  80:	88 e1       	ldi	r24, 0x18	; 24
  82:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  84:	86 e8       	ldi	r24, 0x86	; 134
  86:	80 bd       	out	0x20, r24	; 32
}
  88:	08 95       	ret

0000008a <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  8e:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  90:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  92:	87 e0       	ldi	r24, 0x07	; 7
  94:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  96:	11 ba       	out	0x11, r1	; 17
}
  98:	08 95       	ret

0000009a <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  9a:	87 e4       	ldi	r24, 0x47	; 71
  9c:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  9e:	87 e8       	ldi	r24, 0x87	; 135
  a0:	86 b9       	out	0x06, r24	; 6
}
  a2:	08 95       	ret

000000a4 <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  a4:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  aa:	88 e0       	ldi	r24, 0x08	; 8
  ac:	89 bf       	out	0x39, r24	; 57
	sei();
  ae:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  b0:	80 ea       	ldi	r24, 0xA0	; 160
  b2:	97 e0       	ldi	r25, 0x07	; 7
  b4:	99 bd       	out	0x29, r25	; 41
  b6:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  b8:	1d bc       	out	0x2d, r1	; 45
  ba:	1c bc       	out	0x2c, r1	; 44

}
  bc:	08 95       	ret

000000be <ledOFF>:
	start_addr = 0;
	
}

void ledOFF(){
	PORTB = 0x00;
  be:	18 ba       	out	0x18, r1	; 24
}
  c0:	08 95       	ret

000000c2 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  c2:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c4:	34 9b       	sbis	0x06, 4	; 6
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  c8:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  ca:	24 b1       	in	r18, 0x04	; 4
  cc:	35 b1       	in	r19, 0x05	; 5
}
  ce:	c9 01       	movw	r24, r18
  d0:	08 95       	ret

000000d2 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
  d2:	0e 94 61 00 	call	0xc2	; 0xc2 <ReadADC>
  d6:	9c 01       	movw	r18, r24
  d8:	90 93 71 00 	sts	0x0071, r25
  dc:	80 93 70 00 	sts	0x0070, r24
		if (adc_value > 30){
  e0:	8f 31       	cpi	r24, 0x1F	; 31
  e2:	91 05       	cpc	r25, r1
  e4:	28 f1       	brcs	.+74     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
  ea:	2d 33       	cpi	r18, 0x3D	; 61
  ec:	31 05       	cpc	r19, r1
  ee:	00 f1       	brcs	.+64     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
  f4:	2b 35       	cpi	r18, 0x5B	; 91
  f6:	31 05       	cpc	r19, r1
  f8:	d8 f0       	brcs	.+54     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
  fe:	29 37       	cpi	r18, 0x79	; 121
 100:	31 05       	cpc	r19, r1
 102:	b0 f0       	brcs	.+44     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
 104:	88 e0       	ldi	r24, 0x08	; 8
 106:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
 108:	27 39       	cpi	r18, 0x97	; 151
 10a:	31 05       	cpc	r19, r1
 10c:	88 f0       	brcs	.+34     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
 112:	25 3b       	cpi	r18, 0xB5	; 181
 114:	31 05       	cpc	r19, r1
 116:	60 f0       	brcs	.+24     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
 11c:	23 3d       	cpi	r18, 0xD3	; 211
 11e:	31 05       	cpc	r19, r1
 120:	38 f0       	brcs	.+14     	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
 122:	80 e4       	ldi	r24, 0x40	; 64
 124:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
 126:	21 3f       	cpi	r18, 0xF1	; 241
 128:	31 05       	cpc	r19, r1
 12a:	10 f0       	brcs	.+4      	; 0x130 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
 12c:	80 e8       	ldi	r24, 0x80	; 128
 12e:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
 130:	20 3f       	cpi	r18, 0xF0	; 240
 132:	31 05       	cpc	r19, r1
 134:	10 f0       	brcs	.+4      	; 0x13a <analogLEDTest+0x68>
			PORTB = 0xFF;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	88 bb       	out	0x18, r24	; 24
 13a:	08 95       	ret

0000013c <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
 13c:	5d 9b       	sbis	0x0b, 5	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 140:	8c b9       	out	0x0c, r24	; 12
}
 142:	08 95       	ret

00000144 <playBack>:
		eeprom_address++;		
	}
	
}

void playBack(){
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	3c c0       	rjmp	.+120    	; 0x1c6 <playBack+0x82>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 14e:	e1 99       	sbic	0x1c, 1	; 28
 150:	fe cf       	rjmp	.-4      	; 0x14e <playBack+0xa>
	/* Set up address register */
	EEAR = uiAddress;
 152:	3f bb       	out	0x1f, r19	; 31
 154:	2e bb       	out	0x1e, r18	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 156:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 158:	8d b3       	in	r24, 0x1d	; 29

void playBack(){
	
	while(start_addr < stop_addr){
		for(int i = 0; i < 5; i++){
			midiData[i] = EEPROM_read(start_addr);
 15a:	81 93       	st	Z+, r24
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
}

void playBack(){
	
	while(start_addr < stop_addr){
		for(int i = 0; i < 5; i++){
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	e9 37       	cpi	r30, 0x79	; 121
 164:	f8 07       	cpc	r31, r24
 166:	99 f7       	brne	.-26     	; 0x14e <playBack+0xa>
 168:	4b 5f       	subi	r20, 0xFB	; 251
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	50 93 6d 00 	sts	0x006D, r21
 170:	40 93 6c 00 	sts	0x006C, r20
			midiData[i] = EEPROM_read(start_addr);
			start_addr++;
		}
		unsigned char lsb = midiData[3];
		unsigned char msb = midiData[4];
		unsigned int interval = ((0x00FF & msb) << 8) + lsb;
 174:	10 91 78 00 	lds	r17, 0x0078
 178:	00 e0       	ldi	r16, 0x00	; 0
 17a:	80 91 77 00 	lds	r24, 0x0077
 17e:	e8 01       	movw	r28, r16
 180:	c8 0f       	add	r28, r24
 182:	d1 1d       	adc	r29, r1
		if(mod){
 184:	80 91 72 00 	lds	r24, 0x0072
 188:	88 23       	and	r24, r24
 18a:	39 f0       	breq	.+14     	; 0x19a <playBack+0x56>
			interval = interval / ReadADC();
 18c:	0e 94 61 00 	call	0xc2	; 0xc2 <ReadADC>
 190:	bc 01       	movw	r22, r24
 192:	ce 01       	movw	r24, r28
 194:	0e 94 97 01 	call	0x32e	; 0x32e <__udivmodhi4>
 198:	eb 01       	movw	r28, r22
		}
		TCNT1 = 0;
 19a:	1d bc       	out	0x2d, r1	; 45
 19c:	1c bc       	out	0x2c, r1	; 44
		while(TCNT1 < interval);
 19e:	8c b5       	in	r24, 0x2c	; 44
 1a0:	9d b5       	in	r25, 0x2d	; 45
 1a2:	8c 17       	cp	r24, r28
 1a4:	9d 07       	cpc	r25, r29
 1a6:	d8 f3       	brcs	.-10     	; 0x19e <playBack+0x5a>
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 1a8:	80 91 74 00 	lds	r24, 0x0074
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 9e 00 	call	0x13c	; 0x13c <midi_Transmit>
 1b2:	80 91 75 00 	lds	r24, 0x0075
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 9e 00 	call	0x13c	; 0x13c <midi_Transmit>
 1bc:	80 91 76 00 	lds	r24, 0x0076
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 9e 00 	call	0x13c	; 0x13c <midi_Transmit>
	
}

void playBack(){
	
	while(start_addr < stop_addr){
 1c6:	40 91 6c 00 	lds	r20, 0x006C
 1ca:	50 91 6d 00 	lds	r21, 0x006D
 1ce:	80 91 6e 00 	lds	r24, 0x006E
 1d2:	90 91 6f 00 	lds	r25, 0x006F
 1d6:	48 17       	cp	r20, r24
 1d8:	59 07       	cpc	r21, r25
 1da:	20 f4       	brcc	.+8      	; 0x1e4 <playBack+0xa0>
 1dc:	e4 e7       	ldi	r30, 0x74	; 116
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	9a 01       	movw	r18, r20
 1e2:	b5 cf       	rjmp	.-150    	; 0x14e <playBack+0xa>
		while(TCNT1 < interval);
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
		}
	}
	start_addr = 0;
 1e4:	10 92 6d 00 	sts	0x006D, r1
 1e8:	10 92 6c 00 	sts	0x006C, r1
	
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	08 95       	ret

000001f6 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
 1f6:	5f 9b       	sbis	0x0b, 7	; 11
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 1fa:	8c b1       	in	r24, 0x0c	; 12
}
 1fc:	08 95       	ret

000001fe <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 1fe:	01 c0       	rjmp	.+2      	; 0x202 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 200:	8c b1       	in	r24, 0x0c	; 12
 202:	5f 99       	sbic	0x0b, 7	; 11
 204:	fd cf       	rjmp	.-6      	; 0x200 <midi_Flush+0x2>
}
 206:	08 95       	ret

00000208 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 208:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 20a:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 20c:	08 95       	ret

0000020e <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 20e:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 210:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 212:	8c b5       	in	r24, 0x2c	; 44
 214:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 216:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 218:	08 95       	ret

0000021a <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 21a:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 21c:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 21e:	9d bd       	out	0x2d, r25	; 45
 220:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 222:	2f bf       	out	0x3f, r18	; 63
}
 224:	08 95       	ret

00000226 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 226:	e1 99       	sbic	0x1c, 1	; 28
 228:	fe cf       	rjmp	.-4      	; 0x226 <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 22a:	9f bb       	out	0x1f, r25	; 31
 22c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 22e:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 230:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 232:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 234:	08 95       	ret

00000236 <record>:
	TCNT1 = 0;

}

/***** Create Methods *****/
void record(){
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
	unsigned int interval;
	TCNT1 = 0;
 23a:	1d bc       	out	0x2d, r1	; 45
 23c:	1c bc       	out	0x2c, r1	; 44
 23e:	c4 e7       	ldi	r28, 0x74	; 116
 240:	d0 e0       	ldi	r29, 0x00	; 0
 242:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
 244:	5f 9b       	sbis	0x0b, 7	; 11
 246:	fe cf       	rjmp	.-4      	; 0x244 <record+0xe>

	/* get and return data from buffer */
	return UDR;
 248:	8c b1       	in	r24, 0x0c	; 12
/***** Create Methods *****/
void record(){
	unsigned int interval;
	TCNT1 = 0;
	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 24a:	81 93       	st	Z+, r24

/***** Create Methods *****/
void record(){
	unsigned int interval;
	TCNT1 = 0;
	for(int i = 0; i <3; i++){
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	e7 37       	cpi	r30, 0x77	; 119
 250:	f8 07       	cpc	r31, r24
 252:	c1 f7       	brne	.-16     	; 0x244 <record+0xe>
		midiData[i] = midi_Receive();
	}
	PORTB = midiData[1];
 254:	80 91 75 00 	lds	r24, 0x0075
 258:	88 bb       	out	0x18, r24	; 24
	
	interval = TCNT1;
 25a:	8c b5       	in	r24, 0x2c	; 44
 25c:	9d b5       	in	r25, 0x2d	; 45
	unsigned char lsb = (0xFF & ((interval << 8) >> 8));
	unsigned char msb = (0xFF & ((interval >> 8)));
	midiData[3] = lsb;
 25e:	80 83       	st	Z, r24
	midiData[4] = msb;
 260:	91 83       	std	Z+1, r25	; 0x01

	stop_addr = eeprom_address;
 262:	80 91 6a 00 	lds	r24, 0x006A
 266:	90 91 6b 00 	lds	r25, 0x006B
 26a:	90 93 6f 00 	sts	0x006F, r25
 26e:	80 93 6e 00 	sts	0x006E, r24
	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 272:	80 91 6a 00 	lds	r24, 0x006A
 276:	90 91 6b 00 	lds	r25, 0x006B
 27a:	69 91       	ld	r22, Y+
 27c:	0e 94 13 01 	call	0x226	; 0x226 <EEPROM_write>
		eeprom_address++;		
 280:	80 91 6a 00 	lds	r24, 0x006A
 284:	90 91 6b 00 	lds	r25, 0x006B
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	90 93 6b 00 	sts	0x006B, r25
 28e:	80 93 6a 00 	sts	0x006A, r24
	unsigned char msb = (0xFF & ((interval >> 8)));
	midiData[3] = lsb;
	midiData[4] = msb;

	stop_addr = eeprom_address;
	for(int j= 0; j < 5; j++){
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	c9 37       	cpi	r28, 0x79	; 121
 296:	d8 07       	cpc	r29, r24
 298:	61 f7       	brne	.-40     	; 0x272 <record+0x3c>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
 2a0:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
 2a2:	8f ef       	ldi	r24, 0xFF	; 255
 2a4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 2a6:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 2a8:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 2aa:	17 e0       	ldi	r17, 0x07	; 7
 2ac:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 2ae:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 2b0:	0e 94 52 00 	call	0xa4	; 0xa4 <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 2b4:	87 e4       	ldi	r24, 0x47	; 71
 2b6:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 2b8:	87 e8       	ldi	r24, 0x87	; 135
 2ba:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 2bc:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 2be:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 2c0:	88 e1       	ldi	r24, 0x18	; 24
 2c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 2c4:	86 e8       	ldi	r24, 0x86	; 134
 2c6:	80 bd       	out	0x20, r24	; 32
   setupPins();
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

	rec = PINA & 0x04;
 2c8:	89 b3       	in	r24, 0x19	; 25
 2ca:	84 70       	andi	r24, 0x04	; 4
 2cc:	80 93 79 00 	sts	0x0079, r24
	play = PINA & 0x02;
 2d0:	89 b3       	in	r24, 0x19	; 25
 2d2:	82 70       	andi	r24, 0x02	; 2
 2d4:	80 93 73 00 	sts	0x0073, r24
	mod = PINA & 0x01;
 2d8:	89 b3       	in	r24, 0x19	; 25
 2da:	81 70       	andi	r24, 0x01	; 1
 2dc:	80 93 72 00 	sts	0x0072, r24

    while(1){
		if(rec && !play){
 2e0:	80 91 79 00 	lds	r24, 0x0079
 2e4:	88 23       	and	r24, r24
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <main+0x54>
 2e8:	80 91 73 00 	lds	r24, 0x0073
 2ec:	88 23       	and	r24, r24
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <main+0x54>
			record();
 2f0:	0e 94 1b 01 	call	0x236	; 0x236 <record>
		}
		if(play && !rec){
 2f4:	80 91 73 00 	lds	r24, 0x0073
 2f8:	88 23       	and	r24, r24
 2fa:	91 f3       	breq	.-28     	; 0x2e0 <main+0x40>
 2fc:	80 91 79 00 	lds	r24, 0x0079
 300:	88 23       	and	r24, r24
 302:	71 f7       	brne	.-36     	; 0x2e0 <main+0x40>
			playBack();
 304:	0e 94 a2 00 	call	0x144	; 0x144 <playBack>
 308:	eb cf       	rjmp	.-42     	; 0x2e0 <main+0x40>

0000030a <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 30a:	e1 99       	sbic	0x1c, 1	; 28
 30c:	fe cf       	rjmp	.-4      	; 0x30a <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 30e:	9f bb       	out	0x1f, r25	; 31
 310:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 312:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 314:	8d b3       	in	r24, 0x1d	; 29
}
 316:	08 95       	ret

00000318 <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 322:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
}
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__udivmodhi4>:
 32e:	aa 1b       	sub	r26, r26
 330:	bb 1b       	sub	r27, r27
 332:	51 e1       	ldi	r21, 0x11	; 17
 334:	07 c0       	rjmp	.+14     	; 0x344 <__udivmodhi4_ep>

00000336 <__udivmodhi4_loop>:
 336:	aa 1f       	adc	r26, r26
 338:	bb 1f       	adc	r27, r27
 33a:	a6 17       	cp	r26, r22
 33c:	b7 07       	cpc	r27, r23
 33e:	10 f0       	brcs	.+4      	; 0x344 <__udivmodhi4_ep>
 340:	a6 1b       	sub	r26, r22
 342:	b7 0b       	sbc	r27, r23

00000344 <__udivmodhi4_ep>:
 344:	88 1f       	adc	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	5a 95       	dec	r21
 34a:	a9 f7       	brne	.-22     	; 0x336 <__udivmodhi4_loop>
 34c:	80 95       	com	r24
 34e:	90 95       	com	r25
 350:	bc 01       	movw	r22, r24
 352:	cd 01       	movw	r24, r26
 354:	08 95       	ret

00000356 <_exit>:
 356:	f8 94       	cli

00000358 <__stop_program>:
 358:	ff cf       	rjmp	.-2      	; 0x358 <__stop_program>
