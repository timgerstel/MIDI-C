
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00001294  00001328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800168  00800168  00001430  2**0
                  ALLOC
  3 .debug_aranges 000001c0  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003ed  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a13  00000000  00000000  000019dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001569  00000000  00000000  000043f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001973  00000000  00000000  00005959  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  000072cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000562  00000000  00000000  0000761c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b99  00000000  00000000  00007b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00008717  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a2 38       	cpi	r26, 0x82	; 130
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e9       	ldi	r30, 0x94	; 148
      78:	f2 e1       	ldi	r31, 0x12	; 18
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
      8a:	0c 94 48 09 	jmp	0x1290	; 0x1290 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <modify>:
}


void modify(){
	//analogLEDTest();
}
      92:	08 95       	ret

00000094 <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
      94:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
      96:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
      98:	88 e1       	ldi	r24, 0x18	; 24
      9a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
      9c:	86 e8       	ldi	r24, 0x86	; 134
      9e:	80 bd       	out	0x20, r24	; 32
}
      a0:	08 95       	ret

000000a2 <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
      a2:	8f ef       	ldi	r24, 0xFF	; 255
      a4:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
      a6:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
      a8:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
      aa:	87 e0       	ldi	r24, 0x07	; 7
      ac:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
      ae:	11 ba       	out	0x11, r1	; 17
}
      b0:	08 95       	ret

000000b2 <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
      b2:	87 e4       	ldi	r24, 0x47	; 71
      b4:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
      b6:	87 e8       	ldi	r24, 0x87	; 135
      b8:	86 b9       	out	0x06, r24	; 6
}
      ba:	08 95       	ret

000000bc <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
      bc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
      be:	85 e0       	ldi	r24, 0x05	; 5
      c0:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
      c2:	88 e0       	ldi	r24, 0x08	; 8
      c4:	89 bf       	out	0x39, r24	; 57
	sei();
      c6:	78 94       	sei
	OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
      c8:	82 e4       	ldi	r24, 0x42	; 66
      ca:	9f e0       	ldi	r25, 0x0F	; 15
      cc:	9b bd       	out	0x2b, r25	; 43
      ce:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
      d0:	80 ea       	ldi	r24, 0xA0	; 160
      d2:	97 e0       	ldi	r25, 0x07	; 7
      d4:	99 bd       	out	0x29, r25	; 41
      d6:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
      d8:	1d bc       	out	0x2d, r1	; 45
      da:	1c bc       	out	0x2c, r1	; 44

}
      dc:	08 95       	ret

000000de <playTimer>:
	}
	
}

void playTimer(){
	while((TIFR & (1<<OCF1A)) == 0);// wait till the timer overflow flag is SET
      de:	08 b6       	in	r0, 0x38	; 56
      e0:	04 fe       	sbrs	r0, 4
      e2:	fd cf       	rjmp	.-6      	; 0xde <playTimer>
		PORTB ^= 0xFF;
      e4:	88 b3       	in	r24, 0x18	; 24
      e6:	80 95       	com	r24
      e8:	88 bb       	out	0x18, r24	; 24
		TCNT1 = 0; 
      ea:	1d bc       	out	0x2d, r1	; 45
      ec:	1c bc       	out	0x2c, r1	; 44
		TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
      ee:	88 b7       	in	r24, 0x38	; 56
      f0:	80 61       	ori	r24, 0x10	; 16
      f2:	88 bf       	out	0x38, r24	; 56
}
      f4:	08 95       	ret

000000f6 <wait>:
	_delay_ms(1000);
}


void wait(int time)
{
      f6:	af 92       	push	r10
      f8:	bf 92       	push	r11
      fa:	cf 92       	push	r12
      fc:	df 92       	push	r13
      fe:	ef 92       	push	r14
     100:	ff 92       	push	r15
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
   _delay_ms(time);
     106:	aa 27       	eor	r26, r26
     108:	97 fd       	sbrc	r25, 7
     10a:	a0 95       	com	r26
     10c:	ba 2f       	mov	r27, r26
     10e:	bc 01       	movw	r22, r24
     110:	cd 01       	movw	r24, r26
     112:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__floatsisf>
     116:	5b 01       	movw	r10, r22
     118:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     11a:	20 e0       	ldi	r18, 0x00	; 0
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	4a e7       	ldi	r20, 0x7A	; 122
     120:	53 e4       	ldi	r21, 0x43	; 67
     122:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
     126:	7b 01       	movw	r14, r22
     128:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     12a:	20 e0       	ldi	r18, 0x00	; 0
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	40 e8       	ldi	r20, 0x80	; 128
     130:	5f e3       	ldi	r21, 0x3F	; 63
     132:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ltsf2>
     136:	88 23       	and	r24, r24
     138:	1c f4       	brge	.+6      	; 0x140 <wait+0x4a>
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	70 e0       	ldi	r23, 0x00	; 0
     13e:	24 c0       	rjmp	.+72     	; 0x188 <wait+0x92>
		__ticks = 1;
	else if (__tmp > 65535)
     140:	c8 01       	movw	r24, r16
     142:	b7 01       	movw	r22, r14
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	3f ef       	ldi	r19, 0xFF	; 255
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	57 e4       	ldi	r21, 0x47	; 71
     14c:	0e 94 61 05 	call	0xac2	; 0xac2 <__gtsf2>
     150:	18 16       	cp	r1, r24
     152:	b4 f4       	brge	.+44     	; 0x180 <wait+0x8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     154:	c6 01       	movw	r24, r12
     156:	b5 01       	movw	r22, r10
     158:	20 e0       	ldi	r18, 0x00	; 0
     15a:	30 e0       	ldi	r19, 0x00	; 0
     15c:	40 e2       	ldi	r20, 0x20	; 32
     15e:	51 e4       	ldi	r21, 0x41	; 65
     160:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
     164:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     168:	89 e1       	ldi	r24, 0x19	; 25
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	05 c0       	rjmp	.+10     	; 0x178 <wait+0x82>
     16e:	fc 01       	movw	r30, r24
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <wait+0x7a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     174:	61 50       	subi	r22, 0x01	; 1
     176:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     178:	61 15       	cp	r22, r1
     17a:	71 05       	cpc	r23, r1
     17c:	c1 f7       	brne	.-16     	; 0x16e <wait+0x78>
     17e:	07 c0       	rjmp	.+14     	; 0x18e <wait+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     180:	c8 01       	movw	r24, r16
     182:	b7 01       	movw	r22, r14
     184:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
     188:	cb 01       	movw	r24, r22
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <wait+0x94>
}
     18e:	1f 91       	pop	r17
     190:	0f 91       	pop	r16
     192:	ff 90       	pop	r15
     194:	ef 90       	pop	r14
     196:	df 90       	pop	r13
     198:	cf 90       	pop	r12
     19a:	bf 90       	pop	r11
     19c:	af 90       	pop	r10
     19e:	08 95       	ret

000001a0 <ledOFF>:

void ledOFF(){
	PORTB = 0x00;
     1a0:	18 ba       	out	0x18, r1	; 24
}
     1a2:	08 95       	ret

000001a4 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
     1a4:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
     1a6:	34 9b       	sbis	0x06, 4	; 6
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
     1aa:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
     1ac:	24 b1       	in	r18, 0x04	; 4
     1ae:	35 b1       	in	r19, 0x05	; 5
}
     1b0:	c9 01       	movw	r24, r18
     1b2:	08 95       	ret

000001b4 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
     1b4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <ReadADC>
     1b8:	9c 01       	movw	r18, r24
     1ba:	90 93 77 01 	sts	0x0177, r25
     1be:	80 93 76 01 	sts	0x0176, r24
		if (adc_value > 30){
     1c2:	8f 31       	cpi	r24, 0x1F	; 31
     1c4:	91 05       	cpc	r25, r1
     1c6:	28 f1       	brcs	.+74     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
     1cc:	2d 33       	cpi	r18, 0x3D	; 61
     1ce:	31 05       	cpc	r19, r1
     1d0:	00 f1       	brcs	.+64     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
     1d6:	2b 35       	cpi	r18, 0x5B	; 91
     1d8:	31 05       	cpc	r19, r1
     1da:	d8 f0       	brcs	.+54     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
     1dc:	84 e0       	ldi	r24, 0x04	; 4
     1de:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
     1e0:	29 37       	cpi	r18, 0x79	; 121
     1e2:	31 05       	cpc	r19, r1
     1e4:	b0 f0       	brcs	.+44     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
     1e6:	88 e0       	ldi	r24, 0x08	; 8
     1e8:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
     1ea:	27 39       	cpi	r18, 0x97	; 151
     1ec:	31 05       	cpc	r19, r1
     1ee:	88 f0       	brcs	.+34     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
     1f0:	80 e1       	ldi	r24, 0x10	; 16
     1f2:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
     1f4:	25 3b       	cpi	r18, 0xB5	; 181
     1f6:	31 05       	cpc	r19, r1
     1f8:	60 f0       	brcs	.+24     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
     1fa:	80 e2       	ldi	r24, 0x20	; 32
     1fc:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
     1fe:	23 3d       	cpi	r18, 0xD3	; 211
     200:	31 05       	cpc	r19, r1
     202:	38 f0       	brcs	.+14     	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
     204:	80 e4       	ldi	r24, 0x40	; 64
     206:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
     208:	21 3f       	cpi	r18, 0xF1	; 241
     20a:	31 05       	cpc	r19, r1
     20c:	10 f0       	brcs	.+4      	; 0x212 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
     212:	20 3f       	cpi	r18, 0xF0	; 240
     214:	31 05       	cpc	r19, r1
     216:	10 f0       	brcs	.+4      	; 0x21c <analogLEDTest+0x68>
			PORTB = 0xFF;
     218:	8f ef       	ldi	r24, 0xFF	; 255
     21a:	88 bb       	out	0x18, r24	; 24
     21c:	08 95       	ret

0000021e <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
     21e:	5d 9b       	sbis	0x0b, 5	; 11
     220:	fe cf       	rjmp	.-4      	; 0x21e <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
     222:	8c b9       	out	0x0c, r24	; 12
}
     224:	08 95       	ret

00000226 <midiTransitTest>:

}

void midiTransitTest(){
	
	midi_Transmit(144);
     226:	80 e9       	ldi	r24, 0x90	; 144
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	
	midi_Transmit(66);
     22e:	82 e4       	ldi	r24, 0x42	; 66
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	
	midi_Transmit(111);
     236:	8f e6       	ldi	r24, 0x6F	; 111
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
     23e:	88 e8       	ldi	r24, 0x88	; 136
     240:	93 e1       	ldi	r25, 0x13	; 19
     242:	29 e1       	ldi	r18, 0x19	; 25
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	f9 01       	movw	r30, r18
     248:	31 97       	sbiw	r30, 0x01	; 1
     24a:	f1 f7       	brne	.-4      	; 0x248 <midiTransitTest+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     24c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24e:	d9 f7       	brne	.-10     	; 0x246 <midiTransitTest+0x20>
	_delay_ms(500);
	midi_Transmit(128);
     250:	80 e8       	ldi	r24, 0x80	; 128
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	
	midi_Transmit(66);
     258:	82 e4       	ldi	r24, 0x42	; 66
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	
	midi_Transmit(111);
     260:	8f e6       	ldi	r24, 0x6F	; 111
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
     268:	88 e8       	ldi	r24, 0x88	; 136
     26a:	93 e1       	ldi	r25, 0x13	; 19
     26c:	29 e1       	ldi	r18, 0x19	; 25
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	f9 01       	movw	r30, r18
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <midiTransitTest+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     276:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     278:	d9 f7       	brne	.-10     	; 0x270 <midiTransitTest+0x4a>
	_delay_ms(500);

	midi_Transmit(144);
     27a:	80 e9       	ldi	r24, 0x90	; 144
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	midi_Transmit(86);
     282:	86 e5       	ldi	r24, 0x56	; 86
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	midi_Transmit(101);
     28a:	85 e6       	ldi	r24, 0x65	; 101
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
     292:	80 e1       	ldi	r24, 0x10	; 16
     294:	97 e2       	ldi	r25, 0x27	; 39
     296:	29 e1       	ldi	r18, 0x19	; 25
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	f9 01       	movw	r30, r18
     29c:	31 97       	sbiw	r30, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <midiTransitTest+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a2:	d9 f7       	brne	.-10     	; 0x29a <midiTransitTest+0x74>
	_delay_ms(1000);
	midi_Transmit(128);
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	midi_Transmit(86);
     2ac:	86 e5       	ldi	r24, 0x56	; 86
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
	midi_Transmit(101);
     2b4:	85 e6       	ldi	r24, 0x65	; 101
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
     2bc:	80 e1       	ldi	r24, 0x10	; 16
     2be:	97 e2       	ldi	r25, 0x27	; 39
     2c0:	29 e1       	ldi	r18, 0x19	; 25
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	f9 01       	movw	r30, r18
     2c6:	31 97       	sbiw	r30, 0x01	; 1
     2c8:	f1 f7       	brne	.-4      	; 0x2c6 <midiTransitTest+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2ca:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2cc:	d9 f7       	brne	.-10     	; 0x2c4 <midiTransitTest+0x9e>
	_delay_ms(1000);
}
     2ce:	08 95       	ret

000002d0 <playBack>:
	 writeSong2();
	//midiTransitTest();
}

void playBack(){
	midiTransitTest();
     2d0:	0e 94 13 01 	call	0x226	; 0x226 <midiTransitTest>
}
     2d4:	08 95       	ret

000002d6 <playSong>:

/***** Create Methods *****/



void playSong(){
     2d6:	8f 92       	push	r8
     2d8:	9f 92       	push	r9
     2da:	af 92       	push	r10
     2dc:	bf 92       	push	r11
     2de:	cf 92       	push	r12
     2e0:	df 92       	push	r13
     2e2:	ef 92       	push	r14
     2e4:	ff 92       	push	r15
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
	eeprom_address= 0x00;
     2ee:	10 92 73 01 	sts	0x0173, r1
     2f2:	10 92 72 01 	sts	0x0172, r1
     2f6:	89 e1       	ldi	r24, 0x19	; 25
     2f8:	88 2e       	mov	r8, r24
     2fa:	91 2c       	mov	r9, r1
     2fc:	63 c0       	rjmp	.+198    	; 0x3c4 <playSong+0xee>
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     2fe:	e1 99       	sbic	0x1c, 1	; 28
     300:	fe cf       	rjmp	.-4      	; 0x2fe <playSong+0x28>
	/* Set up address register */
	EEAR = uiAddress;
     302:	3f bb       	out	0x1f, r19	; 31
     304:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     306:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     308:	8d b3       	in	r24, 0x1d	; 29


void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
     30a:	88 bb       	out	0x18, r24	; 24
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     30c:	e1 99       	sbic	0x1c, 1	; 28
     30e:	fe cf       	rjmp	.-4      	; 0x30c <playSong+0x36>
	/* Set up address register */
	EEAR = uiAddress;
     310:	3f bb       	out	0x1f, r19	; 31
     312:	2e bb       	out	0x1e, r18	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     314:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     316:	8d b3       	in	r24, 0x1d	; 29

void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	0e 94 0f 01 	call	0x21e	; 0x21e <midi_Transmit>
		eeprom_address++;
     31e:	c0 91 72 01 	lds	r28, 0x0172
     322:	d0 91 73 01 	lds	r29, 0x0173
     326:	21 96       	adiw	r28, 0x01	; 1
     328:	d0 93 73 01 	sts	0x0173, r29
     32c:	c0 93 72 01 	sts	0x0172, r28
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     330:	e1 99       	sbic	0x1c, 1	; 28
     332:	fe cf       	rjmp	.-4      	; 0x330 <playSong+0x5a>
	/* Set up address register */
	EEAR = uiAddress;
     334:	df bb       	out	0x1f, r29	; 31
     336:	ce bb       	out	0x1e, r28	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     338:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     33a:	6d b3       	in	r22, 0x1d	; 29
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
		PORTB = EEPROM_read(eeprom_address);
		midi_Transmit(EEPROM_read(eeprom_address));
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 a3 06 	call	0xd46	; 0xd46 <__floatunsisf>
     346:	5b 01       	movw	r10, r22
     348:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4a e7       	ldi	r20, 0x7A	; 122
     350:	53 e4       	ldi	r21, 0x43	; 67
     352:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
     356:	7b 01       	movw	r14, r22
     358:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	40 e8       	ldi	r20, 0x80	; 128
     360:	5f e3       	ldi	r21, 0x3F	; 63
     362:	0e 94 c1 05 	call	0xb82	; 0xb82 <__ltsf2>
     366:	88 23       	and	r24, r24
     368:	1c f4       	brge	.+6      	; 0x370 <playSong+0x9a>
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	70 e0       	ldi	r23, 0x00	; 0
     36e:	22 c0       	rjmp	.+68     	; 0x3b4 <playSong+0xde>
		__ticks = 1;
	else if (__tmp > 65535)
     370:	c8 01       	movw	r24, r16
     372:	b7 01       	movw	r22, r14
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	3f ef       	ldi	r19, 0xFF	; 255
     378:	4f e7       	ldi	r20, 0x7F	; 127
     37a:	57 e4       	ldi	r21, 0x47	; 71
     37c:	0e 94 61 05 	call	0xac2	; 0xac2 <__gtsf2>
     380:	18 16       	cp	r1, r24
     382:	a4 f4       	brge	.+40     	; 0x3ac <playSong+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     384:	c6 01       	movw	r24, r12
     386:	b5 01       	movw	r22, r10
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	40 e2       	ldi	r20, 0x20	; 32
     38e:	51 e4       	ldi	r21, 0x41	; 65
     390:	0e 94 67 04 	call	0x8ce	; 0x8ce <__mulsf3>
     394:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
     398:	05 c0       	rjmp	.+10     	; 0x3a4 <playSong+0xce>
     39a:	c4 01       	movw	r24, r8
     39c:	01 97       	sbiw	r24, 0x01	; 1
     39e:	f1 f7       	brne	.-4      	; 0x39c <playSong+0xc6>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a0:	61 50       	subi	r22, 0x01	; 1
     3a2:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a4:	61 15       	cp	r22, r1
     3a6:	71 05       	cpc	r23, r1
     3a8:	c1 f7       	brne	.-16     	; 0x39a <playSong+0xc4>
     3aa:	07 c0       	rjmp	.+14     	; 0x3ba <playSong+0xe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3ac:	c8 01       	movw	r24, r16
     3ae:	b7 01       	movw	r22, r14
     3b0:	0e 94 91 02 	call	0x522	; 0x522 <__fixunssfsi>
     3b4:	cb 01       	movw	r24, r22
     3b6:	01 97       	sbiw	r24, 0x01	; 1
     3b8:	f1 f7       	brne	.-4      	; 0x3b6 <playSong+0xe0>
		eeprom_address++;
     3ba:	21 96       	adiw	r28, 0x01	; 1
     3bc:	d0 93 73 01 	sts	0x0173, r29
     3c0:	c0 93 72 01 	sts	0x0172, r28



void playSong(){
	eeprom_address= 0x00;
	while(eeprom_address < stop_addr){
     3c4:	20 91 72 01 	lds	r18, 0x0172
     3c8:	30 91 73 01 	lds	r19, 0x0173
     3cc:	80 91 74 01 	lds	r24, 0x0174
     3d0:	90 91 75 01 	lds	r25, 0x0175
     3d4:	28 17       	cp	r18, r24
     3d6:	39 07       	cpc	r19, r25
     3d8:	08 f4       	brcc	.+2      	; 0x3dc <playSong+0x106>
     3da:	91 cf       	rjmp	.-222    	; 0x2fe <playSong+0x28>
		eeprom_address++;
		_delay_ms(EEPROM_read(eeprom_address));
		eeprom_address++;
	}
	
}
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	1f 91       	pop	r17
     3e2:	0f 91       	pop	r16
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	bf 90       	pop	r11
     3ee:	af 90       	pop	r10
     3f0:	9f 90       	pop	r9
     3f2:	8f 90       	pop	r8
     3f4:	08 95       	ret

000003f6 <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     3f6:	5f 9b       	sbis	0x0b, 7	; 11
     3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <midi_Receive>

	/* get and return data from buffer */
	return UDR;
     3fa:	8c b1       	in	r24, 0x0c	; 12
}
     3fc:	08 95       	ret

000003fe <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
     400:	8c b1       	in	r24, 0x0c	; 12
     402:	5f 99       	sbic	0x0b, 7	; 11
     404:	fd cf       	rjmp	.-6      	; 0x400 <midi_Flush+0x2>
}
     406:	08 95       	ret

00000408 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
     408:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
     40a:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
     40c:	08 95       	ret

0000040e <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
     40e:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     410:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
     412:	8c b5       	in	r24, 0x2c	; 44
     414:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
     416:	2f bf       	out	0x3f, r18	; 63
	return i;
}
     418:	08 95       	ret

0000041a <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
     41a:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
     41c:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
     41e:	9d bd       	out	0x2d, r25	; 45
     420:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
     422:	2f bf       	out	0x3f, r18	; 63
}
     424:	08 95       	ret

00000426 <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
     426:	e1 99       	sbic	0x1c, 1	; 28
     428:	fe cf       	rjmp	.-4      	; 0x426 <EEPROM_write>

	/* Set up address and data registers */
	EEAR = uiAddress;
     42a:	9f bb       	out	0x1f, r25	; 31
     42c:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     42e:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
     430:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
     432:	e1 9a       	sbi	0x1c, 1	; 28
}
     434:	08 95       	ret

00000436 <writeSong2>:
		PORTB ^= 0xFF;
		TCNT1 = 0; 
		TIFR |= (1<<OCF1A) ; //clear timer1 overflow flag
}

void writeSong2(){
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	c8 e7       	ldi	r28, 0x78	; 120
     43c:	d1 e0       	ldi	r29, 0x01	; 1
     43e:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <writeSong2+0xa>

	/* get and return data from buffer */
	return UDR;
     444:	8c b1       	in	r24, 0x0c	; 12

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
for(int i =0; i <3; i++){
		midiData[i] = midi_Receive();
     446:	81 93       	st	Z+, r24
}

void writeSong2(){
	unsigned char captureTime;
	unsigned char interval;
for(int i =0; i <3; i++){
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	eb 37       	cpi	r30, 0x7B	; 123
     44c:	f8 07       	cpc	r31, r24
     44e:	c1 f7       	brne	.-16     	; 0x440 <writeSong2+0xa>
		midiData[i] = midi_Receive();
	}
	captureTime = TCNT1;
     450:	2c b5       	in	r18, 0x2c	; 44
     452:	3d b5       	in	r19, 0x2d	; 45
     454:	42 2f       	mov	r20, r18
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
     456:	92 2f       	mov	r25, r18
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	89 2f       	mov	r24, r25
     45c:	99 0f       	add	r25, r25
     45e:	99 0b       	sbc	r25, r25
     460:	80 83       	st	Z, r24
	midiData[4] = captureTimeB;
     462:	11 82       	std	Z+1, r1	; 0x01
     464:	32 96       	adiw	r30, 0x02	; 2
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
     466:	5f 9b       	sbis	0x0b, 7	; 11
     468:	fe cf       	rjmp	.-4      	; 0x466 <writeSong2+0x30>

	/* get and return data from buffer */
	return UDR;
     46a:	8c b1       	in	r24, 0x0c	; 12
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
		midiData[j] = midi_Receive();
     46c:	81 93       	st	Z+, r24
	unsigned char captureTimeA = ((captureTime << 8)>>8);
	unsigned char captureTimeB = (captureTime >> 8);
	midiData[3] = captureTimeA;
	midiData[4] = captureTimeB;
	
	for(int j=5; j < 8; j++){
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	e0 38       	cpi	r30, 0x80	; 128
     472:	f8 07       	cpc	r31, r24
     474:	c1 f7       	brne	.-16     	; 0x466 <writeSong2+0x30>
		midiData[j] = midi_Receive();
	}
	interval = TCNT1 - captureTime;
     476:	8c b5       	in	r24, 0x2c	; 44
     478:	9d b5       	in	r25, 0x2d	; 45
	unsigned char intervalA = ((interval << 8) >> 8);
	unsigned char intervalB = (interval >> 8);
	midiData[8] = intervalA;
     47a:	38 2f       	mov	r19, r24
     47c:	34 1b       	sub	r19, r20
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	23 2f       	mov	r18, r19
     482:	33 0f       	add	r19, r19
     484:	33 0b       	sbc	r19, r19
     486:	20 83       	st	Z, r18
	midiData[9] = intervalB;
     488:	11 82       	std	Z+1, r1	; 0x01

	PORTB = midiData[1];
     48a:	80 91 79 01 	lds	r24, 0x0179
     48e:	88 bb       	out	0x18, r24	; 24
	TCNT1 = 0;
     490:	1d bc       	out	0x2d, r1	; 45
     492:	1c bc       	out	0x2c, r1	; 44

	for(int j= 0; j < 10; j++) {
		EEPROM_write(eeprom_address, midiData[j]);
     494:	80 91 72 01 	lds	r24, 0x0172
     498:	90 91 73 01 	lds	r25, 0x0173
     49c:	69 91       	ld	r22, Y+
     49e:	0e 94 13 02 	call	0x426	; 0x426 <EEPROM_write>
		eeprom_address++;		
     4a2:	80 91 72 01 	lds	r24, 0x0172
     4a6:	90 91 73 01 	lds	r25, 0x0173
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 73 01 	sts	0x0173, r25
     4b0:	80 93 72 01 	sts	0x0172, r24
	midiData[9] = intervalB;

	PORTB = midiData[1];
	TCNT1 = 0;

	for(int j= 0; j < 10; j++) {
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	c2 38       	cpi	r28, 0x82	; 130
     4b8:	d8 07       	cpc	r29, r24
     4ba:	61 f7       	brne	.-40     	; 0x494 <writeSong2+0x5e>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}	

}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <record>:
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     4c2:	0e 94 1b 02 	call	0x436	; 0x436 <writeSong2>
	//midiTransitTest();
}
     4c6:	08 95       	ret

000004c8 <main>:
void playSong();
void playSong2();


/***** Main Loop *****/
int main(void){
     4c8:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
     4ce:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
     4d0:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
     4d2:	17 e0       	ldi	r17, 0x07	; 7
     4d4:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
     4d6:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
     4d8:	0e 94 5e 00 	call	0xbc	; 0xbc <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
     4dc:	87 e4       	ldi	r24, 0x47	; 71
     4de:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
     4e0:	87 e8       	ldi	r24, 0x87	; 135
     4e2:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
     4e4:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
     4e6:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
     4e8:	88 e1       	ldi	r24, 0x18	; 24
     4ea:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
     4ec:	86 e8       	ldi	r24, 0x86	; 134
     4ee:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		uint8_t rec = PINA & 0x04;
     4f0:	89 b3       	in	r24, 0x19	; 25
		uint8_t play = PINA & 0x02;
     4f2:	99 b3       	in	r25, 0x19	; 25
     4f4:	92 70       	andi	r25, 0x02	; 2
		uint8_t mod = PINA & 0x01;
     4f6:	29 b3       	in	r18, 0x19	; 25
	
		if(rec && !play){
     4f8:	82 ff       	sbrs	r24, 2
     4fa:	05 c0       	rjmp	.+10     	; 0x506 <main+0x3e>
     4fc:	99 23       	and	r25, r25
     4fe:	c1 f7       	brne	.-16     	; 0x4f0 <main+0x28>
    }
}
/***** Main Methods *****/

void record(){
	 writeSong2();
     500:	0e 94 1b 02 	call	0x436	; 0x436 <writeSong2>
     504:	f5 cf       	rjmp	.-22     	; 0x4f0 <main+0x28>
		uint8_t mod = PINA & 0x01;
	
		if(rec && !play){
			record();
		}
		if(play && !rec){
     506:	99 23       	and	r25, r25
     508:	99 f3       	breq	.-26     	; 0x4f0 <main+0x28>
			if (mod){ // Modify Mode
     50a:	20 fd       	sbrc	r18, 0
     50c:	f1 cf       	rjmp	.-30     	; 0x4f0 <main+0x28>
	 writeSong2();
	//midiTransitTest();
}

void playBack(){
	midiTransitTest();
     50e:	0e 94 13 01 	call	0x226	; 0x226 <midiTransitTest>
     512:	ee cf       	rjmp	.-36     	; 0x4f0 <main+0x28>

00000514 <EEPROM_read>:
	EECR |= (1 << EEWE);
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
     514:	e1 99       	sbic	0x1c, 1	; 28
     516:	fe cf       	rjmp	.-4      	; 0x514 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     518:	9f bb       	out	0x1f, r25	; 31
     51a:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
     51c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     51e:	8d b3       	in	r24, 0x1d	; 29
}
     520:	08 95       	ret

00000522 <__fixunssfsi>:
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	7b 01       	movw	r14, r22
     52c:	8c 01       	movw	r16, r24
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	5f e4       	ldi	r21, 0x4F	; 79
     536:	0e 94 91 05 	call	0xb22	; 0xb22 <__gesf2>
     53a:	88 23       	and	r24, r24
     53c:	8c f0       	brlt	.+34     	; 0x560 <__fixunssfsi+0x3e>
     53e:	c8 01       	movw	r24, r16
     540:	b7 01       	movw	r22, r14
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	5f e4       	ldi	r21, 0x4F	; 79
     54a:	0e 94 09 04 	call	0x812	; 0x812 <__subsf3>
     54e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fixsfsi>
     552:	9b 01       	movw	r18, r22
     554:	ac 01       	movw	r20, r24
     556:	20 50       	subi	r18, 0x00	; 0
     558:	30 40       	sbci	r19, 0x00	; 0
     55a:	40 40       	sbci	r20, 0x00	; 0
     55c:	50 48       	sbci	r21, 0x80	; 128
     55e:	06 c0       	rjmp	.+12     	; 0x56c <__fixunssfsi+0x4a>
     560:	c8 01       	movw	r24, r16
     562:	b7 01       	movw	r22, r14
     564:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__fixsfsi>
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
     56c:	b9 01       	movw	r22, r18
     56e:	ca 01       	movw	r24, r20
     570:	1f 91       	pop	r17
     572:	0f 91       	pop	r16
     574:	ff 90       	pop	r15
     576:	ef 90       	pop	r14
     578:	08 95       	ret

0000057a <_fpadd_parts>:
     57a:	a0 e0       	ldi	r26, 0x00	; 0
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	e3 ec       	ldi	r30, 0xC3	; 195
     580:	f2 e0       	ldi	r31, 0x02	; 2
     582:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__prologue_saves__>
     586:	dc 01       	movw	r26, r24
     588:	2b 01       	movw	r4, r22
     58a:	fa 01       	movw	r30, r20
     58c:	9c 91       	ld	r25, X
     58e:	92 30       	cpi	r25, 0x02	; 2
     590:	08 f4       	brcc	.+2      	; 0x594 <_fpadd_parts+0x1a>
     592:	39 c1       	rjmp	.+626    	; 0x806 <_fpadd_parts+0x28c>
     594:	eb 01       	movw	r28, r22
     596:	88 81       	ld	r24, Y
     598:	82 30       	cpi	r24, 0x02	; 2
     59a:	08 f4       	brcc	.+2      	; 0x59e <_fpadd_parts+0x24>
     59c:	33 c1       	rjmp	.+614    	; 0x804 <_fpadd_parts+0x28a>
     59e:	94 30       	cpi	r25, 0x04	; 4
     5a0:	69 f4       	brne	.+26     	; 0x5bc <_fpadd_parts+0x42>
     5a2:	84 30       	cpi	r24, 0x04	; 4
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <_fpadd_parts+0x2e>
     5a6:	2f c1       	rjmp	.+606    	; 0x806 <_fpadd_parts+0x28c>
     5a8:	11 96       	adiw	r26, 0x01	; 1
     5aa:	9c 91       	ld	r25, X
     5ac:	11 97       	sbiw	r26, 0x01	; 1
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	98 17       	cp	r25, r24
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <_fpadd_parts+0x3c>
     5b4:	28 c1       	rjmp	.+592    	; 0x806 <_fpadd_parts+0x28c>
     5b6:	a0 e6       	ldi	r26, 0x60	; 96
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	25 c1       	rjmp	.+586    	; 0x806 <_fpadd_parts+0x28c>
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	09 f4       	brne	.+2      	; 0x5c2 <_fpadd_parts+0x48>
     5c0:	21 c1       	rjmp	.+578    	; 0x804 <_fpadd_parts+0x28a>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	a9 f4       	brne	.+42     	; 0x5f0 <_fpadd_parts+0x76>
     5c6:	92 30       	cpi	r25, 0x02	; 2
     5c8:	09 f0       	breq	.+2      	; 0x5cc <_fpadd_parts+0x52>
     5ca:	1d c1       	rjmp	.+570    	; 0x806 <_fpadd_parts+0x28c>
     5cc:	9a 01       	movw	r18, r20
     5ce:	ad 01       	movw	r20, r26
     5d0:	88 e0       	ldi	r24, 0x08	; 8
     5d2:	ea 01       	movw	r28, r20
     5d4:	09 90       	ld	r0, Y+
     5d6:	ae 01       	movw	r20, r28
     5d8:	e9 01       	movw	r28, r18
     5da:	09 92       	st	Y+, r0
     5dc:	9e 01       	movw	r18, r28
     5de:	81 50       	subi	r24, 0x01	; 1
     5e0:	c1 f7       	brne	.-16     	; 0x5d2 <_fpadd_parts+0x58>
     5e2:	e2 01       	movw	r28, r4
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	11 96       	adiw	r26, 0x01	; 1
     5e8:	9c 91       	ld	r25, X
     5ea:	89 23       	and	r24, r25
     5ec:	81 83       	std	Z+1, r24	; 0x01
     5ee:	08 c1       	rjmp	.+528    	; 0x800 <_fpadd_parts+0x286>
     5f0:	92 30       	cpi	r25, 0x02	; 2
     5f2:	09 f4       	brne	.+2      	; 0x5f6 <_fpadd_parts+0x7c>
     5f4:	07 c1       	rjmp	.+526    	; 0x804 <_fpadd_parts+0x28a>
     5f6:	12 96       	adiw	r26, 0x02	; 2
     5f8:	2d 90       	ld	r2, X+
     5fa:	3c 90       	ld	r3, X
     5fc:	13 97       	sbiw	r26, 0x03	; 3
     5fe:	eb 01       	movw	r28, r22
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	9b 81       	ldd	r25, Y+3	; 0x03
     604:	14 96       	adiw	r26, 0x04	; 4
     606:	ad 90       	ld	r10, X+
     608:	bd 90       	ld	r11, X+
     60a:	cd 90       	ld	r12, X+
     60c:	dc 90       	ld	r13, X
     60e:	17 97       	sbiw	r26, 0x07	; 7
     610:	ec 80       	ldd	r14, Y+4	; 0x04
     612:	fd 80       	ldd	r15, Y+5	; 0x05
     614:	0e 81       	ldd	r16, Y+6	; 0x06
     616:	1f 81       	ldd	r17, Y+7	; 0x07
     618:	91 01       	movw	r18, r2
     61a:	28 1b       	sub	r18, r24
     61c:	39 0b       	sbc	r19, r25
     61e:	b9 01       	movw	r22, r18
     620:	37 ff       	sbrs	r19, 7
     622:	04 c0       	rjmp	.+8      	; 0x62c <_fpadd_parts+0xb2>
     624:	66 27       	eor	r22, r22
     626:	77 27       	eor	r23, r23
     628:	62 1b       	sub	r22, r18
     62a:	73 0b       	sbc	r23, r19
     62c:	60 32       	cpi	r22, 0x20	; 32
     62e:	71 05       	cpc	r23, r1
     630:	0c f0       	brlt	.+2      	; 0x634 <_fpadd_parts+0xba>
     632:	61 c0       	rjmp	.+194    	; 0x6f6 <_fpadd_parts+0x17c>
     634:	12 16       	cp	r1, r18
     636:	13 06       	cpc	r1, r19
     638:	6c f5       	brge	.+90     	; 0x694 <_fpadd_parts+0x11a>
     63a:	37 01       	movw	r6, r14
     63c:	48 01       	movw	r8, r16
     63e:	06 2e       	mov	r0, r22
     640:	04 c0       	rjmp	.+8      	; 0x64a <_fpadd_parts+0xd0>
     642:	96 94       	lsr	r9
     644:	87 94       	ror	r8
     646:	77 94       	ror	r7
     648:	67 94       	ror	r6
     64a:	0a 94       	dec	r0
     64c:	d2 f7       	brpl	.-12     	; 0x642 <_fpadd_parts+0xc8>
     64e:	21 e0       	ldi	r18, 0x01	; 1
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	04 c0       	rjmp	.+8      	; 0x660 <_fpadd_parts+0xe6>
     658:	22 0f       	add	r18, r18
     65a:	33 1f       	adc	r19, r19
     65c:	44 1f       	adc	r20, r20
     65e:	55 1f       	adc	r21, r21
     660:	6a 95       	dec	r22
     662:	d2 f7       	brpl	.-12     	; 0x658 <_fpadd_parts+0xde>
     664:	21 50       	subi	r18, 0x01	; 1
     666:	30 40       	sbci	r19, 0x00	; 0
     668:	40 40       	sbci	r20, 0x00	; 0
     66a:	50 40       	sbci	r21, 0x00	; 0
     66c:	2e 21       	and	r18, r14
     66e:	3f 21       	and	r19, r15
     670:	40 23       	and	r20, r16
     672:	51 23       	and	r21, r17
     674:	21 15       	cp	r18, r1
     676:	31 05       	cpc	r19, r1
     678:	41 05       	cpc	r20, r1
     67a:	51 05       	cpc	r21, r1
     67c:	21 f0       	breq	.+8      	; 0x686 <_fpadd_parts+0x10c>
     67e:	21 e0       	ldi	r18, 0x01	; 1
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	50 e0       	ldi	r21, 0x00	; 0
     686:	79 01       	movw	r14, r18
     688:	8a 01       	movw	r16, r20
     68a:	e6 28       	or	r14, r6
     68c:	f7 28       	or	r15, r7
     68e:	08 29       	or	r16, r8
     690:	19 29       	or	r17, r9
     692:	3c c0       	rjmp	.+120    	; 0x70c <_fpadd_parts+0x192>
     694:	23 2b       	or	r18, r19
     696:	d1 f1       	breq	.+116    	; 0x70c <_fpadd_parts+0x192>
     698:	26 0e       	add	r2, r22
     69a:	37 1e       	adc	r3, r23
     69c:	35 01       	movw	r6, r10
     69e:	46 01       	movw	r8, r12
     6a0:	06 2e       	mov	r0, r22
     6a2:	04 c0       	rjmp	.+8      	; 0x6ac <_fpadd_parts+0x132>
     6a4:	96 94       	lsr	r9
     6a6:	87 94       	ror	r8
     6a8:	77 94       	ror	r7
     6aa:	67 94       	ror	r6
     6ac:	0a 94       	dec	r0
     6ae:	d2 f7       	brpl	.-12     	; 0x6a4 <_fpadd_parts+0x12a>
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	40 e0       	ldi	r20, 0x00	; 0
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <_fpadd_parts+0x148>
     6ba:	22 0f       	add	r18, r18
     6bc:	33 1f       	adc	r19, r19
     6be:	44 1f       	adc	r20, r20
     6c0:	55 1f       	adc	r21, r21
     6c2:	6a 95       	dec	r22
     6c4:	d2 f7       	brpl	.-12     	; 0x6ba <_fpadd_parts+0x140>
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	30 40       	sbci	r19, 0x00	; 0
     6ca:	40 40       	sbci	r20, 0x00	; 0
     6cc:	50 40       	sbci	r21, 0x00	; 0
     6ce:	2a 21       	and	r18, r10
     6d0:	3b 21       	and	r19, r11
     6d2:	4c 21       	and	r20, r12
     6d4:	5d 21       	and	r21, r13
     6d6:	21 15       	cp	r18, r1
     6d8:	31 05       	cpc	r19, r1
     6da:	41 05       	cpc	r20, r1
     6dc:	51 05       	cpc	r21, r1
     6de:	21 f0       	breq	.+8      	; 0x6e8 <_fpadd_parts+0x16e>
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	59 01       	movw	r10, r18
     6ea:	6a 01       	movw	r12, r20
     6ec:	a6 28       	or	r10, r6
     6ee:	b7 28       	or	r11, r7
     6f0:	c8 28       	or	r12, r8
     6f2:	d9 28       	or	r13, r9
     6f4:	0b c0       	rjmp	.+22     	; 0x70c <_fpadd_parts+0x192>
     6f6:	82 15       	cp	r24, r2
     6f8:	93 05       	cpc	r25, r3
     6fa:	2c f0       	brlt	.+10     	; 0x706 <_fpadd_parts+0x18c>
     6fc:	1c 01       	movw	r2, r24
     6fe:	aa 24       	eor	r10, r10
     700:	bb 24       	eor	r11, r11
     702:	65 01       	movw	r12, r10
     704:	03 c0       	rjmp	.+6      	; 0x70c <_fpadd_parts+0x192>
     706:	ee 24       	eor	r14, r14
     708:	ff 24       	eor	r15, r15
     70a:	87 01       	movw	r16, r14
     70c:	11 96       	adiw	r26, 0x01	; 1
     70e:	9c 91       	ld	r25, X
     710:	d2 01       	movw	r26, r4
     712:	11 96       	adiw	r26, 0x01	; 1
     714:	8c 91       	ld	r24, X
     716:	98 17       	cp	r25, r24
     718:	09 f4       	brne	.+2      	; 0x71c <_fpadd_parts+0x1a2>
     71a:	45 c0       	rjmp	.+138    	; 0x7a6 <_fpadd_parts+0x22c>
     71c:	99 23       	and	r25, r25
     71e:	39 f0       	breq	.+14     	; 0x72e <_fpadd_parts+0x1b4>
     720:	a8 01       	movw	r20, r16
     722:	97 01       	movw	r18, r14
     724:	2a 19       	sub	r18, r10
     726:	3b 09       	sbc	r19, r11
     728:	4c 09       	sbc	r20, r12
     72a:	5d 09       	sbc	r21, r13
     72c:	06 c0       	rjmp	.+12     	; 0x73a <_fpadd_parts+0x1c0>
     72e:	a6 01       	movw	r20, r12
     730:	95 01       	movw	r18, r10
     732:	2e 19       	sub	r18, r14
     734:	3f 09       	sbc	r19, r15
     736:	40 0b       	sbc	r20, r16
     738:	51 0b       	sbc	r21, r17
     73a:	57 fd       	sbrc	r21, 7
     73c:	08 c0       	rjmp	.+16     	; 0x74e <_fpadd_parts+0x1d4>
     73e:	11 82       	std	Z+1, r1	; 0x01
     740:	33 82       	std	Z+3, r3	; 0x03
     742:	22 82       	std	Z+2, r2	; 0x02
     744:	24 83       	std	Z+4, r18	; 0x04
     746:	35 83       	std	Z+5, r19	; 0x05
     748:	46 83       	std	Z+6, r20	; 0x06
     74a:	57 83       	std	Z+7, r21	; 0x07
     74c:	1d c0       	rjmp	.+58     	; 0x788 <_fpadd_parts+0x20e>
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	81 83       	std	Z+1, r24	; 0x01
     752:	33 82       	std	Z+3, r3	; 0x03
     754:	22 82       	std	Z+2, r2	; 0x02
     756:	88 27       	eor	r24, r24
     758:	99 27       	eor	r25, r25
     75a:	dc 01       	movw	r26, r24
     75c:	82 1b       	sub	r24, r18
     75e:	93 0b       	sbc	r25, r19
     760:	a4 0b       	sbc	r26, r20
     762:	b5 0b       	sbc	r27, r21
     764:	84 83       	std	Z+4, r24	; 0x04
     766:	95 83       	std	Z+5, r25	; 0x05
     768:	a6 83       	std	Z+6, r26	; 0x06
     76a:	b7 83       	std	Z+7, r27	; 0x07
     76c:	0d c0       	rjmp	.+26     	; 0x788 <_fpadd_parts+0x20e>
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	44 1f       	adc	r20, r20
     774:	55 1f       	adc	r21, r21
     776:	24 83       	std	Z+4, r18	; 0x04
     778:	35 83       	std	Z+5, r19	; 0x05
     77a:	46 83       	std	Z+6, r20	; 0x06
     77c:	57 83       	std	Z+7, r21	; 0x07
     77e:	82 81       	ldd	r24, Z+2	; 0x02
     780:	93 81       	ldd	r25, Z+3	; 0x03
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	93 83       	std	Z+3, r25	; 0x03
     786:	82 83       	std	Z+2, r24	; 0x02
     788:	24 81       	ldd	r18, Z+4	; 0x04
     78a:	35 81       	ldd	r19, Z+5	; 0x05
     78c:	46 81       	ldd	r20, Z+6	; 0x06
     78e:	57 81       	ldd	r21, Z+7	; 0x07
     790:	da 01       	movw	r26, r20
     792:	c9 01       	movw	r24, r18
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	a1 09       	sbc	r26, r1
     798:	b1 09       	sbc	r27, r1
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	9f 4f       	sbci	r25, 0xFF	; 255
     79e:	af 4f       	sbci	r26, 0xFF	; 255
     7a0:	bf 43       	sbci	r27, 0x3F	; 63
     7a2:	28 f3       	brcs	.-54     	; 0x76e <_fpadd_parts+0x1f4>
     7a4:	0b c0       	rjmp	.+22     	; 0x7bc <_fpadd_parts+0x242>
     7a6:	91 83       	std	Z+1, r25	; 0x01
     7a8:	33 82       	std	Z+3, r3	; 0x03
     7aa:	22 82       	std	Z+2, r2	; 0x02
     7ac:	ea 0c       	add	r14, r10
     7ae:	fb 1c       	adc	r15, r11
     7b0:	0c 1d       	adc	r16, r12
     7b2:	1d 1d       	adc	r17, r13
     7b4:	e4 82       	std	Z+4, r14	; 0x04
     7b6:	f5 82       	std	Z+5, r15	; 0x05
     7b8:	06 83       	std	Z+6, r16	; 0x06
     7ba:	17 83       	std	Z+7, r17	; 0x07
     7bc:	83 e0       	ldi	r24, 0x03	; 3
     7be:	80 83       	st	Z, r24
     7c0:	24 81       	ldd	r18, Z+4	; 0x04
     7c2:	35 81       	ldd	r19, Z+5	; 0x05
     7c4:	46 81       	ldd	r20, Z+6	; 0x06
     7c6:	57 81       	ldd	r21, Z+7	; 0x07
     7c8:	57 ff       	sbrs	r21, 7
     7ca:	1a c0       	rjmp	.+52     	; 0x800 <_fpadd_parts+0x286>
     7cc:	c9 01       	movw	r24, r18
     7ce:	aa 27       	eor	r26, r26
     7d0:	97 fd       	sbrc	r25, 7
     7d2:	a0 95       	com	r26
     7d4:	ba 2f       	mov	r27, r26
     7d6:	81 70       	andi	r24, 0x01	; 1
     7d8:	90 70       	andi	r25, 0x00	; 0
     7da:	a0 70       	andi	r26, 0x00	; 0
     7dc:	b0 70       	andi	r27, 0x00	; 0
     7de:	56 95       	lsr	r21
     7e0:	47 95       	ror	r20
     7e2:	37 95       	ror	r19
     7e4:	27 95       	ror	r18
     7e6:	82 2b       	or	r24, r18
     7e8:	93 2b       	or	r25, r19
     7ea:	a4 2b       	or	r26, r20
     7ec:	b5 2b       	or	r27, r21
     7ee:	84 83       	std	Z+4, r24	; 0x04
     7f0:	95 83       	std	Z+5, r25	; 0x05
     7f2:	a6 83       	std	Z+6, r26	; 0x06
     7f4:	b7 83       	std	Z+7, r27	; 0x07
     7f6:	82 81       	ldd	r24, Z+2	; 0x02
     7f8:	93 81       	ldd	r25, Z+3	; 0x03
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	93 83       	std	Z+3, r25	; 0x03
     7fe:	82 83       	std	Z+2, r24	; 0x02
     800:	df 01       	movw	r26, r30
     802:	01 c0       	rjmp	.+2      	; 0x806 <_fpadd_parts+0x28c>
     804:	d2 01       	movw	r26, r4
     806:	cd 01       	movw	r24, r26
     808:	cd b7       	in	r28, 0x3d	; 61
     80a:	de b7       	in	r29, 0x3e	; 62
     80c:	e2 e1       	ldi	r30, 0x12	; 18
     80e:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__epilogue_restores__>

00000812 <__subsf3>:
     812:	a0 e2       	ldi	r26, 0x20	; 32
     814:	b0 e0       	ldi	r27, 0x00	; 0
     816:	ef e0       	ldi	r30, 0x0F	; 15
     818:	f4 e0       	ldi	r31, 0x04	; 4
     81a:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x18>
     81e:	69 83       	std	Y+1, r22	; 0x01
     820:	7a 83       	std	Y+2, r23	; 0x02
     822:	8b 83       	std	Y+3, r24	; 0x03
     824:	9c 83       	std	Y+4, r25	; 0x04
     826:	2d 83       	std	Y+5, r18	; 0x05
     828:	3e 83       	std	Y+6, r19	; 0x06
     82a:	4f 83       	std	Y+7, r20	; 0x07
     82c:	58 87       	std	Y+8, r21	; 0x08
     82e:	e9 e0       	ldi	r30, 0x09	; 9
     830:	ee 2e       	mov	r14, r30
     832:	f1 2c       	mov	r15, r1
     834:	ec 0e       	add	r14, r28
     836:	fd 1e       	adc	r15, r29
     838:	ce 01       	movw	r24, r28
     83a:	01 96       	adiw	r24, 0x01	; 1
     83c:	b7 01       	movw	r22, r14
     83e:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     842:	8e 01       	movw	r16, r28
     844:	0f 5e       	subi	r16, 0xEF	; 239
     846:	1f 4f       	sbci	r17, 0xFF	; 255
     848:	ce 01       	movw	r24, r28
     84a:	05 96       	adiw	r24, 0x05	; 5
     84c:	b8 01       	movw	r22, r16
     84e:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     852:	8a 89       	ldd	r24, Y+18	; 0x12
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	89 27       	eor	r24, r25
     858:	8a 8b       	std	Y+18, r24	; 0x12
     85a:	c7 01       	movw	r24, r14
     85c:	b8 01       	movw	r22, r16
     85e:	ae 01       	movw	r20, r28
     860:	47 5e       	subi	r20, 0xE7	; 231
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	0e 94 bd 02 	call	0x57a	; 0x57a <_fpadd_parts>
     868:	0e 94 6b 07 	call	0xed6	; 0xed6 <__pack_f>
     86c:	a0 96       	adiw	r28, 0x20	; 32
     86e:	e6 e0       	ldi	r30, 0x06	; 6
     870:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x18>

00000874 <__addsf3>:
     874:	a0 e2       	ldi	r26, 0x20	; 32
     876:	b0 e0       	ldi	r27, 0x00	; 0
     878:	e0 e4       	ldi	r30, 0x40	; 64
     87a:	f4 e0       	ldi	r31, 0x04	; 4
     87c:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x18>
     880:	69 83       	std	Y+1, r22	; 0x01
     882:	7a 83       	std	Y+2, r23	; 0x02
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	9c 83       	std	Y+4, r25	; 0x04
     888:	2d 83       	std	Y+5, r18	; 0x05
     88a:	3e 83       	std	Y+6, r19	; 0x06
     88c:	4f 83       	std	Y+7, r20	; 0x07
     88e:	58 87       	std	Y+8, r21	; 0x08
     890:	f9 e0       	ldi	r31, 0x09	; 9
     892:	ef 2e       	mov	r14, r31
     894:	f1 2c       	mov	r15, r1
     896:	ec 0e       	add	r14, r28
     898:	fd 1e       	adc	r15, r29
     89a:	ce 01       	movw	r24, r28
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	b7 01       	movw	r22, r14
     8a0:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     8a4:	8e 01       	movw	r16, r28
     8a6:	0f 5e       	subi	r16, 0xEF	; 239
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	ce 01       	movw	r24, r28
     8ac:	05 96       	adiw	r24, 0x05	; 5
     8ae:	b8 01       	movw	r22, r16
     8b0:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     8b4:	c7 01       	movw	r24, r14
     8b6:	b8 01       	movw	r22, r16
     8b8:	ae 01       	movw	r20, r28
     8ba:	47 5e       	subi	r20, 0xE7	; 231
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	0e 94 bd 02 	call	0x57a	; 0x57a <_fpadd_parts>
     8c2:	0e 94 6b 07 	call	0xed6	; 0xed6 <__pack_f>
     8c6:	a0 96       	adiw	r28, 0x20	; 32
     8c8:	e6 e0       	ldi	r30, 0x06	; 6
     8ca:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x18>

000008ce <__mulsf3>:
     8ce:	a0 e2       	ldi	r26, 0x20	; 32
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	ed e6       	ldi	r30, 0x6D	; 109
     8d4:	f4 e0       	ldi	r31, 0x04	; 4
     8d6:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__prologue_saves__>
     8da:	69 83       	std	Y+1, r22	; 0x01
     8dc:	7a 83       	std	Y+2, r23	; 0x02
     8de:	8b 83       	std	Y+3, r24	; 0x03
     8e0:	9c 83       	std	Y+4, r25	; 0x04
     8e2:	2d 83       	std	Y+5, r18	; 0x05
     8e4:	3e 83       	std	Y+6, r19	; 0x06
     8e6:	4f 83       	std	Y+7, r20	; 0x07
     8e8:	58 87       	std	Y+8, r21	; 0x08
     8ea:	ce 01       	movw	r24, r28
     8ec:	01 96       	adiw	r24, 0x01	; 1
     8ee:	be 01       	movw	r22, r28
     8f0:	67 5f       	subi	r22, 0xF7	; 247
     8f2:	7f 4f       	sbci	r23, 0xFF	; 255
     8f4:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     8f8:	ce 01       	movw	r24, r28
     8fa:	05 96       	adiw	r24, 0x05	; 5
     8fc:	be 01       	movw	r22, r28
     8fe:	6f 5e       	subi	r22, 0xEF	; 239
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     906:	99 85       	ldd	r25, Y+9	; 0x09
     908:	92 30       	cpi	r25, 0x02	; 2
     90a:	88 f0       	brcs	.+34     	; 0x92e <__mulsf3+0x60>
     90c:	89 89       	ldd	r24, Y+17	; 0x11
     90e:	82 30       	cpi	r24, 0x02	; 2
     910:	c8 f0       	brcs	.+50     	; 0x944 <__mulsf3+0x76>
     912:	94 30       	cpi	r25, 0x04	; 4
     914:	19 f4       	brne	.+6      	; 0x91c <__mulsf3+0x4e>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	51 f4       	brne	.+20     	; 0x92e <__mulsf3+0x60>
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__mulsf3+0x56>
     91c:	84 30       	cpi	r24, 0x04	; 4
     91e:	29 f4       	brne	.+10     	; 0x92a <__mulsf3+0x5c>
     920:	92 30       	cpi	r25, 0x02	; 2
     922:	81 f4       	brne	.+32     	; 0x944 <__mulsf3+0x76>
     924:	80 e6       	ldi	r24, 0x60	; 96
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	c6 c0       	rjmp	.+396    	; 0xab6 <__mulsf3+0x1e8>
     92a:	92 30       	cpi	r25, 0x02	; 2
     92c:	49 f4       	brne	.+18     	; 0x940 <__mulsf3+0x72>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	9a 85       	ldd	r25, Y+10	; 0x0a
     932:	8a 89       	ldd	r24, Y+18	; 0x12
     934:	98 13       	cpse	r25, r24
     936:	21 e0       	ldi	r18, 0x01	; 1
     938:	2a 87       	std	Y+10, r18	; 0x0a
     93a:	ce 01       	movw	r24, r28
     93c:	09 96       	adiw	r24, 0x09	; 9
     93e:	bb c0       	rjmp	.+374    	; 0xab6 <__mulsf3+0x1e8>
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	49 f4       	brne	.+18     	; 0x956 <__mulsf3+0x88>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	9a 85       	ldd	r25, Y+10	; 0x0a
     948:	8a 89       	ldd	r24, Y+18	; 0x12
     94a:	98 13       	cpse	r25, r24
     94c:	21 e0       	ldi	r18, 0x01	; 1
     94e:	2a 8b       	std	Y+18, r18	; 0x12
     950:	ce 01       	movw	r24, r28
     952:	41 96       	adiw	r24, 0x11	; 17
     954:	b0 c0       	rjmp	.+352    	; 0xab6 <__mulsf3+0x1e8>
     956:	2d 84       	ldd	r2, Y+13	; 0x0d
     958:	3e 84       	ldd	r3, Y+14	; 0x0e
     95a:	4f 84       	ldd	r4, Y+15	; 0x0f
     95c:	58 88       	ldd	r5, Y+16	; 0x10
     95e:	6d 88       	ldd	r6, Y+21	; 0x15
     960:	7e 88       	ldd	r7, Y+22	; 0x16
     962:	8f 88       	ldd	r8, Y+23	; 0x17
     964:	98 8c       	ldd	r9, Y+24	; 0x18
     966:	ee 24       	eor	r14, r14
     968:	ff 24       	eor	r15, r15
     96a:	87 01       	movw	r16, r14
     96c:	aa 24       	eor	r10, r10
     96e:	bb 24       	eor	r11, r11
     970:	65 01       	movw	r12, r10
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	e0 e0       	ldi	r30, 0x00	; 0
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	c1 01       	movw	r24, r2
     980:	81 70       	andi	r24, 0x01	; 1
     982:	90 70       	andi	r25, 0x00	; 0
     984:	89 2b       	or	r24, r25
     986:	e9 f0       	breq	.+58     	; 0x9c2 <__mulsf3+0xf4>
     988:	e6 0c       	add	r14, r6
     98a:	f7 1c       	adc	r15, r7
     98c:	08 1d       	adc	r16, r8
     98e:	19 1d       	adc	r17, r9
     990:	9a 01       	movw	r18, r20
     992:	ab 01       	movw	r20, r22
     994:	2a 0d       	add	r18, r10
     996:	3b 1d       	adc	r19, r11
     998:	4c 1d       	adc	r20, r12
     99a:	5d 1d       	adc	r21, r13
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	a0 e0       	ldi	r26, 0x00	; 0
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	e6 14       	cp	r14, r6
     9a6:	f7 04       	cpc	r15, r7
     9a8:	08 05       	cpc	r16, r8
     9aa:	19 05       	cpc	r17, r9
     9ac:	20 f4       	brcc	.+8      	; 0x9b6 <__mulsf3+0xe8>
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	a0 e0       	ldi	r26, 0x00	; 0
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ba 01       	movw	r22, r20
     9b8:	a9 01       	movw	r20, r18
     9ba:	48 0f       	add	r20, r24
     9bc:	59 1f       	adc	r21, r25
     9be:	6a 1f       	adc	r22, r26
     9c0:	7b 1f       	adc	r23, r27
     9c2:	aa 0c       	add	r10, r10
     9c4:	bb 1c       	adc	r11, r11
     9c6:	cc 1c       	adc	r12, r12
     9c8:	dd 1c       	adc	r13, r13
     9ca:	97 fe       	sbrs	r9, 7
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <__mulsf3+0x110>
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	a8 2a       	or	r10, r24
     9d8:	b9 2a       	or	r11, r25
     9da:	ca 2a       	or	r12, r26
     9dc:	db 2a       	or	r13, r27
     9de:	31 96       	adiw	r30, 0x01	; 1
     9e0:	e0 32       	cpi	r30, 0x20	; 32
     9e2:	f1 05       	cpc	r31, r1
     9e4:	49 f0       	breq	.+18     	; 0x9f8 <__mulsf3+0x12a>
     9e6:	66 0c       	add	r6, r6
     9e8:	77 1c       	adc	r7, r7
     9ea:	88 1c       	adc	r8, r8
     9ec:	99 1c       	adc	r9, r9
     9ee:	56 94       	lsr	r5
     9f0:	47 94       	ror	r4
     9f2:	37 94       	ror	r3
     9f4:	27 94       	ror	r2
     9f6:	c3 cf       	rjmp	.-122    	; 0x97e <__mulsf3+0xb0>
     9f8:	fa 85       	ldd	r31, Y+10	; 0x0a
     9fa:	ea 89       	ldd	r30, Y+18	; 0x12
     9fc:	2b 89       	ldd	r18, Y+19	; 0x13
     9fe:	3c 89       	ldd	r19, Y+20	; 0x14
     a00:	8b 85       	ldd	r24, Y+11	; 0x0b
     a02:	9c 85       	ldd	r25, Y+12	; 0x0c
     a04:	28 0f       	add	r18, r24
     a06:	39 1f       	adc	r19, r25
     a08:	2e 5f       	subi	r18, 0xFE	; 254
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	17 c0       	rjmp	.+46     	; 0xa3c <__mulsf3+0x16e>
     a0e:	ca 01       	movw	r24, r20
     a10:	81 70       	andi	r24, 0x01	; 1
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	89 2b       	or	r24, r25
     a16:	61 f0       	breq	.+24     	; 0xa30 <__mulsf3+0x162>
     a18:	16 95       	lsr	r17
     a1a:	07 95       	ror	r16
     a1c:	f7 94       	ror	r15
     a1e:	e7 94       	ror	r14
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	a0 e0       	ldi	r26, 0x00	; 0
     a26:	b0 e8       	ldi	r27, 0x80	; 128
     a28:	e8 2a       	or	r14, r24
     a2a:	f9 2a       	or	r15, r25
     a2c:	0a 2b       	or	r16, r26
     a2e:	1b 2b       	or	r17, r27
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	57 95       	ror	r21
     a36:	47 95       	ror	r20
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	77 fd       	sbrc	r23, 7
     a3e:	e7 cf       	rjmp	.-50     	; 0xa0e <__mulsf3+0x140>
     a40:	0c c0       	rjmp	.+24     	; 0xa5a <__mulsf3+0x18c>
     a42:	44 0f       	add	r20, r20
     a44:	55 1f       	adc	r21, r21
     a46:	66 1f       	adc	r22, r22
     a48:	77 1f       	adc	r23, r23
     a4a:	17 fd       	sbrc	r17, 7
     a4c:	41 60       	ori	r20, 0x01	; 1
     a4e:	ee 0c       	add	r14, r14
     a50:	ff 1c       	adc	r15, r15
     a52:	00 1f       	adc	r16, r16
     a54:	11 1f       	adc	r17, r17
     a56:	21 50       	subi	r18, 0x01	; 1
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	40 30       	cpi	r20, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	59 07       	cpc	r21, r25
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	69 07       	cpc	r22, r25
     a64:	90 e4       	ldi	r25, 0x40	; 64
     a66:	79 07       	cpc	r23, r25
     a68:	60 f3       	brcs	.-40     	; 0xa42 <__mulsf3+0x174>
     a6a:	2b 8f       	std	Y+27, r18	; 0x1b
     a6c:	3c 8f       	std	Y+28, r19	; 0x1c
     a6e:	db 01       	movw	r26, r22
     a70:	ca 01       	movw	r24, r20
     a72:	8f 77       	andi	r24, 0x7F	; 127
     a74:	90 70       	andi	r25, 0x00	; 0
     a76:	a0 70       	andi	r26, 0x00	; 0
     a78:	b0 70       	andi	r27, 0x00	; 0
     a7a:	80 34       	cpi	r24, 0x40	; 64
     a7c:	91 05       	cpc	r25, r1
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	61 f4       	brne	.+24     	; 0xa9c <__mulsf3+0x1ce>
     a84:	47 fd       	sbrc	r20, 7
     a86:	0a c0       	rjmp	.+20     	; 0xa9c <__mulsf3+0x1ce>
     a88:	e1 14       	cp	r14, r1
     a8a:	f1 04       	cpc	r15, r1
     a8c:	01 05       	cpc	r16, r1
     a8e:	11 05       	cpc	r17, r1
     a90:	29 f0       	breq	.+10     	; 0xa9c <__mulsf3+0x1ce>
     a92:	40 5c       	subi	r20, 0xC0	; 192
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	6f 4f       	sbci	r22, 0xFF	; 255
     a98:	7f 4f       	sbci	r23, 0xFF	; 255
     a9a:	40 78       	andi	r20, 0x80	; 128
     a9c:	1a 8e       	std	Y+26, r1	; 0x1a
     a9e:	fe 17       	cp	r31, r30
     aa0:	11 f0       	breq	.+4      	; 0xaa6 <__mulsf3+0x1d8>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	8a 8f       	std	Y+26, r24	; 0x1a
     aa6:	4d 8f       	std	Y+29, r20	; 0x1d
     aa8:	5e 8f       	std	Y+30, r21	; 0x1e
     aaa:	6f 8f       	std	Y+31, r22	; 0x1f
     aac:	78 a3       	std	Y+32, r23	; 0x20
     aae:	83 e0       	ldi	r24, 0x03	; 3
     ab0:	89 8f       	std	Y+25, r24	; 0x19
     ab2:	ce 01       	movw	r24, r28
     ab4:	49 96       	adiw	r24, 0x19	; 25
     ab6:	0e 94 6b 07 	call	0xed6	; 0xed6 <__pack_f>
     aba:	a0 96       	adiw	r28, 0x20	; 32
     abc:	e2 e1       	ldi	r30, 0x12	; 18
     abe:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__epilogue_restores__>

00000ac2 <__gtsf2>:
     ac2:	a8 e1       	ldi	r26, 0x18	; 24
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	e7 e6       	ldi	r30, 0x67	; 103
     ac8:	f5 e0       	ldi	r31, 0x05	; 5
     aca:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x18>
     ace:	69 83       	std	Y+1, r22	; 0x01
     ad0:	7a 83       	std	Y+2, r23	; 0x02
     ad2:	8b 83       	std	Y+3, r24	; 0x03
     ad4:	9c 83       	std	Y+4, r25	; 0x04
     ad6:	2d 83       	std	Y+5, r18	; 0x05
     ad8:	3e 83       	std	Y+6, r19	; 0x06
     ada:	4f 83       	std	Y+7, r20	; 0x07
     adc:	58 87       	std	Y+8, r21	; 0x08
     ade:	89 e0       	ldi	r24, 0x09	; 9
     ae0:	e8 2e       	mov	r14, r24
     ae2:	f1 2c       	mov	r15, r1
     ae4:	ec 0e       	add	r14, r28
     ae6:	fd 1e       	adc	r15, r29
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	b7 01       	movw	r22, r14
     aee:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     af2:	8e 01       	movw	r16, r28
     af4:	0f 5e       	subi	r16, 0xEF	; 239
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
     af8:	ce 01       	movw	r24, r28
     afa:	05 96       	adiw	r24, 0x05	; 5
     afc:	b8 01       	movw	r22, r16
     afe:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     b02:	89 85       	ldd	r24, Y+9	; 0x09
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	40 f0       	brcs	.+16     	; 0xb18 <__gtsf2+0x56>
     b08:	89 89       	ldd	r24, Y+17	; 0x11
     b0a:	82 30       	cpi	r24, 0x02	; 2
     b0c:	28 f0       	brcs	.+10     	; 0xb18 <__gtsf2+0x56>
     b0e:	c7 01       	movw	r24, r14
     b10:	b8 01       	movw	r22, r16
     b12:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fpcmp_parts_f>
     b16:	01 c0       	rjmp	.+2      	; 0xb1a <__gtsf2+0x58>
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	68 96       	adiw	r28, 0x18	; 24
     b1c:	e6 e0       	ldi	r30, 0x06	; 6
     b1e:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x18>

00000b22 <__gesf2>:
     b22:	a8 e1       	ldi	r26, 0x18	; 24
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x18>
     b2e:	69 83       	std	Y+1, r22	; 0x01
     b30:	7a 83       	std	Y+2, r23	; 0x02
     b32:	8b 83       	std	Y+3, r24	; 0x03
     b34:	9c 83       	std	Y+4, r25	; 0x04
     b36:	2d 83       	std	Y+5, r18	; 0x05
     b38:	3e 83       	std	Y+6, r19	; 0x06
     b3a:	4f 83       	std	Y+7, r20	; 0x07
     b3c:	58 87       	std	Y+8, r21	; 0x08
     b3e:	89 e0       	ldi	r24, 0x09	; 9
     b40:	e8 2e       	mov	r14, r24
     b42:	f1 2c       	mov	r15, r1
     b44:	ec 0e       	add	r14, r28
     b46:	fd 1e       	adc	r15, r29
     b48:	ce 01       	movw	r24, r28
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	b7 01       	movw	r22, r14
     b4e:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     b52:	8e 01       	movw	r16, r28
     b54:	0f 5e       	subi	r16, 0xEF	; 239
     b56:	1f 4f       	sbci	r17, 0xFF	; 255
     b58:	ce 01       	movw	r24, r28
     b5a:	05 96       	adiw	r24, 0x05	; 5
     b5c:	b8 01       	movw	r22, r16
     b5e:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     b62:	89 85       	ldd	r24, Y+9	; 0x09
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	40 f0       	brcs	.+16     	; 0xb78 <__gesf2+0x56>
     b68:	89 89       	ldd	r24, Y+17	; 0x11
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	28 f0       	brcs	.+10     	; 0xb78 <__gesf2+0x56>
     b6e:	c7 01       	movw	r24, r14
     b70:	b8 01       	movw	r22, r16
     b72:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fpcmp_parts_f>
     b76:	01 c0       	rjmp	.+2      	; 0xb7a <__gesf2+0x58>
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	68 96       	adiw	r28, 0x18	; 24
     b7c:	e6 e0       	ldi	r30, 0x06	; 6
     b7e:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x18>

00000b82 <__ltsf2>:
     b82:	a8 e1       	ldi	r26, 0x18	; 24
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e7 ec       	ldi	r30, 0xC7	; 199
     b88:	f5 e0       	ldi	r31, 0x05	; 5
     b8a:	0c 94 1d 09 	jmp	0x123a	; 0x123a <__prologue_saves__+0x18>
     b8e:	69 83       	std	Y+1, r22	; 0x01
     b90:	7a 83       	std	Y+2, r23	; 0x02
     b92:	8b 83       	std	Y+3, r24	; 0x03
     b94:	9c 83       	std	Y+4, r25	; 0x04
     b96:	2d 83       	std	Y+5, r18	; 0x05
     b98:	3e 83       	std	Y+6, r19	; 0x06
     b9a:	4f 83       	std	Y+7, r20	; 0x07
     b9c:	58 87       	std	Y+8, r21	; 0x08
     b9e:	89 e0       	ldi	r24, 0x09	; 9
     ba0:	e8 2e       	mov	r14, r24
     ba2:	f1 2c       	mov	r15, r1
     ba4:	ec 0e       	add	r14, r28
     ba6:	fd 1e       	adc	r15, r29
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	b7 01       	movw	r22, r14
     bae:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     bb2:	8e 01       	movw	r16, r28
     bb4:	0f 5e       	subi	r16, 0xEF	; 239
     bb6:	1f 4f       	sbci	r17, 0xFF	; 255
     bb8:	ce 01       	movw	r24, r28
     bba:	05 96       	adiw	r24, 0x05	; 5
     bbc:	b8 01       	movw	r22, r16
     bbe:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     bc2:	89 85       	ldd	r24, Y+9	; 0x09
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	40 f0       	brcs	.+16     	; 0xbd8 <__ltsf2+0x56>
     bc8:	89 89       	ldd	r24, Y+17	; 0x11
     bca:	82 30       	cpi	r24, 0x02	; 2
     bcc:	28 f0       	brcs	.+10     	; 0xbd8 <__ltsf2+0x56>
     bce:	c7 01       	movw	r24, r14
     bd0:	b8 01       	movw	r22, r16
     bd2:	0e 94 b8 08 	call	0x1170	; 0x1170 <__fpcmp_parts_f>
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <__ltsf2+0x58>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	68 96       	adiw	r28, 0x18	; 24
     bdc:	e6 e0       	ldi	r30, 0x06	; 6
     bde:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__epilogue_restores__+0x18>

00000be2 <__floatsisf>:
     be2:	a8 e0       	ldi	r26, 0x08	; 8
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 ef       	ldi	r30, 0xF7	; 247
     be8:	f5 e0       	ldi	r31, 0x05	; 5
     bea:	0c 94 1a 09 	jmp	0x1234	; 0x1234 <__prologue_saves__+0x12>
     bee:	9b 01       	movw	r18, r22
     bf0:	ac 01       	movw	r20, r24
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	89 83       	std	Y+1, r24	; 0x01
     bf6:	da 01       	movw	r26, r20
     bf8:	c9 01       	movw	r24, r18
     bfa:	88 27       	eor	r24, r24
     bfc:	b7 fd       	sbrc	r27, 7
     bfe:	83 95       	inc	r24
     c00:	99 27       	eor	r25, r25
     c02:	aa 27       	eor	r26, r26
     c04:	bb 27       	eor	r27, r27
     c06:	b8 2e       	mov	r11, r24
     c08:	21 15       	cp	r18, r1
     c0a:	31 05       	cpc	r19, r1
     c0c:	41 05       	cpc	r20, r1
     c0e:	51 05       	cpc	r21, r1
     c10:	19 f4       	brne	.+6      	; 0xc18 <__floatsisf+0x36>
     c12:	82 e0       	ldi	r24, 0x02	; 2
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	3a c0       	rjmp	.+116    	; 0xc8c <__floatsisf+0xaa>
     c18:	88 23       	and	r24, r24
     c1a:	a9 f0       	breq	.+42     	; 0xc46 <__floatsisf+0x64>
     c1c:	20 30       	cpi	r18, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	38 07       	cpc	r19, r24
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	48 07       	cpc	r20, r24
     c26:	80 e8       	ldi	r24, 0x80	; 128
     c28:	58 07       	cpc	r21, r24
     c2a:	29 f4       	brne	.+10     	; 0xc36 <__floatsisf+0x54>
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	9f ec       	ldi	r25, 0xCF	; 207
     c34:	30 c0       	rjmp	.+96     	; 0xc96 <__floatsisf+0xb4>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	e2 1a       	sub	r14, r18
     c3e:	f3 0a       	sbc	r15, r19
     c40:	04 0b       	sbc	r16, r20
     c42:	15 0b       	sbc	r17, r21
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <__floatsisf+0x68>
     c46:	79 01       	movw	r14, r18
     c48:	8a 01       	movw	r16, r20
     c4a:	8e e1       	ldi	r24, 0x1E	; 30
     c4c:	c8 2e       	mov	r12, r24
     c4e:	d1 2c       	mov	r13, r1
     c50:	dc 82       	std	Y+4, r13	; 0x04
     c52:	cb 82       	std	Y+3, r12	; 0x03
     c54:	ed 82       	std	Y+5, r14	; 0x05
     c56:	fe 82       	std	Y+6, r15	; 0x06
     c58:	0f 83       	std	Y+7, r16	; 0x07
     c5a:	18 87       	std	Y+8, r17	; 0x08
     c5c:	c8 01       	movw	r24, r16
     c5e:	b7 01       	movw	r22, r14
     c60:	0e 94 1c 07 	call	0xe38	; 0xe38 <__clzsi2>
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	18 16       	cp	r1, r24
     c68:	19 06       	cpc	r1, r25
     c6a:	84 f4       	brge	.+32     	; 0xc8c <__floatsisf+0xaa>
     c6c:	08 2e       	mov	r0, r24
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__floatsisf+0x96>
     c70:	ee 0c       	add	r14, r14
     c72:	ff 1c       	adc	r15, r15
     c74:	00 1f       	adc	r16, r16
     c76:	11 1f       	adc	r17, r17
     c78:	0a 94       	dec	r0
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__floatsisf+0x8e>
     c7c:	ed 82       	std	Y+5, r14	; 0x05
     c7e:	fe 82       	std	Y+6, r15	; 0x06
     c80:	0f 83       	std	Y+7, r16	; 0x07
     c82:	18 87       	std	Y+8, r17	; 0x08
     c84:	c8 1a       	sub	r12, r24
     c86:	d9 0a       	sbc	r13, r25
     c88:	dc 82       	std	Y+4, r13	; 0x04
     c8a:	cb 82       	std	Y+3, r12	; 0x03
     c8c:	ba 82       	std	Y+2, r11	; 0x02
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	0e 94 6b 07 	call	0xed6	; 0xed6 <__pack_f>
     c96:	28 96       	adiw	r28, 0x08	; 8
     c98:	e9 e0       	ldi	r30, 0x09	; 9
     c9a:	0c 94 36 09 	jmp	0x126c	; 0x126c <__epilogue_restores__+0x12>

00000c9e <__fixsfsi>:
     c9e:	ac e0       	ldi	r26, 0x0C	; 12
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e5 e5       	ldi	r30, 0x55	; 85
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__prologue_saves__+0x20>
     caa:	69 83       	std	Y+1, r22	; 0x01
     cac:	7a 83       	std	Y+2, r23	; 0x02
     cae:	8b 83       	std	Y+3, r24	; 0x03
     cb0:	9c 83       	std	Y+4, r25	; 0x04
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	be 01       	movw	r22, r28
     cb8:	6b 5f       	subi	r22, 0xFB	; 251
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	0e 94 40 08 	call	0x1080	; 0x1080 <__unpack_f>
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	61 f1       	breq	.+88     	; 0xd1e <__fixsfsi+0x80>
     cc6:	82 30       	cpi	r24, 0x02	; 2
     cc8:	50 f1       	brcs	.+84     	; 0xd1e <__fixsfsi+0x80>
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <__fixsfsi+0x38>
     cce:	8e 81       	ldd	r24, Y+6	; 0x06
     cd0:	88 23       	and	r24, r24
     cd2:	51 f1       	breq	.+84     	; 0xd28 <__fixsfsi+0x8a>
     cd4:	2e c0       	rjmp	.+92     	; 0xd32 <__fixsfsi+0x94>
     cd6:	2f 81       	ldd	r18, Y+7	; 0x07
     cd8:	38 85       	ldd	r19, Y+8	; 0x08
     cda:	37 fd       	sbrc	r19, 7
     cdc:	20 c0       	rjmp	.+64     	; 0xd1e <__fixsfsi+0x80>
     cde:	6e 81       	ldd	r22, Y+6	; 0x06
     ce0:	2f 31       	cpi	r18, 0x1F	; 31
     ce2:	31 05       	cpc	r19, r1
     ce4:	1c f0       	brlt	.+6      	; 0xcec <__fixsfsi+0x4e>
     ce6:	66 23       	and	r22, r22
     ce8:	f9 f0       	breq	.+62     	; 0xd28 <__fixsfsi+0x8a>
     cea:	23 c0       	rjmp	.+70     	; 0xd32 <__fixsfsi+0x94>
     cec:	8e e1       	ldi	r24, 0x1E	; 30
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	82 1b       	sub	r24, r18
     cf2:	93 0b       	sbc	r25, r19
     cf4:	29 85       	ldd	r18, Y+9	; 0x09
     cf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf8:	4b 85       	ldd	r20, Y+11	; 0x0b
     cfa:	5c 85       	ldd	r21, Y+12	; 0x0c
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <__fixsfsi+0x68>
     cfe:	56 95       	lsr	r21
     d00:	47 95       	ror	r20
     d02:	37 95       	ror	r19
     d04:	27 95       	ror	r18
     d06:	8a 95       	dec	r24
     d08:	d2 f7       	brpl	.-12     	; 0xcfe <__fixsfsi+0x60>
     d0a:	66 23       	and	r22, r22
     d0c:	b1 f0       	breq	.+44     	; 0xd3a <__fixsfsi+0x9c>
     d0e:	50 95       	com	r21
     d10:	40 95       	com	r20
     d12:	30 95       	com	r19
     d14:	21 95       	neg	r18
     d16:	3f 4f       	sbci	r19, 0xFF	; 255
     d18:	4f 4f       	sbci	r20, 0xFF	; 255
     d1a:	5f 4f       	sbci	r21, 0xFF	; 255
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <__fixsfsi+0x9c>
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	50 e0       	ldi	r21, 0x00	; 0
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <__fixsfsi+0x9c>
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f ef       	ldi	r20, 0xFF	; 255
     d2e:	5f e7       	ldi	r21, 0x7F	; 127
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <__fixsfsi+0x9c>
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e8       	ldi	r21, 0x80	; 128
     d3a:	b9 01       	movw	r22, r18
     d3c:	ca 01       	movw	r24, r20
     d3e:	2c 96       	adiw	r28, 0x0c	; 12
     d40:	e2 e0       	ldi	r30, 0x02	; 2
     d42:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__epilogue_restores__+0x20>

00000d46 <__floatunsisf>:
     d46:	a8 e0       	ldi	r26, 0x08	; 8
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e9 ea       	ldi	r30, 0xA9	; 169
     d4c:	f6 e0       	ldi	r31, 0x06	; 6
     d4e:	0c 94 19 09 	jmp	0x1232	; 0x1232 <__prologue_saves__+0x10>
     d52:	7b 01       	movw	r14, r22
     d54:	8c 01       	movw	r16, r24
     d56:	61 15       	cp	r22, r1
     d58:	71 05       	cpc	r23, r1
     d5a:	81 05       	cpc	r24, r1
     d5c:	91 05       	cpc	r25, r1
     d5e:	19 f4       	brne	.+6      	; 0xd66 <__floatunsisf+0x20>
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	60 c0       	rjmp	.+192    	; 0xe26 <__floatunsisf+0xe0>
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	8e e1       	ldi	r24, 0x1E	; 30
     d6c:	c8 2e       	mov	r12, r24
     d6e:	d1 2c       	mov	r13, r1
     d70:	dc 82       	std	Y+4, r13	; 0x04
     d72:	cb 82       	std	Y+3, r12	; 0x03
     d74:	ed 82       	std	Y+5, r14	; 0x05
     d76:	fe 82       	std	Y+6, r15	; 0x06
     d78:	0f 83       	std	Y+7, r16	; 0x07
     d7a:	18 87       	std	Y+8, r17	; 0x08
     d7c:	c8 01       	movw	r24, r16
     d7e:	b7 01       	movw	r22, r14
     d80:	0e 94 1c 07 	call	0xe38	; 0xe38 <__clzsi2>
     d84:	fc 01       	movw	r30, r24
     d86:	31 97       	sbiw	r30, 0x01	; 1
     d88:	f7 ff       	sbrs	r31, 7
     d8a:	3b c0       	rjmp	.+118    	; 0xe02 <__floatunsisf+0xbc>
     d8c:	22 27       	eor	r18, r18
     d8e:	33 27       	eor	r19, r19
     d90:	2e 1b       	sub	r18, r30
     d92:	3f 0b       	sbc	r19, r31
     d94:	57 01       	movw	r10, r14
     d96:	68 01       	movw	r12, r16
     d98:	02 2e       	mov	r0, r18
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <__floatunsisf+0x5e>
     d9c:	d6 94       	lsr	r13
     d9e:	c7 94       	ror	r12
     da0:	b7 94       	ror	r11
     da2:	a7 94       	ror	r10
     da4:	0a 94       	dec	r0
     da6:	d2 f7       	brpl	.-12     	; 0xd9c <__floatunsisf+0x56>
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a0 e0       	ldi	r26, 0x00	; 0
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <__floatunsisf+0x7c>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	aa 1f       	adc	r26, r26
     dc0:	bb 1f       	adc	r27, r27
     dc2:	2a 95       	dec	r18
     dc4:	d2 f7       	brpl	.-12     	; 0xdba <__floatunsisf+0x74>
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	a1 09       	sbc	r26, r1
     dca:	b1 09       	sbc	r27, r1
     dcc:	8e 21       	and	r24, r14
     dce:	9f 21       	and	r25, r15
     dd0:	a0 23       	and	r26, r16
     dd2:	b1 23       	and	r27, r17
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	a1 05       	cpc	r26, r1
     dd8:	b1 05       	cpc	r27, r1
     dda:	21 f0       	breq	.+8      	; 0xde4 <__floatunsisf+0x9e>
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	4a 29       	or	r20, r10
     de6:	5b 29       	or	r21, r11
     de8:	6c 29       	or	r22, r12
     dea:	7d 29       	or	r23, r13
     dec:	4d 83       	std	Y+5, r20	; 0x05
     dee:	5e 83       	std	Y+6, r21	; 0x06
     df0:	6f 83       	std	Y+7, r22	; 0x07
     df2:	78 87       	std	Y+8, r23	; 0x08
     df4:	8e e1       	ldi	r24, 0x1E	; 30
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	8e 1b       	sub	r24, r30
     dfa:	9f 0b       	sbc	r25, r31
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
     e00:	12 c0       	rjmp	.+36     	; 0xe26 <__floatunsisf+0xe0>
     e02:	30 97       	sbiw	r30, 0x00	; 0
     e04:	81 f0       	breq	.+32     	; 0xe26 <__floatunsisf+0xe0>
     e06:	0e 2e       	mov	r0, r30
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <__floatunsisf+0xcc>
     e0a:	ee 0c       	add	r14, r14
     e0c:	ff 1c       	adc	r15, r15
     e0e:	00 1f       	adc	r16, r16
     e10:	11 1f       	adc	r17, r17
     e12:	0a 94       	dec	r0
     e14:	d2 f7       	brpl	.-12     	; 0xe0a <__floatunsisf+0xc4>
     e16:	ed 82       	std	Y+5, r14	; 0x05
     e18:	fe 82       	std	Y+6, r15	; 0x06
     e1a:	0f 83       	std	Y+7, r16	; 0x07
     e1c:	18 87       	std	Y+8, r17	; 0x08
     e1e:	ce 1a       	sub	r12, r30
     e20:	df 0a       	sbc	r13, r31
     e22:	dc 82       	std	Y+4, r13	; 0x04
     e24:	cb 82       	std	Y+3, r12	; 0x03
     e26:	1a 82       	std	Y+2, r1	; 0x02
     e28:	ce 01       	movw	r24, r28
     e2a:	01 96       	adiw	r24, 0x01	; 1
     e2c:	0e 94 6b 07 	call	0xed6	; 0xed6 <__pack_f>
     e30:	28 96       	adiw	r28, 0x08	; 8
     e32:	ea e0       	ldi	r30, 0x0A	; 10
     e34:	0c 94 35 09 	jmp	0x126a	; 0x126a <__epilogue_restores__+0x10>

00000e38 <__clzsi2>:
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	7b 01       	movw	r14, r22
     e42:	8c 01       	movw	r16, r24
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	e8 16       	cp	r14, r24
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	f8 06       	cpc	r15, r24
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	08 07       	cpc	r16, r24
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	18 07       	cpc	r17, r24
     e54:	88 f4       	brcc	.+34     	; 0xe78 <__clzsi2+0x40>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	e8 16       	cp	r14, r24
     e5a:	f1 04       	cpc	r15, r1
     e5c:	01 05       	cpc	r16, r1
     e5e:	11 05       	cpc	r17, r1
     e60:	31 f0       	breq	.+12     	; 0xe6e <__clzsi2+0x36>
     e62:	28 f0       	brcs	.+10     	; 0xe6e <__clzsi2+0x36>
     e64:	88 e0       	ldi	r24, 0x08	; 8
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e0       	ldi	r26, 0x00	; 0
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	17 c0       	rjmp	.+46     	; 0xe9c <__clzsi2+0x64>
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	12 c0       	rjmp	.+36     	; 0xe9c <__clzsi2+0x64>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	e8 16       	cp	r14, r24
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	f8 06       	cpc	r15, r24
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	08 07       	cpc	r16, r24
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	18 07       	cpc	r17, r24
     e88:	28 f0       	brcs	.+10     	; 0xe94 <__clzsi2+0x5c>
     e8a:	88 e1       	ldi	r24, 0x18	; 24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e0       	ldi	r26, 0x00	; 0
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	04 c0       	rjmp	.+8      	; 0xe9c <__clzsi2+0x64>
     e94:	80 e1       	ldi	r24, 0x10	; 16
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	20 e2       	ldi	r18, 0x20	; 32
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	28 1b       	sub	r18, r24
     ea6:	39 0b       	sbc	r19, r25
     ea8:	4a 0b       	sbc	r20, r26
     eaa:	5b 0b       	sbc	r21, r27
     eac:	04 c0       	rjmp	.+8      	; 0xeb6 <__clzsi2+0x7e>
     eae:	16 95       	lsr	r17
     eb0:	07 95       	ror	r16
     eb2:	f7 94       	ror	r15
     eb4:	e7 94       	ror	r14
     eb6:	8a 95       	dec	r24
     eb8:	d2 f7       	brpl	.-12     	; 0xeae <__clzsi2+0x76>
     eba:	f7 01       	movw	r30, r14
     ebc:	e8 59       	subi	r30, 0x98	; 152
     ebe:	ff 4f       	sbci	r31, 0xFF	; 255
     ec0:	80 81       	ld	r24, Z
     ec2:	28 1b       	sub	r18, r24
     ec4:	31 09       	sbc	r19, r1
     ec6:	41 09       	sbc	r20, r1
     ec8:	51 09       	sbc	r21, r1
     eca:	c9 01       	movw	r24, r18
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	08 95       	ret

00000ed6 <__pack_f>:
     ed6:	df 92       	push	r13
     ed8:	ef 92       	push	r14
     eda:	ff 92       	push	r15
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	fc 01       	movw	r30, r24
     ee2:	e4 80       	ldd	r14, Z+4	; 0x04
     ee4:	f5 80       	ldd	r15, Z+5	; 0x05
     ee6:	06 81       	ldd	r16, Z+6	; 0x06
     ee8:	17 81       	ldd	r17, Z+7	; 0x07
     eea:	d1 80       	ldd	r13, Z+1	; 0x01
     eec:	80 81       	ld	r24, Z
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	48 f4       	brcc	.+18     	; 0xf04 <__pack_f+0x2e>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a0 e1       	ldi	r26, 0x10	; 16
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	e8 2a       	or	r14, r24
     efc:	f9 2a       	or	r15, r25
     efe:	0a 2b       	or	r16, r26
     f00:	1b 2b       	or	r17, r27
     f02:	a5 c0       	rjmp	.+330    	; 0x104e <__pack_f+0x178>
     f04:	84 30       	cpi	r24, 0x04	; 4
     f06:	09 f4       	brne	.+2      	; 0xf0a <__pack_f+0x34>
     f08:	9f c0       	rjmp	.+318    	; 0x1048 <__pack_f+0x172>
     f0a:	82 30       	cpi	r24, 0x02	; 2
     f0c:	21 f4       	brne	.+8      	; 0xf16 <__pack_f+0x40>
     f0e:	ee 24       	eor	r14, r14
     f10:	ff 24       	eor	r15, r15
     f12:	87 01       	movw	r16, r14
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <__pack_f+0x4a>
     f16:	e1 14       	cp	r14, r1
     f18:	f1 04       	cpc	r15, r1
     f1a:	01 05       	cpc	r16, r1
     f1c:	11 05       	cpc	r17, r1
     f1e:	19 f4       	brne	.+6      	; 0xf26 <__pack_f+0x50>
     f20:	e0 e0       	ldi	r30, 0x00	; 0
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	96 c0       	rjmp	.+300    	; 0x1052 <__pack_f+0x17c>
     f26:	62 81       	ldd	r22, Z+2	; 0x02
     f28:	73 81       	ldd	r23, Z+3	; 0x03
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	62 38       	cpi	r22, 0x82	; 130
     f2e:	79 07       	cpc	r23, r25
     f30:	0c f0       	brlt	.+2      	; 0xf34 <__pack_f+0x5e>
     f32:	5b c0       	rjmp	.+182    	; 0xfea <__pack_f+0x114>
     f34:	22 e8       	ldi	r18, 0x82	; 130
     f36:	3f ef       	ldi	r19, 0xFF	; 255
     f38:	26 1b       	sub	r18, r22
     f3a:	37 0b       	sbc	r19, r23
     f3c:	2a 31       	cpi	r18, 0x1A	; 26
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f0       	brlt	.+10     	; 0xf4c <__pack_f+0x76>
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e0       	ldi	r20, 0x00	; 0
     f48:	50 e0       	ldi	r21, 0x00	; 0
     f4a:	2a c0       	rjmp	.+84     	; 0xfa0 <__pack_f+0xca>
     f4c:	b8 01       	movw	r22, r16
     f4e:	a7 01       	movw	r20, r14
     f50:	02 2e       	mov	r0, r18
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <__pack_f+0x86>
     f54:	76 95       	lsr	r23
     f56:	67 95       	ror	r22
     f58:	57 95       	ror	r21
     f5a:	47 95       	ror	r20
     f5c:	0a 94       	dec	r0
     f5e:	d2 f7       	brpl	.-12     	; 0xf54 <__pack_f+0x7e>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a0 e0       	ldi	r26, 0x00	; 0
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <__pack_f+0x9c>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	aa 1f       	adc	r26, r26
     f70:	bb 1f       	adc	r27, r27
     f72:	2a 95       	dec	r18
     f74:	d2 f7       	brpl	.-12     	; 0xf6a <__pack_f+0x94>
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	a1 09       	sbc	r26, r1
     f7a:	b1 09       	sbc	r27, r1
     f7c:	8e 21       	and	r24, r14
     f7e:	9f 21       	and	r25, r15
     f80:	a0 23       	and	r26, r16
     f82:	b1 23       	and	r27, r17
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	a1 05       	cpc	r26, r1
     f88:	b1 05       	cpc	r27, r1
     f8a:	21 f0       	breq	.+8      	; 0xf94 <__pack_f+0xbe>
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	9a 01       	movw	r18, r20
     f96:	ab 01       	movw	r20, r22
     f98:	28 2b       	or	r18, r24
     f9a:	39 2b       	or	r19, r25
     f9c:	4a 2b       	or	r20, r26
     f9e:	5b 2b       	or	r21, r27
     fa0:	da 01       	movw	r26, r20
     fa2:	c9 01       	movw	r24, r18
     fa4:	8f 77       	andi	r24, 0x7F	; 127
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	a0 70       	andi	r26, 0x00	; 0
     faa:	b0 70       	andi	r27, 0x00	; 0
     fac:	80 34       	cpi	r24, 0x40	; 64
     fae:	91 05       	cpc	r25, r1
     fb0:	a1 05       	cpc	r26, r1
     fb2:	b1 05       	cpc	r27, r1
     fb4:	39 f4       	brne	.+14     	; 0xfc4 <__pack_f+0xee>
     fb6:	27 ff       	sbrs	r18, 7
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <__pack_f+0xf6>
     fba:	20 5c       	subi	r18, 0xC0	; 192
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	4f 4f       	sbci	r20, 0xFF	; 255
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <__pack_f+0xf6>
     fc4:	21 5c       	subi	r18, 0xC1	; 193
     fc6:	3f 4f       	sbci	r19, 0xFF	; 255
     fc8:	4f 4f       	sbci	r20, 0xFF	; 255
     fca:	5f 4f       	sbci	r21, 0xFF	; 255
     fcc:	e0 e0       	ldi	r30, 0x00	; 0
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	20 30       	cpi	r18, 0x00	; 0
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	3a 07       	cpc	r19, r26
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	4a 07       	cpc	r20, r26
     fda:	a0 e4       	ldi	r26, 0x40	; 64
     fdc:	5a 07       	cpc	r21, r26
     fde:	10 f0       	brcs	.+4      	; 0xfe4 <__pack_f+0x10e>
     fe0:	e1 e0       	ldi	r30, 0x01	; 1
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	79 01       	movw	r14, r18
     fe6:	8a 01       	movw	r16, r20
     fe8:	27 c0       	rjmp	.+78     	; 0x1038 <__pack_f+0x162>
     fea:	60 38       	cpi	r22, 0x80	; 128
     fec:	71 05       	cpc	r23, r1
     fee:	64 f5       	brge	.+88     	; 0x1048 <__pack_f+0x172>
     ff0:	fb 01       	movw	r30, r22
     ff2:	e1 58       	subi	r30, 0x81	; 129
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	d8 01       	movw	r26, r16
     ff8:	c7 01       	movw	r24, r14
     ffa:	8f 77       	andi	r24, 0x7F	; 127
     ffc:	90 70       	andi	r25, 0x00	; 0
     ffe:	a0 70       	andi	r26, 0x00	; 0
    1000:	b0 70       	andi	r27, 0x00	; 0
    1002:	80 34       	cpi	r24, 0x40	; 64
    1004:	91 05       	cpc	r25, r1
    1006:	a1 05       	cpc	r26, r1
    1008:	b1 05       	cpc	r27, r1
    100a:	39 f4       	brne	.+14     	; 0x101a <__pack_f+0x144>
    100c:	e7 fe       	sbrs	r14, 7
    100e:	0d c0       	rjmp	.+26     	; 0x102a <__pack_f+0x154>
    1010:	80 e4       	ldi	r24, 0x40	; 64
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a0 e0       	ldi	r26, 0x00	; 0
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__pack_f+0x14c>
    101a:	8f e3       	ldi	r24, 0x3F	; 63
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e8 0e       	add	r14, r24
    1024:	f9 1e       	adc	r15, r25
    1026:	0a 1f       	adc	r16, r26
    1028:	1b 1f       	adc	r17, r27
    102a:	17 ff       	sbrs	r17, 7
    102c:	05 c0       	rjmp	.+10     	; 0x1038 <__pack_f+0x162>
    102e:	16 95       	lsr	r17
    1030:	07 95       	ror	r16
    1032:	f7 94       	ror	r15
    1034:	e7 94       	ror	r14
    1036:	31 96       	adiw	r30, 0x01	; 1
    1038:	87 e0       	ldi	r24, 0x07	; 7
    103a:	16 95       	lsr	r17
    103c:	07 95       	ror	r16
    103e:	f7 94       	ror	r15
    1040:	e7 94       	ror	r14
    1042:	8a 95       	dec	r24
    1044:	d1 f7       	brne	.-12     	; 0x103a <__pack_f+0x164>
    1046:	05 c0       	rjmp	.+10     	; 0x1052 <__pack_f+0x17c>
    1048:	ee 24       	eor	r14, r14
    104a:	ff 24       	eor	r15, r15
    104c:	87 01       	movw	r16, r14
    104e:	ef ef       	ldi	r30, 0xFF	; 255
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	6e 2f       	mov	r22, r30
    1054:	67 95       	ror	r22
    1056:	66 27       	eor	r22, r22
    1058:	67 95       	ror	r22
    105a:	90 2f       	mov	r25, r16
    105c:	9f 77       	andi	r25, 0x7F	; 127
    105e:	d7 94       	ror	r13
    1060:	dd 24       	eor	r13, r13
    1062:	d7 94       	ror	r13
    1064:	8e 2f       	mov	r24, r30
    1066:	86 95       	lsr	r24
    1068:	49 2f       	mov	r20, r25
    106a:	46 2b       	or	r20, r22
    106c:	58 2f       	mov	r21, r24
    106e:	5d 29       	or	r21, r13
    1070:	b7 01       	movw	r22, r14
    1072:	ca 01       	movw	r24, r20
    1074:	1f 91       	pop	r17
    1076:	0f 91       	pop	r16
    1078:	ff 90       	pop	r15
    107a:	ef 90       	pop	r14
    107c:	df 90       	pop	r13
    107e:	08 95       	ret

00001080 <__unpack_f>:
    1080:	fc 01       	movw	r30, r24
    1082:	db 01       	movw	r26, r22
    1084:	40 81       	ld	r20, Z
    1086:	51 81       	ldd	r21, Z+1	; 0x01
    1088:	22 81       	ldd	r18, Z+2	; 0x02
    108a:	62 2f       	mov	r22, r18
    108c:	6f 77       	andi	r22, 0x7F	; 127
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	22 1f       	adc	r18, r18
    1092:	22 27       	eor	r18, r18
    1094:	22 1f       	adc	r18, r18
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	89 2f       	mov	r24, r25
    109a:	88 0f       	add	r24, r24
    109c:	82 2b       	or	r24, r18
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	99 1f       	adc	r25, r25
    10a4:	99 27       	eor	r25, r25
    10a6:	99 1f       	adc	r25, r25
    10a8:	11 96       	adiw	r26, 0x01	; 1
    10aa:	9c 93       	st	X, r25
    10ac:	11 97       	sbiw	r26, 0x01	; 1
    10ae:	21 15       	cp	r18, r1
    10b0:	31 05       	cpc	r19, r1
    10b2:	a9 f5       	brne	.+106    	; 0x111e <__unpack_f+0x9e>
    10b4:	41 15       	cp	r20, r1
    10b6:	51 05       	cpc	r21, r1
    10b8:	61 05       	cpc	r22, r1
    10ba:	71 05       	cpc	r23, r1
    10bc:	11 f4       	brne	.+4      	; 0x10c2 <__unpack_f+0x42>
    10be:	82 e0       	ldi	r24, 0x02	; 2
    10c0:	37 c0       	rjmp	.+110    	; 0x1130 <__unpack_f+0xb0>
    10c2:	82 e8       	ldi	r24, 0x82	; 130
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	13 96       	adiw	r26, 0x03	; 3
    10c8:	9c 93       	st	X, r25
    10ca:	8e 93       	st	-X, r24
    10cc:	12 97       	sbiw	r26, 0x02	; 2
    10ce:	9a 01       	movw	r18, r20
    10d0:	ab 01       	movw	r20, r22
    10d2:	67 e0       	ldi	r22, 0x07	; 7
    10d4:	22 0f       	add	r18, r18
    10d6:	33 1f       	adc	r19, r19
    10d8:	44 1f       	adc	r20, r20
    10da:	55 1f       	adc	r21, r21
    10dc:	6a 95       	dec	r22
    10de:	d1 f7       	brne	.-12     	; 0x10d4 <__unpack_f+0x54>
    10e0:	83 e0       	ldi	r24, 0x03	; 3
    10e2:	8c 93       	st	X, r24
    10e4:	0d c0       	rjmp	.+26     	; 0x1100 <__unpack_f+0x80>
    10e6:	22 0f       	add	r18, r18
    10e8:	33 1f       	adc	r19, r19
    10ea:	44 1f       	adc	r20, r20
    10ec:	55 1f       	adc	r21, r21
    10ee:	12 96       	adiw	r26, 0x02	; 2
    10f0:	8d 91       	ld	r24, X+
    10f2:	9c 91       	ld	r25, X
    10f4:	13 97       	sbiw	r26, 0x03	; 3
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	13 96       	adiw	r26, 0x03	; 3
    10fa:	9c 93       	st	X, r25
    10fc:	8e 93       	st	-X, r24
    10fe:	12 97       	sbiw	r26, 0x02	; 2
    1100:	20 30       	cpi	r18, 0x00	; 0
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	38 07       	cpc	r19, r24
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	48 07       	cpc	r20, r24
    110a:	80 e4       	ldi	r24, 0x40	; 64
    110c:	58 07       	cpc	r21, r24
    110e:	58 f3       	brcs	.-42     	; 0x10e6 <__unpack_f+0x66>
    1110:	14 96       	adiw	r26, 0x04	; 4
    1112:	2d 93       	st	X+, r18
    1114:	3d 93       	st	X+, r19
    1116:	4d 93       	st	X+, r20
    1118:	5c 93       	st	X, r21
    111a:	17 97       	sbiw	r26, 0x07	; 7
    111c:	08 95       	ret
    111e:	2f 3f       	cpi	r18, 0xFF	; 255
    1120:	31 05       	cpc	r19, r1
    1122:	79 f4       	brne	.+30     	; 0x1142 <__unpack_f+0xc2>
    1124:	41 15       	cp	r20, r1
    1126:	51 05       	cpc	r21, r1
    1128:	61 05       	cpc	r22, r1
    112a:	71 05       	cpc	r23, r1
    112c:	19 f4       	brne	.+6      	; 0x1134 <__unpack_f+0xb4>
    112e:	84 e0       	ldi	r24, 0x04	; 4
    1130:	8c 93       	st	X, r24
    1132:	08 95       	ret
    1134:	64 ff       	sbrs	r22, 4
    1136:	03 c0       	rjmp	.+6      	; 0x113e <__unpack_f+0xbe>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	8c 93       	st	X, r24
    113c:	12 c0       	rjmp	.+36     	; 0x1162 <__unpack_f+0xe2>
    113e:	1c 92       	st	X, r1
    1140:	10 c0       	rjmp	.+32     	; 0x1162 <__unpack_f+0xe2>
    1142:	2f 57       	subi	r18, 0x7F	; 127
    1144:	30 40       	sbci	r19, 0x00	; 0
    1146:	13 96       	adiw	r26, 0x03	; 3
    1148:	3c 93       	st	X, r19
    114a:	2e 93       	st	-X, r18
    114c:	12 97       	sbiw	r26, 0x02	; 2
    114e:	83 e0       	ldi	r24, 0x03	; 3
    1150:	8c 93       	st	X, r24
    1152:	87 e0       	ldi	r24, 0x07	; 7
    1154:	44 0f       	add	r20, r20
    1156:	55 1f       	adc	r21, r21
    1158:	66 1f       	adc	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	8a 95       	dec	r24
    115e:	d1 f7       	brne	.-12     	; 0x1154 <__unpack_f+0xd4>
    1160:	70 64       	ori	r23, 0x40	; 64
    1162:	14 96       	adiw	r26, 0x04	; 4
    1164:	4d 93       	st	X+, r20
    1166:	5d 93       	st	X+, r21
    1168:	6d 93       	st	X+, r22
    116a:	7c 93       	st	X, r23
    116c:	17 97       	sbiw	r26, 0x07	; 7
    116e:	08 95       	ret

00001170 <__fpcmp_parts_f>:
    1170:	1f 93       	push	r17
    1172:	dc 01       	movw	r26, r24
    1174:	fb 01       	movw	r30, r22
    1176:	9c 91       	ld	r25, X
    1178:	92 30       	cpi	r25, 0x02	; 2
    117a:	08 f4       	brcc	.+2      	; 0x117e <__fpcmp_parts_f+0xe>
    117c:	47 c0       	rjmp	.+142    	; 0x120c <__fpcmp_parts_f+0x9c>
    117e:	80 81       	ld	r24, Z
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	08 f4       	brcc	.+2      	; 0x1186 <__fpcmp_parts_f+0x16>
    1184:	43 c0       	rjmp	.+134    	; 0x120c <__fpcmp_parts_f+0x9c>
    1186:	94 30       	cpi	r25, 0x04	; 4
    1188:	51 f4       	brne	.+20     	; 0x119e <__fpcmp_parts_f+0x2e>
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	1c 91       	ld	r17, X
    118e:	84 30       	cpi	r24, 0x04	; 4
    1190:	99 f5       	brne	.+102    	; 0x11f8 <__fpcmp_parts_f+0x88>
    1192:	81 81       	ldd	r24, Z+1	; 0x01
    1194:	68 2f       	mov	r22, r24
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	61 1b       	sub	r22, r17
    119a:	71 09       	sbc	r23, r1
    119c:	3f c0       	rjmp	.+126    	; 0x121c <__fpcmp_parts_f+0xac>
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	21 f0       	breq	.+8      	; 0x11aa <__fpcmp_parts_f+0x3a>
    11a2:	92 30       	cpi	r25, 0x02	; 2
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <__fpcmp_parts_f+0x42>
    11a6:	82 30       	cpi	r24, 0x02	; 2
    11a8:	b9 f1       	breq	.+110    	; 0x1218 <__fpcmp_parts_f+0xa8>
    11aa:	81 81       	ldd	r24, Z+1	; 0x01
    11ac:	88 23       	and	r24, r24
    11ae:	89 f1       	breq	.+98     	; 0x1212 <__fpcmp_parts_f+0xa2>
    11b0:	2d c0       	rjmp	.+90     	; 0x120c <__fpcmp_parts_f+0x9c>
    11b2:	11 96       	adiw	r26, 0x01	; 1
    11b4:	1c 91       	ld	r17, X
    11b6:	11 97       	sbiw	r26, 0x01	; 1
    11b8:	82 30       	cpi	r24, 0x02	; 2
    11ba:	f1 f0       	breq	.+60     	; 0x11f8 <__fpcmp_parts_f+0x88>
    11bc:	81 81       	ldd	r24, Z+1	; 0x01
    11be:	18 17       	cp	r17, r24
    11c0:	d9 f4       	brne	.+54     	; 0x11f8 <__fpcmp_parts_f+0x88>
    11c2:	12 96       	adiw	r26, 0x02	; 2
    11c4:	2d 91       	ld	r18, X+
    11c6:	3c 91       	ld	r19, X
    11c8:	13 97       	sbiw	r26, 0x03	; 3
    11ca:	82 81       	ldd	r24, Z+2	; 0x02
    11cc:	93 81       	ldd	r25, Z+3	; 0x03
    11ce:	82 17       	cp	r24, r18
    11d0:	93 07       	cpc	r25, r19
    11d2:	94 f0       	brlt	.+36     	; 0x11f8 <__fpcmp_parts_f+0x88>
    11d4:	28 17       	cp	r18, r24
    11d6:	39 07       	cpc	r19, r25
    11d8:	bc f0       	brlt	.+46     	; 0x1208 <__fpcmp_parts_f+0x98>
    11da:	14 96       	adiw	r26, 0x04	; 4
    11dc:	8d 91       	ld	r24, X+
    11de:	9d 91       	ld	r25, X+
    11e0:	0d 90       	ld	r0, X+
    11e2:	bc 91       	ld	r27, X
    11e4:	a0 2d       	mov	r26, r0
    11e6:	24 81       	ldd	r18, Z+4	; 0x04
    11e8:	35 81       	ldd	r19, Z+5	; 0x05
    11ea:	46 81       	ldd	r20, Z+6	; 0x06
    11ec:	57 81       	ldd	r21, Z+7	; 0x07
    11ee:	28 17       	cp	r18, r24
    11f0:	39 07       	cpc	r19, r25
    11f2:	4a 07       	cpc	r20, r26
    11f4:	5b 07       	cpc	r21, r27
    11f6:	18 f4       	brcc	.+6      	; 0x11fe <__fpcmp_parts_f+0x8e>
    11f8:	11 23       	and	r17, r17
    11fa:	41 f0       	breq	.+16     	; 0x120c <__fpcmp_parts_f+0x9c>
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <__fpcmp_parts_f+0xa2>
    11fe:	82 17       	cp	r24, r18
    1200:	93 07       	cpc	r25, r19
    1202:	a4 07       	cpc	r26, r20
    1204:	b5 07       	cpc	r27, r21
    1206:	40 f4       	brcc	.+16     	; 0x1218 <__fpcmp_parts_f+0xa8>
    1208:	11 23       	and	r17, r17
    120a:	19 f0       	breq	.+6      	; 0x1212 <__fpcmp_parts_f+0xa2>
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	70 e0       	ldi	r23, 0x00	; 0
    1210:	05 c0       	rjmp	.+10     	; 0x121c <__fpcmp_parts_f+0xac>
    1212:	6f ef       	ldi	r22, 0xFF	; 255
    1214:	7f ef       	ldi	r23, 0xFF	; 255
    1216:	02 c0       	rjmp	.+4      	; 0x121c <__fpcmp_parts_f+0xac>
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	cb 01       	movw	r24, r22
    121e:	1f 91       	pop	r17
    1220:	08 95       	ret

00001222 <__prologue_saves__>:
    1222:	2f 92       	push	r2
    1224:	3f 92       	push	r3
    1226:	4f 92       	push	r4
    1228:	5f 92       	push	r5
    122a:	6f 92       	push	r6
    122c:	7f 92       	push	r7
    122e:	8f 92       	push	r8
    1230:	9f 92       	push	r9
    1232:	af 92       	push	r10
    1234:	bf 92       	push	r11
    1236:	cf 92       	push	r12
    1238:	df 92       	push	r13
    123a:	ef 92       	push	r14
    123c:	ff 92       	push	r15
    123e:	0f 93       	push	r16
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	ca 1b       	sub	r28, r26
    124c:	db 0b       	sbc	r29, r27
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	09 94       	ijmp

0000125a <__epilogue_restores__>:
    125a:	2a 88       	ldd	r2, Y+18	; 0x12
    125c:	39 88       	ldd	r3, Y+17	; 0x11
    125e:	48 88       	ldd	r4, Y+16	; 0x10
    1260:	5f 84       	ldd	r5, Y+15	; 0x0f
    1262:	6e 84       	ldd	r6, Y+14	; 0x0e
    1264:	7d 84       	ldd	r7, Y+13	; 0x0d
    1266:	8c 84       	ldd	r8, Y+12	; 0x0c
    1268:	9b 84       	ldd	r9, Y+11	; 0x0b
    126a:	aa 84       	ldd	r10, Y+10	; 0x0a
    126c:	b9 84       	ldd	r11, Y+9	; 0x09
    126e:	c8 84       	ldd	r12, Y+8	; 0x08
    1270:	df 80       	ldd	r13, Y+7	; 0x07
    1272:	ee 80       	ldd	r14, Y+6	; 0x06
    1274:	fd 80       	ldd	r15, Y+5	; 0x05
    1276:	0c 81       	ldd	r16, Y+4	; 0x04
    1278:	1b 81       	ldd	r17, Y+3	; 0x03
    127a:	aa 81       	ldd	r26, Y+2	; 0x02
    127c:	b9 81       	ldd	r27, Y+1	; 0x01
    127e:	ce 0f       	add	r28, r30
    1280:	d1 1d       	adc	r29, r1
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	ed 01       	movw	r28, r26
    128e:	08 95       	ret

00001290 <_exit>:
    1290:	f8 94       	cli

00001292 <__stop_program>:
    1292:	ff cf       	rjmp	.-2      	; 0x1292 <__stop_program>
