
Controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000362  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800060  00800060  000003d6  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001c9  00000000  00000000  000003f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004f9  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000227  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000561  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e9  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000073  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  74:	0c 94 af 01 	jmp	0x35e	; 0x35e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <modify>:
}
/***** Main Methods *****/

void modify(){
	//analogLEDTest();
}
  7c:	08 95       	ret

0000007e <setupMIDI>:


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
  7e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) baudrate;
  80:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
  82:	88 e1       	ldi	r24, 0x18	; 24
  84:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
  86:	86 e8       	ldi	r24, 0x86	; 134
  88:	80 bd       	out	0x20, r24	; 32
}
  8a:	08 95       	ret

0000008c <setupPins>:
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
  8c:	8f ef       	ldi	r24, 0xFF	; 255
  8e:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
  90:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
  92:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	8b bb       	out	0x1b, r24	; 27
	DDRD = 0x00;
  98:	11 ba       	out	0x11, r1	; 17
}
  9a:	08 95       	ret

0000009c <setupAnalog>:
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
  9c:	87 e4       	ldi	r24, 0x47	; 71
  9e:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	86 b9       	out	0x06, r24	; 6
}
  a4:	08 95       	ret

000000a6 <setupTimer>:
void setupTimer(){
	TCCR1A = 0x00; // enable normal mode interrupts
  a6:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << CS10) | (1 << CS12); //prescaler 1024
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1 << OCIE1B);
  ac:	88 e0       	ldi	r24, 0x08	; 8
  ae:	89 bf       	out	0x39, r24	; 57
	sei();
  b0:	78 94       	sei
	//OCR1A = 3906; // 1000ms delay  equation = (500*10^-3/(1/3906.25));
	OCR1B = 1952; // 500ms Delay (note this causes the leds to turn off after button press)
  b2:	80 ea       	ldi	r24, 0xA0	; 160
  b4:	97 e0       	ldi	r25, 0x07	; 7
  b6:	99 bd       	out	0x29, r25	; 41
  b8:	88 bd       	out	0x28, r24	; 40
	TCNT1 = 0;
  ba:	1d bc       	out	0x2d, r1	; 45
  bc:	1c bc       	out	0x2c, r1	; 44

}
  be:	08 95       	ret

000000c0 <ledOFF>:
	start_addr = 0;
	
}

void ledOFF(){
	PORTB = 0x00;
  c0:	18 ba       	out	0x18, r1	; 24
}
  c2:	08 95       	ret

000000c4 <ReadADC>:

uint16_t ReadADC(){
	//Start a single conversion
	ADCSRA |= (1 << ADSC);
  c4:	36 9a       	sbi	0x06, 6	; 6
	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  c6:	34 9b       	sbis	0x06, 4	; 6
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <ReadADC+0x2>
	//clear data (conversion is complete)
	ADCSRA |= (1 << ADIF);
  ca:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  cc:	24 b1       	in	r18, 0x04	; 4
  ce:	35 b1       	in	r19, 0x05	; 5
}
  d0:	c9 01       	movw	r24, r18
  d2:	08 95       	ret

000000d4 <analogLEDTest>:

void analogLEDTest(){
		adc_value = ReadADC();
  d4:	0e 94 62 00 	call	0xc4	; 0xc4 <ReadADC>
  d8:	9c 01       	movw	r18, r24
  da:	90 93 6d 00 	sts	0x006D, r25
  de:	80 93 6c 00 	sts	0x006C, r24
		if (adc_value > 30){
  e2:	8f 31       	cpi	r24, 0x1F	; 31
  e4:	91 05       	cpc	r25, r1
  e6:	28 f1       	brcs	.+74     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB0);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 60){
  ec:	2d 33       	cpi	r18, 0x3D	; 61
  ee:	31 05       	cpc	r19, r1
  f0:	00 f1       	brcs	.+64     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB1);
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 90){
  f6:	2b 35       	cpi	r18, 0x5B	; 91
  f8:	31 05       	cpc	r19, r1
  fa:	d8 f0       	brcs	.+54     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB2);
  fc:	84 e0       	ldi	r24, 0x04	; 4
  fe:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 120){
 100:	29 37       	cpi	r18, 0x79	; 121
 102:	31 05       	cpc	r19, r1
 104:	b0 f0       	brcs	.+44     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB3);
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 150){
 10a:	27 39       	cpi	r18, 0x97	; 151
 10c:	31 05       	cpc	r19, r1
 10e:	88 f0       	brcs	.+34     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB4);
 110:	80 e1       	ldi	r24, 0x10	; 16
 112:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 180){
 114:	25 3b       	cpi	r18, 0xB5	; 181
 116:	31 05       	cpc	r19, r1
 118:	60 f0       	brcs	.+24     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB5);
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 210){
 11e:	23 3d       	cpi	r18, 0xD3	; 211
 120:	31 05       	cpc	r19, r1
 122:	38 f0       	brcs	.+14     	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB6);
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value > 240){
 128:	21 3f       	cpi	r18, 0xF1	; 241
 12a:	31 05       	cpc	r19, r1
 12c:	10 f0       	brcs	.+4      	; 0x132 <analogLEDTest+0x5e>
			PORTB = (1 << PORTB7);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	88 bb       	out	0x18, r24	; 24
		}
		if (adc_value >= 240){
 132:	20 3f       	cpi	r18, 0xF0	; 240
 134:	31 05       	cpc	r19, r1
 136:	10 f0       	brcs	.+4      	; 0x13c <analogLEDTest+0x68>
			PORTB = 0xFF;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	08 95       	ret

0000013e <midi_Transmit>:
		}
	}

void midi_Transmit( unsigned char data){
	/* Wait for empty transmit buffer */
	while(!(UCSRA & (1 << UDRE)) ) ;
 13e:	5d 9b       	sbis	0x0b, 5	; 11
 140:	fe cf       	rjmp	.-4      	; 0x13e <midi_Transmit>

	/* Put data into buffer, sends the data */
	UDR = data;
 142:	8c b9       	out	0x0c, r24	; 12
}
 144:	08 95       	ret

00000146 <playBack>:
		eeprom_address++;		
	}
	
}

void playBack(){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	3f c0       	rjmp	.+126    	; 0x1ce <playBack+0x88>
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 150:	e1 99       	sbic	0x1c, 1	; 28
 152:	fe cf       	rjmp	.-4      	; 0x150 <playBack+0xa>
	/* Set up address register */
	EEAR = uiAddress;
 154:	3f bb       	out	0x1f, r19	; 31
 156:	2e bb       	out	0x1e, r18	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 158:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 15a:	8d b3       	in	r24, 0x1d	; 29
}

void playBack(){
	while(start_addr < stop_addr){
		for(int i = 0; i < 5; i++){
			midiData[i] = EEPROM_read(start_addr);
 15c:	81 93       	st	Z+, r24
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
	
}

void playBack(){
	while(start_addr < stop_addr){
		for(int i = 0; i < 5; i++){
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	e5 37       	cpi	r30, 0x75	; 117
 166:	f8 07       	cpc	r31, r24
 168:	99 f7       	brne	.-26     	; 0x150 <playBack+0xa>
 16a:	4b 5f       	subi	r20, 0xFB	; 251
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
 16e:	50 93 69 00 	sts	0x0069, r21
 172:	40 93 68 00 	sts	0x0068, r20
			midiData[i] = EEPROM_read(start_addr);
			start_addr++;
		}
		unsigned char lsb = midiData[3];
		unsigned char msb = midiData[4];
		unsigned int interval = ((0x00FF & msb) << 8) + lsb;
 176:	10 91 74 00 	lds	r17, 0x0074
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	80 91 73 00 	lds	r24, 0x0073
 180:	e8 01       	movw	r28, r16
 182:	c8 0f       	add	r28, r24
 184:	d1 1d       	adc	r29, r1
		if(mod){
 186:	80 91 6e 00 	lds	r24, 0x006E
 18a:	88 23       	and	r24, r24
 18c:	39 f0       	breq	.+14     	; 0x19c <playBack+0x56>
			interval = interval / ReadADC();
 18e:	0e 94 62 00 	call	0xc4	; 0xc4 <ReadADC>
 192:	bc 01       	movw	r22, r24
 194:	ce 01       	movw	r24, r28
 196:	0e 94 9b 01 	call	0x336	; 0x336 <__udivmodhi4>
 19a:	eb 01       	movw	r28, r22
		}
		TCNT1 = 0;
 19c:	1d bc       	out	0x2d, r1	; 45
 19e:	1c bc       	out	0x2c, r1	; 44

		while(TCNT1 < interval);
 1a0:	8c b5       	in	r24, 0x2c	; 44
 1a2:	9d b5       	in	r25, 0x2d	; 45
 1a4:	8c 17       	cp	r24, r28
 1a6:	9d 07       	cpc	r25, r29
 1a8:	d8 f3       	brcs	.-10     	; 0x1a0 <playBack+0x5a>
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
 1aa:	80 91 70 00 	lds	r24, 0x0070
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 1b4:	80 91 71 00 	lds	r24, 0x0071
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
 1be:	80 91 72 00 	lds	r24, 0x0072
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 9f 00 	call	0x13e	; 0x13e <midi_Transmit>
		}
		PORTB = midiData[1];
 1c8:	80 91 71 00 	lds	r24, 0x0071
 1cc:	88 bb       	out	0x18, r24	; 24
	}
	
}

void playBack(){
	while(start_addr < stop_addr){
 1ce:	40 91 68 00 	lds	r20, 0x0068
 1d2:	50 91 69 00 	lds	r21, 0x0069
 1d6:	80 91 6a 00 	lds	r24, 0x006A
 1da:	90 91 6b 00 	lds	r25, 0x006B
 1de:	48 17       	cp	r20, r24
 1e0:	59 07       	cpc	r21, r25
 1e2:	20 f4       	brcc	.+8      	; 0x1ec <playBack+0xa6>
 1e4:	e0 e7       	ldi	r30, 0x70	; 112
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	9a 01       	movw	r18, r20
 1ea:	b2 cf       	rjmp	.-156    	; 0x150 <playBack+0xa>
		for(int i = 0; i < 3; i++){
			midi_Transmit(midiData[i]);
		}
		PORTB = midiData[1];
	}
	start_addr = 0;
 1ec:	10 92 69 00 	sts	0x0069, r1
 1f0:	10 92 68 00 	sts	0x0068, r1
	
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	08 95       	ret

000001fe <midi_Receive>:
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
 1fe:	5f 9b       	sbis	0x0b, 7	; 11
 200:	fe cf       	rjmp	.-4      	; 0x1fe <midi_Receive>

	/* get and return data from buffer */
	return UDR;
 202:	8c b1       	in	r24, 0x0c	; 12
}
 204:	08 95       	ret

00000206 <midi_Flush>:

/* flushs the buffer of the midi */
void midi_Flush(void){ 
 206:	01 c0       	rjmp	.+2      	; 0x20a <midi_Flush+0x4>
	unsigned char dummy;
	while (UCSRA & (1 << RXC) ) dummy = UDR;
 208:	8c b1       	in	r24, 0x0c	; 12
 20a:	5f 99       	sbic	0x0b, 7	; 11
 20c:	fd cf       	rjmp	.-6      	; 0x208 <midi_Flush+0x2>
}
 20e:	08 95       	ret

00000210 <midi_ReadUCSRC>:

unsigned char midi_ReadUCSRC(void){
	unsigned char ucsrc;
	/* read UCSRC */
	//note may need cli() to disable interrupts
	ucsrc = UBRRH;
 210:	80 b5       	in	r24, 0x20	; 32
	ucsrc = UCSRC;
 212:	80 b5       	in	r24, 0x20	; 32
	return ucsrc;
}
 214:	08 95       	ret

00000216 <TIM16_ReadTCNT1>:

unsigned char TIM16_ReadTCNT1(void){
	unsigned char sreg;
	unsigned char i;
	/* save gloval interrupt flag */
	sreg = SREG;
 216:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 218:	f8 94       	cli
	/* read TCNT1 into i */
	i = TCNT1;
 21a:	8c b5       	in	r24, 0x2c	; 44
 21c:	9d b5       	in	r25, 0x2d	; 45
	/* restore global interrupt flag */
	SREG = sreg;
 21e:	2f bf       	out	0x3f, r18	; 63
	return i;
}
 220:	08 95       	ret

00000222 <TIM16_WriteTCNT1>:

void TIM16_WriteTCNT1 (unsigned int i){
	unsigned char sreg;
	/* save global interrupt flag */
	sreg = SREG;
 222:	2f b7       	in	r18, 0x3f	; 63
	/* disable interrupts */
	cli();
 224:	f8 94       	cli
	/* set tcnt1 to i */
	TCNT1 = i;
 226:	9d bd       	out	0x2d, r25	; 45
 228:	8c bd       	out	0x2c, r24	; 44
	/* restore global interrupt flag */
	SREG = sreg;
 22a:	2f bf       	out	0x3f, r18	; 63
}
 22c:	08 95       	ret

0000022e <EEPROM_write>:

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* wait for completion of previous write */
	while (EECR & (1 <<EEWE));
 22e:	e1 99       	sbic	0x1c, 1	; 28
 230:	fe cf       	rjmp	.-4      	; 0x22e <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
 232:	9f bb       	out	0x1f, r25	; 31
 234:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 236:	6d bb       	out	0x1d, r22	; 29
	//char cSREG;
	//cSREG = SREG;
	//cli();

	/* Write logical one to EEMWE */
	EECR |= (1 << EEMWE);
 238:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeporm write by setting EEWE */
	EECR |= (1 << EEWE);
 23a:	e1 9a       	sbi	0x1c, 1	; 28
	//SREG = cSREG;
}
 23c:	08 95       	ret

0000023e <record>:

}

/***** Create Methods *****/

void record(){
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
	unsigned int interval;
	TCNT1 = 0;
 242:	1d bc       	out	0x2d, r1	; 45
 244:	1c bc       	out	0x2c, r1	; 44
 246:	c0 e7       	ldi	r28, 0x70	; 112
 248:	d0 e0       	ldi	r29, 0x00	; 0
 24a:	fe 01       	movw	r30, r28
	UDR = data;
}

unsigned char midi_Receive(void){
	/* Wait for data to be recieved */
	while(!(UCSRA & (1<<RXC)));
 24c:	5f 9b       	sbis	0x0b, 7	; 11
 24e:	fe cf       	rjmp	.-4      	; 0x24c <record+0xe>

	/* get and return data from buffer */
	return UDR;
 250:	8c b1       	in	r24, 0x0c	; 12
void record(){
	unsigned int interval;
	TCNT1 = 0;

	for(int i = 0; i <3; i++){
		midiData[i] = midi_Receive();
 252:	81 93       	st	Z+, r24

void record(){
	unsigned int interval;
	TCNT1 = 0;

	for(int i = 0; i <3; i++){
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	e3 37       	cpi	r30, 0x73	; 115
 258:	f8 07       	cpc	r31, r24
 25a:	c1 f7       	brne	.-16     	; 0x24c <record+0xe>
		midiData[i] = midi_Receive();
	}

	PORTB = midiData[1];
 25c:	80 91 71 00 	lds	r24, 0x0071
 260:	88 bb       	out	0x18, r24	; 24
	interval = TCNT1;
 262:	8c b5       	in	r24, 0x2c	; 44
 264:	9d b5       	in	r25, 0x2d	; 45
	unsigned char lsb = (0xFF & ((interval << 8) >> 8));
	unsigned char msb = (0xFF & ((interval >> 8)));
	midiData[3] = lsb;
 266:	80 83       	st	Z, r24
	midiData[4] = msb;
 268:	91 83       	std	Z+1, r25	; 0x01
	stop_addr = eeprom_address;
 26a:	80 91 66 00 	lds	r24, 0x0066
 26e:	90 91 67 00 	lds	r25, 0x0067
 272:	90 93 6b 00 	sts	0x006B, r25
 276:	80 93 6a 00 	sts	0x006A, r24

	for(int j= 0; j < 5; j++){
		EEPROM_write(eeprom_address, midiData[j]);
 27a:	80 91 66 00 	lds	r24, 0x0066
 27e:	90 91 67 00 	lds	r25, 0x0067
 282:	69 91       	ld	r22, Y+
 284:	0e 94 17 01 	call	0x22e	; 0x22e <EEPROM_write>
		eeprom_address++;		
 288:	80 91 66 00 	lds	r24, 0x0066
 28c:	90 91 67 00 	lds	r25, 0x0067
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 67 00 	sts	0x0067, r25
 296:	80 93 66 00 	sts	0x0066, r24
	unsigned char msb = (0xFF & ((interval >> 8)));
	midiData[3] = lsb;
	midiData[4] = msb;
	stop_addr = eeprom_address;

	for(int j= 0; j < 5; j++){
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	c5 37       	cpi	r28, 0x75	; 117
 29e:	d8 07       	cpc	r29, r24
 2a0:	61 f7       	brne	.-40     	; 0x27a <record+0x3c>
		EEPROM_write(eeprom_address, midiData[j]);
		eeprom_address++;		
	}
	
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <main>:
void timer500();
unsigned char TIM16_ReadTCNT1(void);


/***** Main Loop *****/
int main(void){
 2a8:	1f 93       	push	r17
	UBRRL = (unsigned char) baudrate;
	UCSRB = (1 << TXEN) | (1 << RXEN);
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
}
void setupPins(){
	DDRB = 0xFF;  //Set outp1ts
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;  //Set inputs
 2ae:	1a ba       	out	0x1a, r1	; 26
	PORTB = 0x00; //Turns all leds off
 2b0:	18 ba       	out	0x18, r1	; 24
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
 2b2:	17 e0       	ldi	r17, 0x07	; 7
 2b4:	1b bb       	out	0x1b, r17	; 27
	DDRD = 0x00;
 2b6:	11 ba       	out	0x11, r1	; 17


/***** Main Loop *****/
int main(void){
   setupPins();
   setupTimer();
 2b8:	0e 94 53 00 	call	0xa6	; 0xa6 <setupTimer>
	PORTB = 0x00; //Turns all leds off
	PORTA = 0x07; // sets inputs to return 5v on PA0, PA1, PA2
	DDRD = 0x00;
}
void setupAnalog(){
	ADMUX = (1 << REFS0) | (1<< MUX0) | (1<< MUX1) | (1<< MUX2); // sets the analog input of the photosensor to 0-5v, sets to look at the 7th analog pin.
 2bc:	87 e4       	ldi	r24, 0x47	; 71
 2be:	87 b9       	out	0x07, r24	; 7
	ADCSRA =  (1 << ADEN) | (1<< ADPS2) | (1<< ADPS1) | (1<< ADPS0); // ADEN turns ADC on; ADPS sets prescaler to 128;
 2c0:	87 e8       	ldi	r24, 0x87	; 135
 2c2:	86 b9       	out	0x06, r24	; 6


/***** Setup Methods *****/

void setupMIDI(unsigned int baudrate){
	UBRRH = (unsigned char) (baudrate >> 8);
 2c4:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) baudrate;
 2c6:	19 b9       	out	0x09, r17	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);
 2c8:	88 e1       	ldi	r24, 0x18	; 24
 2ca:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL )|(0 << USBS) | (3 << UCSZ0); //only use 8 bit words
 2cc:	86 e8       	ldi	r24, 0x86	; 134
 2ce:	80 bd       	out	0x20, r24	; 32
   setupTimer();
   setupAnalog();
   setupMIDI(BUAD_PRESCALE);

    while(1){
		rec = PINA & 0x04;
 2d0:	99 b3       	in	r25, 0x19	; 25
 2d2:	94 70       	andi	r25, 0x04	; 4
 2d4:	90 93 75 00 	sts	0x0075, r25
		play = PINA & 0x02;
 2d8:	29 b3       	in	r18, 0x19	; 25
 2da:	22 70       	andi	r18, 0x02	; 2
 2dc:	20 93 6f 00 	sts	0x006F, r18
		mod = PINA & 0x01;
 2e0:	89 b3       	in	r24, 0x19	; 25
 2e2:	81 70       	andi	r24, 0x01	; 1
 2e4:	80 93 6e 00 	sts	0x006E, r24
	
		if(rec && !play){
 2e8:	99 23       	and	r25, r25
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <main+0x4c>
 2ec:	22 23       	and	r18, r18
 2ee:	11 f4       	brne	.+4      	; 0x2f4 <main+0x4c>
			record();
 2f0:	0e 94 1f 01 	call	0x23e	; 0x23e <record>
		}
		if(play && !rec){
 2f4:	80 91 6f 00 	lds	r24, 0x006F
 2f8:	88 23       	and	r24, r24
 2fa:	51 f3       	breq	.-44     	; 0x2d0 <main+0x28>
 2fc:	80 91 75 00 	lds	r24, 0x0075
 300:	88 23       	and	r24, r24
 302:	31 f7       	brne	.-52     	; 0x2d0 <main+0x28>
			if (mod){ // Modify Mode
 304:	80 91 6e 00 	lds	r24, 0x006E
 308:	88 23       	and	r24, r24
 30a:	11 f7       	brne	.-60     	; 0x2d0 <main+0x28>
				modify();
			}else{
				playBack();
 30c:	0e 94 a3 00 	call	0x146	; 0x146 <playBack>
 310:	df cf       	rjmp	.-66     	; 0x2d0 <main+0x28>

00000312 <EEPROM_read>:
	//SREG = cSREG;
}

unsigned char EEPROM_read(unsigned int uiAddress){
	/* wait for completion of previous write */
	while(EECR & (1<< EEWE));
 312:	e1 99       	sbic	0x1c, 1	; 28
 314:	fe cf       	rjmp	.-4      	; 0x312 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
 316:	9f bb       	out	0x1f, r25	; 31
 318:	8e bb       	out	0x1e, r24	; 30
	//char cSREG;
	//cSREG = SREG;
	//cli();
	/* Start eeprom read by writing EERE */
	EECR |= (1<< EERE);
 31a:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	//SREG = cSREG;
	return EEDR;
 31c:	8d b3       	in	r24, 0x1d	; 29
}
 31e:	08 95       	ret

00000320 <__vector_8>:

/***** Timer Interrupts *****/

ISR(TIMER1_COMPB_vect){
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
	PORTB = 0x00; // blink
 32a:	18 ba       	out	0x18, r1	; 24
	 //Reset timer
}
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__udivmodhi4>:
 336:	aa 1b       	sub	r26, r26
 338:	bb 1b       	sub	r27, r27
 33a:	51 e1       	ldi	r21, 0x11	; 17
 33c:	07 c0       	rjmp	.+14     	; 0x34c <__udivmodhi4_ep>

0000033e <__udivmodhi4_loop>:
 33e:	aa 1f       	adc	r26, r26
 340:	bb 1f       	adc	r27, r27
 342:	a6 17       	cp	r26, r22
 344:	b7 07       	cpc	r27, r23
 346:	10 f0       	brcs	.+4      	; 0x34c <__udivmodhi4_ep>
 348:	a6 1b       	sub	r26, r22
 34a:	b7 0b       	sbc	r27, r23

0000034c <__udivmodhi4_ep>:
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	5a 95       	dec	r21
 352:	a9 f7       	brne	.-22     	; 0x33e <__udivmodhi4_loop>
 354:	80 95       	com	r24
 356:	90 95       	com	r25
 358:	bc 01       	movw	r22, r24
 35a:	cd 01       	movw	r24, r26
 35c:	08 95       	ret

0000035e <_exit>:
 35e:	f8 94       	cli

00000360 <__stop_program>:
 360:	ff cf       	rjmp	.-2      	; 0x360 <__stop_program>
